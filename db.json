{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/application.js.map","path":"js/application.js.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/alipay.jpg","path":"images/donate/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/alipayimg.jpg","path":"images/donate/alipayimg.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/weipay.jpg","path":"images/donate/weipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/weipayimg.jpg","path":"images/donate/weipayimg.jpg","modified":0,"renderable":1},{"_id":"source/images/assets/png/1.png","path":"images/assets/png/1.png","modified":0,"renderable":0},{"_id":"source/images/assets/png/2.png","path":"images/assets/png/2.png","modified":0,"renderable":0},{"_id":"source/images/assets/png/3.png","path":"images/assets/png/3.png","modified":0,"renderable":0},{"_id":"source/images/protobuffer/1.png","path":"images/protobuffer/1.png","modified":0,"renderable":0},{"_id":"source/images/csharplua/2.png","path":"images/csharplua/2.png","modified":0,"renderable":0},{"_id":"source/images/csharplua/1.png","path":"images/csharplua/1.png","modified":0,"renderable":0},{"_id":"source/images/csharplua/3.png","path":"images/csharplua/3.png","modified":0,"renderable":0},{"_id":"source/images/csharplua/4.png","path":"images/csharplua/4.png","modified":0,"renderable":0},{"_id":"source/images/csharplua/5.png","path":"images/csharplua/5.png","modified":0,"renderable":0},{"_id":"source/images/csharplua/6.png","path":"images/csharplua/6.png","modified":0,"renderable":0},{"_id":"source/images/ecs/1.png","path":"images/ecs/1.png","modified":0,"renderable":0},{"_id":"source/images/csharplua/courgette.log","path":"images/csharplua/courgette.log","modified":0,"renderable":0}],"Cache":[{"_id":"source/Links/index.md","hash":"9c355f4fcc0909978540694beebd437244a9a706","modified":1623408089750},{"_id":"source/about/index.md","hash":"e309de95feb4f0c1848dcc2d9ef09ba460228cf1","modified":1623409445974},{"_id":"source/categories/index.md","hash":"01d5bc7e92f1187318b06767093d4f3b9ed9f823","modified":1623407695690},{"_id":"source/repository/index.md","hash":"2ef8d9e20d8271a2bd47db9ea2fb9da1136d0f33","modified":1623426163015},{"_id":"source/tags/index.md","hash":"097e4fa4259845bc91be0455cbdc2eb7545b7f0f","modified":1623407636833},{"_id":"source/_posts/Hexo/Hexo-Pure-设置.md","hash":"058a84ae1301337210209bc604ba576a907e68e4","modified":1623407247117},{"_id":"source/_posts/Hexo/Hexo使用.md","hash":"b6f7926c4dc8ccb9e670f433b5b8a6139e5b1e93","modified":1623425768184},{"_id":"source/_posts/UE4/0.UE4-踩坑记录.md","hash":"4ce685bb25e23ea2b2880259a76e2dbeeac9f8ce","modified":1623397533527},{"_id":"source/_posts/UE4/1.UE4-安装-Rider for Unreal Engine.md","hash":"06194914786950e1c0ddd56bb98da2183f72cb6b","modified":1623425721353},{"_id":"source/_posts/UE4/3.UE4-FString.md","hash":"9b10a0f8dd1736d8efc22e3dc917d9790a0b9d21","modified":1623397630191},{"_id":"source/_posts/UE4/2.UE4-新建工程.md","hash":"20fc086bfd4627606625dc17678991d834fd1d1d","modified":1623397592713},{"_id":"source/images/assets/png/1.png","hash":"eb5aa36500cfc77298df3afcce2b5c1aaba8352e","modified":1623411098731},{"_id":"source/images/assets/png/2.png","hash":"0baaf3d37a9fb715bb35867e793076e2e008ee2e","modified":1623411098787},{"_id":"source/images/assets/png/3.png","hash":"b1532a0d2892fa1c2d5e9005dbbe915967ca0902","modified":1623411098811},{"_id":"themes/hexo-theme-pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1510482121000},{"_id":"themes/hexo-theme-pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1510482121000},{"_id":"themes/hexo-theme-pure/README.cn.md","hash":"3ae58f0247461c373494d8c5dade660a38fd3676","modified":1510482121000},{"_id":"themes/hexo-theme-pure/README.md","hash":"58912e7a477b0ef757437f0b0c3f046e67559ad8","modified":1510482121000},{"_id":"themes/hexo-theme-pure/_config.example.yml","hash":"0f850435302018c007b4377e42cedba5c9ac707a","modified":1510482121000},{"_id":"themes/hexo-theme-pure/_config.yml","hash":"6f22c9d24a8e1248bdb5e020a37d8127414fb9cb","modified":1623644725864},{"_id":"themes/hexo-theme-pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/categories.ejs","hash":"31aefdc46e7274e429aed0e1380d36533cf4fd9a","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/category.ejs","hash":"77c5f35de6ce3fc9aa90cb004e1cbc9ea5c065b5","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/layout.ejs","hash":"143b2a358ff5a9145df2c2e58b381bc149c147c5","modified":1623396904245},{"_id":"themes/hexo-theme-pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/tag.ejs","hash":"98d9338d29330a06978f282bfcd5a8eb9318bb80","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/tags.ejs","hash":"c25fc63a1aa5addf0fa4fe7943ca45d9abb4336c","modified":1510482121000},{"_id":"themes/hexo-theme-pure/languages/default.yml","hash":"d911ec1d372ca8007a3c8afa30261bce162eeb82","modified":1510482121000},{"_id":"themes/hexo-theme-pure/languages/en.yml","hash":"d911ec1d372ca8007a3c8afa30261bce162eeb82","modified":1510482121000},{"_id":"themes/hexo-theme-pure/languages/zh-CN.yml","hash":"cbfc400d1d6fbab2e66e8f62667a5613725d3ccd","modified":1510482121000},{"_id":"themes/hexo-theme-pure/languages/zh-TW.yml","hash":"5a33882faaedbbd1a8e631bc77597f8c2cf272c7","modified":1510482121000},{"_id":"themes/hexo-theme-pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/favicon.png","hash":"6cc68a2172a0b793a0f8a90b60b35cf213223b3e","modified":1623383544901},{"_id":"themes/hexo-theme-pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1510482121000},{"_id":"themes/hexo-theme-pure/_source/_data/links.yml","hash":"6cebd5fc2ccd6eaec1e42ad995fc5287353c0ced","modified":1623388764614},{"_id":"themes/hexo-theme-pure/_source/404/index.md","hash":"d18cc3c0de0f8333c78239bbeecba816f08e0692","modified":1510482121000},{"_id":"themes/hexo-theme-pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1510482121000},{"_id":"themes/hexo-theme-pure/_source/about/index.md","hash":"9c95cabb533409d06daefc4295021ad199761efc","modified":1510482121000},{"_id":"themes/hexo-theme-pure/_source/categories/index.md","hash":"5a2157cb66e3d3d9e611573abc62f72487ea5550","modified":1623403154027},{"_id":"themes/hexo-theme-pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1510482121000},{"_id":"themes/hexo-theme-pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1510482121000},{"_id":"themes/hexo-theme-pure/_source/tags/index.md","hash":"c2873a6d537e7c621ec76f302c69f340da49a41f","modified":1623403298553},{"_id":"themes/hexo-theme-pure/layout/_common/footer.ejs","hash":"bc7732f6a0b2ad65d1e935cd6f079f931f4653a0","modified":1623400851319},{"_id":"themes/hexo-theme-pure/layout/_common/head.ejs","hash":"573986885a967e21e0bf25971eeb2ae72b4815d8","modified":1623646387456},{"_id":"themes/hexo-theme-pure/layout/_common/header.ejs","hash":"3463c59da88b5961b9c9f0baa994c020580870e8","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_common/script.ejs","hash":"eb91f079f527769822b883c6b7bf5fb1c7410046","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_common/social.ejs","hash":"70b7d1b237ac2f914a8185794ebd7891b259827d","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_common/plugin.ejs","hash":"90b50b052daf24394e84f747c5ebc639752e9731","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-book.ejs","hash":"420dd18d8ea730065d20fee2bf7a7a9879a847cb","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-link.ejs","hash":"9adda178e9f026e9369fd08f21bdaf1870d23548","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-category.ejs","hash":"3885bbe5b3f1fa4fc0eb39f0f2f68a4f225fef08","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-post.ejs","hash":"a84af1262065d42f442d0da7bd3d8dd4caafd09c","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-repository.ejs","hash":"38b3d256f6793669e21ae7eeaccc11a4772fc687","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive.ejs","hash":"fe31bcb9278475c1b8c157ca8b9510ff70d4cd45","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/item-post.ejs","hash":"0bdd0d056a54fc8099b6cc4756acdf0b90754e3e","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/article.ejs","hash":"71115e18dd08df590e990fb5a4a2daf1aa5cfab6","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/pagination.ejs","hash":"7bff50db2d42f0028e0ef722e6819e66dce79798","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/sidebar-about.ejs","hash":"e10ea0176ba87e64888234bafedc01c92544352c","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_search/baidu.ejs","hash":"3a3d09859afd6450db11c0ceb0ef805282128bc3","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_search/index.ejs","hash":"1ecca956ff2d439cbef4aa372fbb2cc6635550b9","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_search/insight.ejs","hash":"d64d74ee94cddc9bc67eec813eff10bd548b62b9","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_widget/board.ejs","hash":"9d8ade7163bf6c7059e67b3320a33d64fcc5afde","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_widget/recent_posts.ejs","hash":"eac46ad4500848ff37dcbad4d8bbc60c9357adaa","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_script/douban.ejs","hash":"d5462cebb2c6d6bedd4079348deda818c177a8ac","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_script/pv.ejs","hash":"bd5dbd41017286379c6549405b450227ee4645bc","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_script/repository.ejs","hash":"234e6a9d8b129dc19e916cb9f927a27b04758180","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/images/avatar.jpg","hash":"6cc68a2172a0b793a0f8a90b60b35cf213223b3e","modified":1623383544901},{"_id":"themes/hexo-theme-pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/js/application.js","hash":"68f8075dfc6656e1554c225d6da02373e90efd8c","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/js/application.js.map","hash":"fcd293b96808e26adbe00c2d81828e67f0a4ec14","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/category.ejs","hash":"b80d594b38a9765f07fb9989652804fb276dd7be","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/comment.ejs","hash":"a4f8b53225265b0370824eda6b44d4427c98006d","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/copyright.ejs","hash":"a9d3d05428e5844a07706c7fcfeb842e44a36a64","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/date.ejs","hash":"8e8ce2bc209ff1621b9a9e5017d158d4f8152aff","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/donate.ejs","hash":"78136b1fa31e2be32beddfc308f6b90f85cdacbf","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/nav.ejs","hash":"6988f8b38cd26d827bef3bde430f89a549fe06f3","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/pv.ejs","hash":"599734dcc8cc3c28639dd0472c96e636b333faf2","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/tag.ejs","hash":"76a7339c1f398621b4601bbf80e2fa11eee52f0e","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_script/_analytics/script.ejs","hash":"c5aa37346d973437d0a693f8dd345a0b87edfe6f","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"dee9c2adc0df37c7e1edb617ba92983eee3f3c8e","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/disqus.ejs","hash":"b30ced7d02e63c64227139aa4b99286400d7bcea","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/gitment.ejs","hash":"09e66c8bfd1cc0507a0da619f56101423b9e653a","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/livere.ejs","hash":"c951b2fac4e143c0a2fb4fd3369307f23cfe2687","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/script.ejs","hash":"ee1cf9c35e51d21a170a7ac5f43e63c2bf777448","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/youyan.ejs","hash":"92d897be24e8c520c5a3f8903c542892e2b30a9a","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1510482121000},{"_id":"themes/hexo-theme-pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/images/donate/alipay.jpg","hash":"8a5b2c72ddb7396adb709771a35ef50b8cf5485e","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/images/donate/weipay.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1510482121000},{"_id":"themes/hexo-theme-pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1510482121000},{"_id":"themes/hexo-theme-pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1510482121000},{"_id":"themes/hexo-theme-pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1510482121000},{"_id":"themes/hexo-theme-pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1510482121000},{"_id":"themes/hexo-theme-pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/css/style.css","hash":"1291fbc72968fabeb556f02431081bc7eb630f2e","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/js/plugin.js","hash":"b5b81aa434cc5e2abd04bab3e5a26fa17606b38d","modified":1510482121000},{"_id":"themes/hexo-theme-pure/source/images/donate/alipayimg.jpg","hash":"f0879044d7131fff49872f1a65c6c09631373857","modified":1623394214841},{"_id":"themes/hexo-theme-pure/source/images/donate/weipayimg.jpg","hash":"68e397ed0d98c858489a60e91d0ceac87bc8336d","modified":1623394237874},{"_id":"themes/hexo-theme-pure/source/js/plugin.js.map","hash":"b701e72ced18c1f7c83ee19c2c54a8699927ff88","modified":1510482121000},{"_id":"themes/hexo-theme-pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1510482121000},{"_id":"public/baidusitemap.xml","hash":"447f37c4e453284af0ca3451f1d7f12673222292","modified":1645441955015},{"_id":"public/atom.xml","hash":"e3ba3fc98b5fc669bf98d622b2f040e4f595e90d","modified":1645441955015},{"_id":"public/content.json","hash":"48438decc10930b69805d3c9e9ff4dbcd938a5e7","modified":1645441955015},{"_id":"public/sitemap.xml","hash":"060a58e8867cb417c4eb7e0beb5ed6c4436af3d4","modified":1645441955015},{"_id":"public/Links/index.html","hash":"943f46ef46c78670b007ccefdd8b8a5854a90926","modified":1645441955015},{"_id":"public/about/index.html","hash":"f365543dbe157dd0dfc45ac0863ac1f54254a9a9","modified":1645441955015},{"_id":"public/repository/index.html","hash":"6f8052cb216fcf0071310c0a9cbb9a0959c31df1","modified":1645441955015},{"_id":"public/categories/index.html","hash":"8805105a8db5468c4d3f070097c15c5c0dbc24e1","modified":1645441955015},{"_id":"public/tags/index.html","hash":"65cc4e19e531135ddfce3bf032864d67a7bf1aef","modified":1645441955015},{"_id":"public/2021/06/11/Hexo/Hexo-Pure-设置/index.html","hash":"ee11e74c273bb810485a7c739941184f71cef044","modified":1645441955015},{"_id":"public/2021/06/11/UE4/1.UE4-安装-Rider for Unreal Engine/index.html","hash":"e894a7520d304add8ae085f885e778eb4938df30","modified":1645441955015},{"_id":"public/2021/06/11/Hexo/Hexo使用/index.html","hash":"3d4ed9b7f2ddbf31c0e4c78a43839903d07df5cc","modified":1645441955015},{"_id":"public/2021/06/11/UE4/0.UE4-踩坑记录/index.html","hash":"f9772723c0bc5b0cbd012a0f5c4f5e55ce9f8646","modified":1645441955015},{"_id":"public/2021/06/11/UE4/3.UE4-FString/index.html","hash":"1d4e7748532ac8f5f497366618a8a30ab883b263","modified":1645441955015},{"_id":"public/2021/06/11/UE4/2.UE4-新建工程/index.html","hash":"7ec950d45f4bf2e3843a14d20c0779cbc7a411c8","modified":1645441955015},{"_id":"public/archives/index.html","hash":"b6606ec57d5636ca4b3698cde80e3e99768ead81","modified":1645441955015},{"_id":"public/archives/2021/index.html","hash":"d5334ed19df466e9bf43e01da53c4c72ccd804c1","modified":1645441955015},{"_id":"public/archives/2021/06/index.html","hash":"12dabc0eef107dcb92e3bba0786d7345d70d9b29","modified":1645441955015},{"_id":"public/categories/Hexo/index.html","hash":"1b34922f1315ab02d9a43626ac047cf1c7749ae7","modified":1645441955015},{"_id":"public/categories/UE4/index.html","hash":"6893f499853c4fdd605d093a3ab696db88c3c320","modified":1645441955015},{"_id":"public/index.html","hash":"671223602d9a4450258ae619531c15ef95546812","modified":1645441955015},{"_id":"public/tags/pure/index.html","hash":"75ff1052693eb9c38d4d45ab92c6d2142f58e085","modified":1645441955015},{"_id":"public/tags/hexo/index.html","hash":"b3c1666221c457392c2625792e8ee4f348ff9305","modified":1645441955015},{"_id":"public/tags/UE4/index.html","hash":"06a8ec5879924a5e676b9dcb5dc3caff458a8ed1","modified":1645441955015},{"_id":"public/images/assets/png/1.png","hash":"eb5aa36500cfc77298df3afcce2b5c1aaba8352e","modified":1623425667722},{"_id":"public/images/assets/png/2.png","hash":"0baaf3d37a9fb715bb35867e793076e2e008ee2e","modified":1623425667722},{"_id":"public/images/assets/png/3.png","hash":"b1532a0d2892fa1c2d5e9005dbbe915967ca0902","modified":1623425667722},{"_id":"public/favicon.png","hash":"6cc68a2172a0b793a0f8a90b60b35cf213223b3e","modified":1623423158281},{"_id":"public/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1623423158281},{"_id":"public/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1623423158281},{"_id":"public/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1623423158281},{"_id":"public/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1623423158281},{"_id":"public/images/avatar.jpg","hash":"6cc68a2172a0b793a0f8a90b60b35cf213223b3e","modified":1623423158281},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1623423158281},{"_id":"public/js/application.js.map","hash":"fcd293b96808e26adbe00c2d81828e67f0a4ec14","modified":1623423158281},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1623423158281},{"_id":"public/images/donate/alipay.jpg","hash":"8a5b2c72ddb7396adb709771a35ef50b8cf5485e","modified":1623423158281},{"_id":"public/images/donate/weipay.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1623423158281},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1623423158281},{"_id":"public/images/donate/alipayimg.jpg","hash":"f0879044d7131fff49872f1a65c6c09631373857","modified":1623423158281},{"_id":"public/images/donate/weipayimg.jpg","hash":"68e397ed0d98c858489a60e91d0ceac87bc8336d","modified":1623423158281},{"_id":"public/js/plugin.js.map","hash":"b701e72ced18c1f7c83ee19c2c54a8699927ff88","modified":1623423158281},{"_id":"public/fonts/README.html","hash":"3b9daaf126709e3bbce5926e15d599f1fe877921","modified":1623423158281},{"_id":"public/js/application.js","hash":"68f8075dfc6656e1554c225d6da02373e90efd8c","modified":1623423158281},{"_id":"public/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1623423158281},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1623423158281},{"_id":"public/css/style.css","hash":"1291fbc72968fabeb556f02431081bc7eb630f2e","modified":1623423158281},{"_id":"public/js/plugin.js","hash":"b5b81aa434cc5e2abd04bab3e5a26fa17606b38d","modified":1623423158281},{"_id":"source/_posts/UE4/images/assets/png/1.png","hash":"eb5aa36500cfc77298df3afcce2b5c1aaba8352e","modified":1623411098731},{"_id":"source/_posts/UE4/images/assets/png/2.png","hash":"0baaf3d37a9fb715bb35867e793076e2e008ee2e","modified":1623411098787},{"_id":"source/_posts/UE4/images/assets/png/3.png","hash":"b1532a0d2892fa1c2d5e9005dbbe915967ca0902","modified":1623411098811},{"_id":"source/test.md","hash":"7e9b4969d87484075455697e9b53f3d91d61cd86","modified":1623425637647},{"_id":"public/test.html","hash":"5b95ff1fcff2ad7e06e6ef79561054f897e651a9","modified":1623425667722},{"_id":"source/_posts/数据结构/四叉树.md","hash":"802a269039c0403e33e86dcd4ec55ce83e845a52","modified":1623649046823},{"_id":"public/2021/06/14/数据结构/四叉树/index.html","hash":"7bf3416a0713e127a5e0c262c4825fde0e38200d","modified":1645441955015},{"_id":"public/categories/数据结构/index.html","hash":"7c38e562b4d3fca67131f821afd4956d0426d629","modified":1645441955015},{"_id":"public/tags/算法/index.html","hash":"6e41f7cad833ddfd5fa34726b2fa5aab12cf48c5","modified":1645441955015},{"_id":"source/_posts/Tools/CSharp.lua.md","hash":"49939dd9bf7a8f92f7f405169e225a1369ebfb81","modified":1623928320203},{"_id":"source/images/csharplua/2.png","hash":"f100b3cc1314781ec919324914ed8eae323ff4f1","modified":1623902435069},{"_id":"source/_posts/Tools/GoogleProtobuffer.md","hash":"ef0799c24e40579621cfd7737747a26bff44f78a","modified":1623833510686},{"_id":"source/images/csharplua/1.png","hash":"cbb14aa4e31ee7726d96442f4124c656c8f65b1c","modified":1623908729819},{"_id":"source/images/csharplua/3.png","hash":"75cdd81f555125eecfd19c7051cc2581b436ec1c","modified":1623902435129},{"_id":"source/images/protobuffer/1.png","hash":"2ba3e02b66c3a88e4690bcb67d796cd349c6a5d3","modified":1623829116278},{"_id":"public/2021/06/17/Tools/CSharp.lua/index.html","hash":"ccf4687301bc0084489d952d135a6b0a03a8058d","modified":1645441955015},{"_id":"public/2021/06/14/Tools/GoogleProtobuffer/index.html","hash":"db369daed554e47feab33c71b9dd832f52ae5c1d","modified":1645441955015},{"_id":"public/categories/Tools/index.html","hash":"d654c100033fe977219d50a8fe2e583ac64ca2d7","modified":1645441955015},{"_id":"public/tags/Charp-Lua/index.html","hash":"24af25fea9eed14bf5472a925deee41c772f874c","modified":1645441955015},{"_id":"public/tags/GoogleProtobuffer/index.html","hash":"2108a950c94c79fbebcc53af967ad83343797cfb","modified":1645441955015},{"_id":"public/images/csharplua/1.png","hash":"cbb14aa4e31ee7726d96442f4124c656c8f65b1c","modified":1623911390148},{"_id":"public/images/csharplua/2.png","hash":"f100b3cc1314781ec919324914ed8eae323ff4f1","modified":1623911390148},{"_id":"public/images/csharplua/3.png","hash":"75cdd81f555125eecfd19c7051cc2581b436ec1c","modified":1623911390148},{"_id":"public/images/protobuffer/1.png","hash":"2ba3e02b66c3a88e4690bcb67d796cd349c6a5d3","modified":1623911390148},{"_id":"source/images/csharplua/5.png","hash":"f1f30740bd42360a9e89a68c2be57a4174b53134","modified":1623914666126},{"_id":"source/images/csharplua/4.png","hash":"f2b60cdacead4626f53e897e19769db4d5165c1f","modified":1623914587535},{"_id":"public/images/csharplua/4.png","hash":"f2b60cdacead4626f53e897e19769db4d5165c1f","modified":1623914880877},{"_id":"public/images/csharplua/5.png","hash":"f1f30740bd42360a9e89a68c2be57a4174b53134","modified":1623914880877},{"_id":"source/_posts/Tools/CsharpLua-Xlua适配","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623915235371},{"_id":"source/images/csharplua/6.png","hash":"c489b9b50e3eb0d1195472bea7e60c8ae872bb8f","modified":1623916963354},{"_id":"public/images/csharplua/6.png","hash":"c489b9b50e3eb0d1195472bea7e60c8ae872bb8f","modified":1623917845147},{"_id":"source/images/csharplua/courgette.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624185563779},{"_id":"source/_posts/U3D/ECS/ECS架构.md","hash":"b6ee599595187caf56f4c7b442983d3a67759f4e","modified":1645441653626},{"_id":"source/images/ecs/1.png","hash":"728c61ec5fe888fab0f71f13a642f8f9a4b8e3f5","modified":1625553866587},{"_id":"public/2021/06/14/U3D/ECS/ECS架构/index.html","hash":"33684d8cc913edba91806f8d8e398532a70e4fcd","modified":1645441955015},{"_id":"public/categories/ECS/index.html","hash":"040873517c17afd75ab0482324c31c975b584008","modified":1645441586725},{"_id":"public/tags/框架/index.html","hash":"637325f04b31532b8a6bf9b1726888a0bb9ecbfd","modified":1645441955015},{"_id":"public/images/csharplua/courgette.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1625554509278},{"_id":"public/images/ecs/1.png","hash":"728c61ec5fe888fab0f71f13a642f8f9a4b8e3f5","modified":1625554509278},{"_id":"source/_posts/开发流程管理/策划配置表管理.md","hash":"3829c3ce21285fc546d86bec628e3a821a262d6f","modified":1628674574098},{"_id":"public/2021/06/14/开发流程管理/策划配置表管理/index.html","hash":"b0d016e9254e01a18ca63d45615aae1ae4ee6c4f","modified":1645441955015},{"_id":"public/archives/page/2/index.html","hash":"717725b1cdb9946fa7a69066f4c4df5eb6f9986d","modified":1645441955015},{"_id":"public/archives/2021/page/2/index.html","hash":"4efa5074091f6a1363d8f177e8ee9266a9f50741","modified":1645441955015},{"_id":"public/archives/2021/06/page/2/index.html","hash":"0b50cbc0871162d3795e88d12bd380637615f38b","modified":1645441955015},{"_id":"public/categories/开发流程/index.html","hash":"3a97b9fe89e14e866075f0f86f924c04d82a42f0","modified":1645441955015},{"_id":"public/page/2/index.html","hash":"bd0c651bd9a294080220e683c27d78e84b6f761c","modified":1645441955015},{"_id":"public/tags/开发流程/index.html","hash":"91f15d363ade29555563f49d74d189b3245f4d25","modified":1645441955015},{"_id":"source/_posts/cmd.md","hash":"f4a410fec090f4c83daac9f824a6279efdf6ce82","modified":1628675392822},{"_id":"public/2021/06/14/cmd/index.html","hash":"a0e6fa8c51dd15f0018a0aef7758772efa86800f","modified":1645441955015},{"_id":"public/categories/shell/index.html","hash":"7871bc763bcb35662455050195f741b04a23f63e","modified":1645441955015},{"_id":"public/tags/shell/index.html","hash":"28571ff7a3684d0ae3a2fb95c327a2ce34aa1f96","modified":1645441955015},{"_id":"source/_posts/Shader/1笔记_builtin_shaders_Unlit-Color.md","hash":"fabb8773c8ca7a05088fd6d0ff4bc6b82a2e0979","modified":1645441849482},{"_id":"public/2021/06/14/Shader/1笔记_builtin_shaders_Unlit-Color/index.html","hash":"8f554fc6f36ebf5950a78b4b8c90bfc88b5dc0d6","modified":1645441955015},{"_id":"public/categories/Unlit-Color/index.html","hash":"182bbb72eddb5d96eba6d2ddccf315ab858076e7","modified":1645441698761},{"_id":"public/tags/builtin-shaders/index.html","hash":"7ca8be52203b0cc5da798eb5ff4d6a24a3d42e50","modified":1645441955015},{"_id":"source/_posts/U3D/资源管理/图片格式优化.md","hash":"a997a290525c3bb94a1e0d532e88b47d329d326e","modified":1645441693116},{"_id":"source/_posts/U3D/优化.md","hash":"fac98e204eb3acc28e5584286f29b0e4747f0a51","modified":1645441644638},{"_id":"source/_posts/U3D/aab打包.html","hash":"6c8eb4ef50516c08f3189a3d5a62df6fb19a71d3","modified":1634626631439},{"_id":"source/_posts/U3D/aab打包.md","hash":"23041fa04d8825ec316242319f0d255daccc0aa6","modified":1645441641602},{"_id":"source/_posts/U3D/ECS/Unity DOTS.md","hash":"d60dca988a9e63fbb3b8c75ccdb0442cc974bba2","modified":1645441658984},{"_id":"source/_posts/U3D/资源管理/audio优化.md","hash":"202209219c3f27578c6ff870ecf42a38a463a996","modified":1645441667100},{"_id":"source/_posts/U3D/ECS/ADB调试.md","hash":"f5aba9be89db200a750be5a726df6c90aaf29f56","modified":1636705116135},{"_id":"source/_posts/U3D/移动平台性能优化技巧.pdf","hash":"80a2fcb91c8a6439eaf08dd872e3908332c1b88d","modified":1626771330555},{"_id":"source/_posts/U3D/Unity移动游戏性能分析与优化.pdf","hash":"8e621639e6e7645e640d2f88ffff5bf0b088c898","modified":1626771337827},{"_id":"source/_posts/U3D/让游戏更美好.pdf","hash":"e8dbbed825329917b6ac74850fff1623a59d0ef4","modified":1626771333853},{"_id":"public/2021/11/18/U3D/资源管理/图片格式优化/index.html","hash":"0b096328dffbfdcc4a2c8c19469b950f8f1aa31f","modified":1645441955015},{"_id":"public/2021/09/09/U3D/aab打包/index.html","hash":"3041e747ffdbdc1b40175e0d3c50811d30b5ef38","modified":1645441458257},{"_id":"public/2021/08/30/U3D/ECS/Unity DOTS/index.html","hash":"a4d9083f359a07147cae02d635639de6df8cc837","modified":1645441955015},{"_id":"public/2021/06/14/U3D/aab打包/index.html","hash":"3c88bb3ee396b5f9fa3361e6b5e72844885a70f6","modified":1645441955015},{"_id":"public/2021/06/14/U3D/优化/index.html","hash":"6564cc8c053ce1ba542cf6919f54787d27a39a1e","modified":1645441955015},{"_id":"public/2021/06/14/U3D/资源管理/audio优化/index.html","hash":"78b5bda43d3ff36a0953aecda6ac50d9c1853740","modified":1645441955015},{"_id":"public/2021/06/14/U3D/ECS/ADB调试/index.html","hash":"eee69f834271b2d5d6feb66d265e867f6db3defe","modified":1637232170389},{"_id":"public/archives/2021/08/index.html","hash":"596a797ffdb7220543a58c8c2fa051ac91c8477b","modified":1645441955015},{"_id":"public/archives/2021/09/index.html","hash":"7c7e1a7fdf3faca0b43173c16e92ba9052839267","modified":1645441458257},{"_id":"public/archives/2021/11/index.html","hash":"00ad1eedb09989f7b8a4b1b9443b1c57059718a0","modified":1645441955015},{"_id":"public/categories/AAB/index.html","hash":"3f99fc03616fd0d5cb1db5d2a13d174f8f8243fa","modified":1645441586725},{"_id":"public/categories/优化/index.html","hash":"56045f9b83d71ee6ca9022b51a72b38fd55ad4a9","modified":1645441586725},{"_id":"public/categories/DOTS-Job/index.html","hash":"d7887caba947f63640d134e2fa435ddb4fddba9b","modified":1645441586725},{"_id":"public/categories/Audio/index.html","hash":"e45ee53be60709b3b277eb65ffd309ba332386b9","modified":1645441586725},{"_id":"public/categories/ADB/index.html","hash":"b1cd05d6f096b0e33ab197f8045e9ebb2f737a67","modified":1645441586725},{"_id":"public/tags/AAB/index.html","hash":"0b0c882e35adf27ea0c3f239eca56aee2420e3dc","modified":1645441955015},{"_id":"public/tags/优化/index.html","hash":"b5868142f6c1966b8e60458cdda1623e2903d87b","modified":1645441955015},{"_id":"public/tags/资源/index.html","hash":"e5d0e21d4918677c506259f04321cf2fb781a499","modified":1645441955015},{"_id":"public/tags/工具/index.html","hash":"192c795b9d9361a5fc349f5372c9fa929fe72c29","modified":1645441955015},{"_id":"source/_posts/代码篇/局部性.md","hash":"a11c189194e55e67d827e8cf8a95e72ffb0254ee","modified":1645441950961},{"_id":"source/_posts/Lua/lua内存.md","hash":"773b6f6785c3e02b6c7f7426c834dc4ccba49159","modified":1644143563864},{"_id":"source/_posts/U3D/资源管理/Assetbundle优化.md","hash":"39664bf3434dd0ee275a42860ac4647813876b60","modified":1645441683545},{"_id":"source/_posts/U3D/ADB调试.md","hash":"05b0c2e921a1dc602dc9d84e45496c2dad75c9d9","modified":1645441856849},{"_id":"public/2022/02/10/U3D/资源管理/Assetbundle优化/index.html","hash":"77dcbf5ba169168783867dd1e4e56e0991ef7118","modified":1645441586725},{"_id":"public/2022/02/06/代码篇/局部性/index.html","hash":"7a042950ebfeaa7762ba645e11a76a3d217a9b14","modified":1645441884339},{"_id":"public/2021/06/14/Lua/lua内存/index.html","hash":"10aaf09bebe5cee03efb89cb2335ac0880bef900","modified":1645441955015},{"_id":"public/2021/06/14/U3D/ADB调试/index.html","hash":"dd6824e5990455449da322badcb083c1861e453a","modified":1645441955015},{"_id":"public/archives/page/3/index.html","hash":"46442f0a18f29d065d4a47599bd82d9eee890299","modified":1645441955015},{"_id":"public/archives/2021/page/3/index.html","hash":"1f1f0ef5447b19b9ea95de9ec49d2edc7c83880c","modified":1645441955015},{"_id":"public/archives/2022/index.html","hash":"1e63faf4b503ae736adfb837292aef745db40ae2","modified":1645441955015},{"_id":"public/archives/2022/02/index.html","hash":"43794e0420631d1e3af43be3b16855692d6c446d","modified":1645441955015},{"_id":"public/categories/lua/index.html","hash":"d89d902068224fbe254a3074880bc283c3751b79","modified":1645441955015},{"_id":"public/page/3/index.html","hash":"aa26154f68174bdfba2fd8c0fe5025e03cd5ed86","modified":1645441955015},{"_id":"public/tags/lua/index.html","hash":"a803a77b7bc62e67bef0fdf2ae8df8f0282bd74d","modified":1645441955015},{"_id":"public/2021/06/14/U3D/资源管理/Assetbundle优化/index.html","hash":"3dc27a0d0e582fb188abb201f18da9f9299e00c5","modified":1645441955015},{"_id":"public/categories/U3D/index.html","hash":"eb3a576a08afeec300e1f33854f315d74985868a","modified":1645441955015},{"_id":"public/categories/ShaderLab/index.html","hash":"b2bddab83f17e7fb246c98f937c36cade0a55654","modified":1645441955015},{"_id":"public/2022/02/01/代码篇/局部性/index.html","hash":"06b93921d408dd8d90319cc75e536349f3e94bd0","modified":1645441955015},{"_id":"public/categories/Codes/index.html","hash":"48d827337ca6a624b068bde918d7ed4d1dc870c3","modified":1645441955015},{"_id":"public/tags/Codes/index.html","hash":"c5dfb1d04b99ea7be128fc34094200080855ee12","modified":1645441955015}],"Category":[{"name":"Hexo","_id":"ckpsg8e5x0004zcho937hdd8d"},{"name":"UE4","_id":"ckpsg8e63000czchoaymo2smj"},{"name":"数据结构","_id":"ckpw6qo4v000114ho8wdn5efd"},{"name":"Tools","_id":"ckq0iwwh30002nwho2s6ubcz6"},{"name":"ECS","_id":"ckqrp6q100001asho3il8c5co"},{"name":"开发流程","_id":"cks7ax3n00001a0ho2x9n42s7"},{"name":"shell","_id":"cks7bah9p0001vohog2by4p75"},{"name":"Unlit-Color","_id":"cks8p0dbm0001y8ho8pbzeryt"},{"name":"AAB","_id":"ckw4trge3000384hod46d985c"},{"name":"优化","_id":"ckw4trge7000584hogh5b1r10"},{"name":"DOTS Job","_id":"ckw4trgeb000d84ho0ieggfij"},{"name":"Audio","_id":"ckw4trged000i84hogkib0nvi"},{"name":"ADB","_id":"ckw4trged000m84ho2b01bl1h"},{"name":"lua","_id":"ckzwld1su0002dwho1jv50k2v"},{"name":"U3D","_id":"ckzwli4ui00008gho97ewd8zn"},{"name":"ShaderLab","_id":"ckzwlm41o0000w8hobdtmdbvn"},{"name":"Codes","_id":"ckzwlnmkp000018ho82kzhfir"}],"Data":[],"Page":[{"title":"links","date":"2021-06-11T10:32:13.000Z","layout":"links","_content":"","source":"Links/index.md","raw":"---\ntitle: links\ndate: 2021-06-11 18:32:13\nlayout: links\n---\n","updated":"2021-06-11T10:41:29.750Z","path":"Links/index.html","comments":1,"_id":"ckpsg8e5r0000zcho07ic5oi1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"我的博客","date":"2021-06-11T10:32:13.000Z","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 我的博客\ndate: 2021-06-11 18:32:13\nlayout: about\n---","updated":"2021-06-11T11:04:05.974Z","path":"about/index.html","comments":1,"_id":"ckpsg8e5w0002zchoc689fjyf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2021-06-11T10:32:13.000Z","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-06-11 18:32:13\nlayout: categories\n---\n","updated":"2021-06-11T10:34:55.690Z","path":"categories/index.html","comments":1,"_id":"ckpsg8e5z0006zcho6e5iaagd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"repository","date":"2021-06-11T10:32:13.000Z","layout":"repository","_content":"\n","source":"repository/index.md","raw":"---\ntitle: repository\ndate: 2021-06-11 18:32:13\nlayout: repository\n---\n\n","updated":"2021-06-11T15:42:43.015Z","path":"repository/index.html","_id":"ckpsg8e600008zcho3j7lhn4b","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-06-11T10:32:12.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-06-11 18:32:12\nlayout: tags\n---\n","updated":"2021-06-11T10:33:56.833Z","path":"tags/index.html","comments":1,"_id":"ckpsg8e62000azchoecwcbi0d","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo Pure主题设置记录","date":"2021-06-11T05:43:00.000Z","toc":true,"_content":"\n# Pure 设置记录\n[文档地址](https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md)\n\n### 背景动态设置\n[背景动画](https://link.csdn.net/?target=https%3A%2F%2Fgithub.com%2Fhustcc%2Fcanvas-nest.js) 基于canvas，在\\themes\\pure\\layout\\layout.ejs的body中面添加\n\n```\n\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"></script>\n\n```\n\n### gitcommet 设置\n\n```\ncomment:\n  type: gitment  # 启用哪种评论系统\n  # disqus:  # enter disqus shortname here\n  # youyan: \n  #   uid: 2kLH6P3hQG2bNQQ9a9mwRFmd-gzGzoHsz # enter youyan uid \n  # livere:\n  #   uid: # enter youyan uid \n  gitment:\n    githubID: githubname\n    repo: githubname.github.io\n    ClientID: id\n    ClientSecret: secrectid\n    lazy: false\n```\n\n\n### 访问数设置\nfooter.ejs脚本\n```\n<footer class=\"footer\" itemscope itemtype=\"http://schema.org/WPFooter\">\n\t<%- partial('_common/social', null, {cache: !config.relative_link}) %>\n    <div class=\"copyright\">\n    \t<% if(theme.site.copyright) { %>\n        &copy; <%= date(new Date(), 'YYYY') %> <%= config.author || config.title %>\n        <% } %>\n    </div>\n    <script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n    <span >本站总访问量: <span id=\"busuanzi_value_site_pv\"></span>次</span>\n</footer>\n```\n","source":"_posts/Hexo/Hexo-Pure-设置.md","raw":"---\ntitle: Hexo Pure主题设置记录\ncategories: Hexo\ntags: pure\ndate: 2021-06-11 13:43:00\ntoc: true\n---\n\n# Pure 设置记录\n[文档地址](https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md)\n\n### 背景动态设置\n[背景动画](https://link.csdn.net/?target=https%3A%2F%2Fgithub.com%2Fhustcc%2Fcanvas-nest.js) 基于canvas，在\\themes\\pure\\layout\\layout.ejs的body中面添加\n\n```\n\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"></script>\n\n```\n\n### gitcommet 设置\n\n```\ncomment:\n  type: gitment  # 启用哪种评论系统\n  # disqus:  # enter disqus shortname here\n  # youyan: \n  #   uid: 2kLH6P3hQG2bNQQ9a9mwRFmd-gzGzoHsz # enter youyan uid \n  # livere:\n  #   uid: # enter youyan uid \n  gitment:\n    githubID: githubname\n    repo: githubname.github.io\n    ClientID: id\n    ClientSecret: secrectid\n    lazy: false\n```\n\n\n### 访问数设置\nfooter.ejs脚本\n```\n<footer class=\"footer\" itemscope itemtype=\"http://schema.org/WPFooter\">\n\t<%- partial('_common/social', null, {cache: !config.relative_link}) %>\n    <div class=\"copyright\">\n    \t<% if(theme.site.copyright) { %>\n        &copy; <%= date(new Date(), 'YYYY') %> <%= config.author || config.title %>\n        <% } %>\n    </div>\n    <script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n    <span >本站总访问量: <span id=\"busuanzi_value_site_pv\"></span>次</span>\n</footer>\n```\n","slug":"Hexo/Hexo-Pure-设置","published":1,"updated":"2021-06-11T10:27:27.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpsg8e5t0001zchoac9e6eh1","content":"<h1 id=\"Pure-设置记录\"><a href=\"#Pure-设置记录\" class=\"headerlink\" title=\"Pure 设置记录\"></a>Pure 设置记录</h1><p><a href=\"https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md\">文档地址</a></p>\n<h3 id=\"背景动态设置\"><a href=\"#背景动态设置\" class=\"headerlink\" title=\"背景动态设置\"></a>背景动态设置</h3><p><a href=\"https://link.csdn.net/?target=https://github.com/hustcc/canvas-nest.js\">背景动画</a> 基于canvas，在\\themes\\pure\\layout\\layout.ejs的body中面添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"gitcommet-设置\"><a href=\"#gitcommet-设置\" class=\"headerlink\" title=\"gitcommet 设置\"></a>gitcommet 设置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comment:</span><br><span class=\"line\">  type: gitment  # 启用哪种评论系统</span><br><span class=\"line\">  # disqus:  # enter disqus shortname here</span><br><span class=\"line\">  # youyan: </span><br><span class=\"line\">  #   uid: 2kLH6P3hQG2bNQQ9a9mwRFmd-gzGzoHsz # enter youyan uid </span><br><span class=\"line\">  # livere:</span><br><span class=\"line\">  #   uid: # enter youyan uid </span><br><span class=\"line\">  gitment:</span><br><span class=\"line\">    githubID: githubname</span><br><span class=\"line\">    repo: githubname.github.io</span><br><span class=\"line\">    ClientID: id</span><br><span class=\"line\">    ClientSecret: secrectid</span><br><span class=\"line\">    lazy: false</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"访问数设置\"><a href=\"#访问数设置\" class=\"headerlink\" title=\"访问数设置\"></a>访问数设置</h3><p>footer.ejs脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;footer class=&quot;footer&quot; itemscope itemtype=&quot;http://schema.org/WPFooter&quot;&gt;</span><br><span class=\"line\">\t&lt;%- partial(&#x27;_common/social&#x27;, null, &#123;cache: !config.relative_link&#125;) %&gt;</span><br><span class=\"line\">    &lt;div class=&quot;copyright&quot;&gt;</span><br><span class=\"line\">    \t&lt;% if(theme.site.copyright) &#123; %&gt;</span><br><span class=\"line\">        &amp;copy; &lt;%= date(new Date(), &#x27;YYYY&#x27;) %&gt; &lt;%= config.author || config.title %&gt;</span><br><span class=\"line\">        &lt;% &#125; %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;span &gt;本站总访问量: &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;</span><br><span class=\"line\">&lt;/footer&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Pure-设置记录\"><a href=\"#Pure-设置记录\" class=\"headerlink\" title=\"Pure 设置记录\"></a>Pure 设置记录</h1><p><a href=\"https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md\">文档地址</a></p>\n<h3 id=\"背景动态设置\"><a href=\"#背景动态设置\" class=\"headerlink\" title=\"背景动态设置\"></a>背景动态设置</h3><p><a href=\"https://link.csdn.net/?target=https://github.com/hustcc/canvas-nest.js\">背景动画</a> 基于canvas，在\\themes\\pure\\layout\\layout.ejs的body中面添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"gitcommet-设置\"><a href=\"#gitcommet-设置\" class=\"headerlink\" title=\"gitcommet 设置\"></a>gitcommet 设置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comment:</span><br><span class=\"line\">  type: gitment  # 启用哪种评论系统</span><br><span class=\"line\">  # disqus:  # enter disqus shortname here</span><br><span class=\"line\">  # youyan: </span><br><span class=\"line\">  #   uid: 2kLH6P3hQG2bNQQ9a9mwRFmd-gzGzoHsz # enter youyan uid </span><br><span class=\"line\">  # livere:</span><br><span class=\"line\">  #   uid: # enter youyan uid </span><br><span class=\"line\">  gitment:</span><br><span class=\"line\">    githubID: githubname</span><br><span class=\"line\">    repo: githubname.github.io</span><br><span class=\"line\">    ClientID: id</span><br><span class=\"line\">    ClientSecret: secrectid</span><br><span class=\"line\">    lazy: false</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"访问数设置\"><a href=\"#访问数设置\" class=\"headerlink\" title=\"访问数设置\"></a>访问数设置</h3><p>footer.ejs脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;footer class=&quot;footer&quot; itemscope itemtype=&quot;http://schema.org/WPFooter&quot;&gt;</span><br><span class=\"line\">\t&lt;%- partial(&#x27;_common/social&#x27;, null, &#123;cache: !config.relative_link&#125;) %&gt;</span><br><span class=\"line\">    &lt;div class=&quot;copyright&quot;&gt;</span><br><span class=\"line\">    \t&lt;% if(theme.site.copyright) &#123; %&gt;</span><br><span class=\"line\">        &amp;copy; &lt;%= date(new Date(), &#x27;YYYY&#x27;) %&gt; &lt;%= config.author || config.title %&gt;</span><br><span class=\"line\">        &lt;% &#125; %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;span &gt;本站总访问量: &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;</span><br><span class=\"line\">&lt;/footer&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"1.UE4-安装-Rider for Unreal Engine","date":"2021-06-11T05:43:00.000Z","toc":true,"_content":"\n# 安装UE4\n\n教程比较多，自行搜索\n\n个人安装的：\n\nUE4版本| 4.24.3\n-------- | -----\nIDE  | Rider for Unreal Engine\n\n### 安装后找到此插件\n\n![安装](/images/assets/png/1.png)\n\n安装 Rider for Unreal Engine；\n\n## 安装后修改配置\n\n1. 修改Rider缓存目录：\nRider for Unreal Engine 2021.1.1\\bin 文件夹下idea.properties文件 ![安装Rider](/images/assets/png/2.png)\n\n2. 修改ue4缓存目录 ![修改缓存](/images/assets/png/3.png)\n用记事本打开它，然后搜索InstalledDerivedDataBackendGraph并找到%ENGINEVERSIONAGNOSTICUSERDIR%DerivedDataCache把它改为%GAMEDIR%DerivedDataCache\n","source":"_posts/UE4/1.UE4-安装-Rider for Unreal Engine.md","raw":"---\ntitle: 1.UE4-安装-Rider for Unreal Engine\ncategories: UE4\ntags: UE4\ndate: 2021-06-11 13:43:00\ntoc: true\n\n---\n\n# 安装UE4\n\n教程比较多，自行搜索\n\n个人安装的：\n\nUE4版本| 4.24.3\n-------- | -----\nIDE  | Rider for Unreal Engine\n\n### 安装后找到此插件\n\n![安装](/images/assets/png/1.png)\n\n安装 Rider for Unreal Engine；\n\n## 安装后修改配置\n\n1. 修改Rider缓存目录：\nRider for Unreal Engine 2021.1.1\\bin 文件夹下idea.properties文件 ![安装Rider](/images/assets/png/2.png)\n\n2. 修改ue4缓存目录 ![修改缓存](/images/assets/png/3.png)\n用记事本打开它，然后搜索InstalledDerivedDataBackendGraph并找到%ENGINEVERSIONAGNOSTICUSERDIR%DerivedDataCache把它改为%GAMEDIR%DerivedDataCache\n","slug":"UE4/1.UE4-安装-Rider for Unreal Engine","published":1,"updated":"2021-06-11T15:35:21.353Z","_id":"ckpsg8e5w0003zchohc5xa78g","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"安装UE4\"><a href=\"#安装UE4\" class=\"headerlink\" title=\"安装UE4\"></a>安装UE4</h1><p>教程比较多，自行搜索</p>\n<p>个人安装的：</p>\n<table>\n<thead>\n<tr>\n<th>UE4版本</th>\n<th>4.24.3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IDE</td>\n<td>Rider for Unreal Engine</td>\n</tr>\n</tbody></table>\n<h3 id=\"安装后找到此插件\"><a href=\"#安装后找到此插件\" class=\"headerlink\" title=\"安装后找到此插件\"></a>安装后找到此插件</h3><p><img src=\"/images/assets/png/1.png\" alt=\"安装\"></p>\n<p>安装 Rider for Unreal Engine；</p>\n<h2 id=\"安装后修改配置\"><a href=\"#安装后修改配置\" class=\"headerlink\" title=\"安装后修改配置\"></a>安装后修改配置</h2><ol>\n<li><p>修改Rider缓存目录：<br>Rider for Unreal Engine 2021.1.1\\bin 文件夹下idea.properties文件 <img src=\"/images/assets/png/2.png\" alt=\"安装Rider\"></p>\n</li>\n<li><p>修改ue4缓存目录 <img src=\"/images/assets/png/3.png\" alt=\"修改缓存\"><br>用记事本打开它，然后搜索InstalledDerivedDataBackendGraph并找到%ENGINEVERSIONAGNOSTICUSERDIR%DerivedDataCache把它改为%GAMEDIR%DerivedDataCache</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装UE4\"><a href=\"#安装UE4\" class=\"headerlink\" title=\"安装UE4\"></a>安装UE4</h1><p>教程比较多，自行搜索</p>\n<p>个人安装的：</p>\n<table>\n<thead>\n<tr>\n<th>UE4版本</th>\n<th>4.24.3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IDE</td>\n<td>Rider for Unreal Engine</td>\n</tr>\n</tbody></table>\n<h3 id=\"安装后找到此插件\"><a href=\"#安装后找到此插件\" class=\"headerlink\" title=\"安装后找到此插件\"></a>安装后找到此插件</h3><p><img src=\"/images/assets/png/1.png\" alt=\"安装\"></p>\n<p>安装 Rider for Unreal Engine；</p>\n<h2 id=\"安装后修改配置\"><a href=\"#安装后修改配置\" class=\"headerlink\" title=\"安装后修改配置\"></a>安装后修改配置</h2><ol>\n<li><p>修改Rider缓存目录：<br>Rider for Unreal Engine 2021.1.1\\bin 文件夹下idea.properties文件 <img src=\"/images/assets/png/2.png\" alt=\"安装Rider\"></p>\n</li>\n<li><p>修改ue4缓存目录 <img src=\"/images/assets/png/3.png\" alt=\"修改缓存\"><br>用记事本打开它，然后搜索InstalledDerivedDataBackendGraph并找到%ENGINEVERSIONAGNOSTICUSERDIR%DerivedDataCache把它改为%GAMEDIR%DerivedDataCache</p>\n</li>\n</ol>\n"},{"title":"Hexo使用记录","date":"2021-06-11T05:43:00.000Z","toc":true,"_content":"\n# Hexo 安装记录\n\n[地址文档] (https://hexo.io/zh-cn)\n\n\n### markdown 图片测试问题\n\n> 在写.md文档时，采用在source 目录下新建个images文件夹。引用图片直接 (/images/图片名)\n","source":"_posts/Hexo/Hexo使用.md","raw":"---\ntitle: Hexo使用记录\ncategories: Hexo\ntags: hexo\ndate: 2021-06-11 13:43:00\ntoc: true\n---\n\n# Hexo 安装记录\n\n[地址文档] (https://hexo.io/zh-cn)\n\n\n### markdown 图片测试问题\n\n> 在写.md文档时，采用在source 目录下新建个images文件夹。引用图片直接 (/images/图片名)\n","slug":"Hexo/Hexo使用","published":1,"updated":"2021-06-11T15:36:08.184Z","_id":"ckpsg8e5z0007zchoejhcb6su","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Hexo-安装记录\"><a href=\"#Hexo-安装记录\" class=\"headerlink\" title=\"Hexo 安装记录\"></a>Hexo 安装记录</h1><p>[地址文档] (<a href=\"https://hexo.io/zh-cn\">https://hexo.io/zh-cn</a>)</p>\n<h3 id=\"markdown-图片测试问题\"><a href=\"#markdown-图片测试问题\" class=\"headerlink\" title=\"markdown 图片测试问题\"></a>markdown 图片测试问题</h3><blockquote>\n<p>在写.md文档时，采用在source 目录下新建个images文件夹。引用图片直接 (/images/图片名)</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hexo-安装记录\"><a href=\"#Hexo-安装记录\" class=\"headerlink\" title=\"Hexo 安装记录\"></a>Hexo 安装记录</h1><p>[地址文档] (<a href=\"https://hexo.io/zh-cn\">https://hexo.io/zh-cn</a>)</p>\n<h3 id=\"markdown-图片测试问题\"><a href=\"#markdown-图片测试问题\" class=\"headerlink\" title=\"markdown 图片测试问题\"></a>markdown 图片测试问题</h3><blockquote>\n<p>在写.md文档时，采用在source 目录下新建个images文件夹。引用图片直接 (/images/图片名)</p>\n</blockquote>\n"},{"title":"UE4-踩坑记录","date":"2021-06-11T05:43:00.000Z","toc":true,"_content":"","source":"_posts/UE4/0.UE4-踩坑记录.md","raw":"---\ntitle: UE4-踩坑记录\ncategories: UE4\ntags: UE4\ndate: 2021-06-11 13:43:00\ntoc: true\n---","slug":"UE4/0.UE4-踩坑记录","published":1,"updated":"2021-06-11T07:45:33.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpsg8e610009zcho3b527omj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"3.UE4-FString","date":"2021-06-11T05:43:00.000Z","toc":true,"_content":"\n\n# 字符串处理 \n\n> https://docs.unrealengine.com/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/StringHandling/index.html\n\n\n1. FName 不区分大小写\n\n```\n\tFString str = FString(\"11111\");\n\tFString str1 = FString::FromInt(1000);\n\tstd::string s = std::to_string(12.0);\n\tFString str2 = FString(s.c_str());\n\tFString str3 = \"11111\";\n\tFString str4 = TEXT(\"11111\");\n\tFString str5 = FString::Printf(TEXT(\"TEXT%hs\"),\"1111\");\n\tFString str6 = FString::Printf(TEXT(\"TEXT%d\"),1111);\n\tFString str7 = FString::Printf(TEXT(\"TEXT%f\"),1111.0f);\n```","source":"_posts/UE4/3.UE4-FString.md","raw":"---\ntitle: 3.UE4-FString\ncategories: UE4\ntags: UE4\ndate: 2021-06-11 13:43:00\ntoc: true\n---\n\n\n# 字符串处理 \n\n> https://docs.unrealengine.com/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/StringHandling/index.html\n\n\n1. FName 不区分大小写\n\n```\n\tFString str = FString(\"11111\");\n\tFString str1 = FString::FromInt(1000);\n\tstd::string s = std::to_string(12.0);\n\tFString str2 = FString(s.c_str());\n\tFString str3 = \"11111\";\n\tFString str4 = TEXT(\"11111\");\n\tFString str5 = FString::Printf(TEXT(\"TEXT%hs\"),\"1111\");\n\tFString str6 = FString::Printf(TEXT(\"TEXT%d\"),1111);\n\tFString str7 = FString::Printf(TEXT(\"TEXT%f\"),1111.0f);\n```","slug":"UE4/3.UE4-FString","published":1,"updated":"2021-06-11T07:47:10.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpsg8e62000bzchoa4q2bomj","content":"<h1 id=\"字符串处理\"><a href=\"#字符串处理\" class=\"headerlink\" title=\"字符串处理\"></a>字符串处理</h1><blockquote>\n<p><a href=\"https://docs.unrealengine.com/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/StringHandling/index.html\">https://docs.unrealengine.com/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/StringHandling/index.html</a></p>\n</blockquote>\n<ol>\n<li>FName 不区分大小写</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FString str = FString(&quot;11111&quot;);</span><br><span class=\"line\">FString str1 = FString::FromInt(1000);</span><br><span class=\"line\">std::string s = std::to_string(12.0);</span><br><span class=\"line\">FString str2 = FString(s.c_str());</span><br><span class=\"line\">FString str3 = &quot;11111&quot;;</span><br><span class=\"line\">FString str4 = TEXT(&quot;11111&quot;);</span><br><span class=\"line\">FString str5 = FString::Printf(TEXT(&quot;TEXT%hs&quot;),&quot;1111&quot;);</span><br><span class=\"line\">FString str6 = FString::Printf(TEXT(&quot;TEXT%d&quot;),1111);</span><br><span class=\"line\">FString str7 = FString::Printf(TEXT(&quot;TEXT%f&quot;),1111.0f);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"字符串处理\"><a href=\"#字符串处理\" class=\"headerlink\" title=\"字符串处理\"></a>字符串处理</h1><blockquote>\n<p><a href=\"https://docs.unrealengine.com/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/StringHandling/index.html\">https://docs.unrealengine.com/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/StringHandling/index.html</a></p>\n</blockquote>\n<ol>\n<li>FName 不区分大小写</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FString str = FString(&quot;11111&quot;);</span><br><span class=\"line\">FString str1 = FString::FromInt(1000);</span><br><span class=\"line\">std::string s = std::to_string(12.0);</span><br><span class=\"line\">FString str2 = FString(s.c_str());</span><br><span class=\"line\">FString str3 = &quot;11111&quot;;</span><br><span class=\"line\">FString str4 = TEXT(&quot;11111&quot;);</span><br><span class=\"line\">FString str5 = FString::Printf(TEXT(&quot;TEXT%hs&quot;),&quot;1111&quot;);</span><br><span class=\"line\">FString str6 = FString::Printf(TEXT(&quot;TEXT%d&quot;),1111);</span><br><span class=\"line\">FString str7 = FString::Printf(TEXT(&quot;TEXT%f&quot;),1111.0f);</span><br></pre></td></tr></table></figure>"},{"title":"2.UE4-新建工程","date":"2021-06-11T05:43:00.000Z","toc":true,"_content":"\n# 新建工程 \n\n## NOTE_PROJECT\n\nhttps://ue4community.wiki/logging-lgpidy6i\n\n\n```\n    UE_LOG(LogTemp,Log,TEXT(\"1111111111Warning\"))\n\tUE_LOG(LogTemp,Warning,TEXT(\"1111111111Warning\"))\n\tUE_LOG(LogTemp,Error,TEXT(\"1111111111Warning\"))\n\tUE_LOG(CustomLog,Error,TEXT(\"1111111111Warning\"))\n\n\tGEngine-> AddOnScreenDebugMessage(-1,1,FColor::Red,\"AddOnScreenDebugMessage\");\n\n\tLOG_SCREEN(\"LOG_SCREEN\") \n\n```\n\n### 自定义：\n   \n1. 在.h文件中 \n   DECLARE_LOG_CATEGORY_EXTERN(CustomLog, Log, All);\n   在.cpp文件中\n   DEFINE_LOG_CATEGORY(CustomLog);\n\n2. 定义#define LOG_SCREEN(text) if(GEngine) GEngine-> AddOnScreenDebugMessage(-1,1,FColor::Red,text);\n\n","source":"_posts/UE4/2.UE4-新建工程.md","raw":"---\ntitle: 2.UE4-新建工程\ncategories: UE4\ntags: UE4\ndate: 2021-06-11 13:43:00\ntoc: true\n---\n\n# 新建工程 \n\n## NOTE_PROJECT\n\nhttps://ue4community.wiki/logging-lgpidy6i\n\n\n```\n    UE_LOG(LogTemp,Log,TEXT(\"1111111111Warning\"))\n\tUE_LOG(LogTemp,Warning,TEXT(\"1111111111Warning\"))\n\tUE_LOG(LogTemp,Error,TEXT(\"1111111111Warning\"))\n\tUE_LOG(CustomLog,Error,TEXT(\"1111111111Warning\"))\n\n\tGEngine-> AddOnScreenDebugMessage(-1,1,FColor::Red,\"AddOnScreenDebugMessage\");\n\n\tLOG_SCREEN(\"LOG_SCREEN\") \n\n```\n\n### 自定义：\n   \n1. 在.h文件中 \n   DECLARE_LOG_CATEGORY_EXTERN(CustomLog, Log, All);\n   在.cpp文件中\n   DEFINE_LOG_CATEGORY(CustomLog);\n\n2. 定义#define LOG_SCREEN(text) if(GEngine) GEngine-> AddOnScreenDebugMessage(-1,1,FColor::Red,text);\n\n","slug":"UE4/2.UE4-新建工程","published":1,"updated":"2021-06-11T07:46:32.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpsg8e63000fzchodhae6kjw","content":"<h1 id=\"新建工程\"><a href=\"#新建工程\" class=\"headerlink\" title=\"新建工程\"></a>新建工程</h1><h2 id=\"NOTE-PROJECT\"><a href=\"#NOTE-PROJECT\" class=\"headerlink\" title=\"NOTE_PROJECT\"></a>NOTE_PROJECT</h2><p><a href=\"https://ue4community.wiki/logging-lgpidy6i\">https://ue4community.wiki/logging-lgpidy6i</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   UE_LOG(LogTemp,Log,TEXT(&quot;1111111111Warning&quot;))</span><br><span class=\"line\">UE_LOG(LogTemp,Warning,TEXT(&quot;1111111111Warning&quot;))</span><br><span class=\"line\">UE_LOG(LogTemp,Error,TEXT(&quot;1111111111Warning&quot;))</span><br><span class=\"line\">UE_LOG(CustomLog,Error,TEXT(&quot;1111111111Warning&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">GEngine-&gt; AddOnScreenDebugMessage(-1,1,FColor::Red,&quot;AddOnScreenDebugMessage&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">LOG_SCREEN(&quot;LOG_SCREEN&quot;) </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义：\"><a href=\"#自定义：\" class=\"headerlink\" title=\"自定义：\"></a>自定义：</h3><ol>\n<li><p>在.h文件中<br>DECLARE_LOG_CATEGORY_EXTERN(CustomLog, Log, All);<br>在.cpp文件中<br>DEFINE_LOG_CATEGORY(CustomLog);</p>\n</li>\n<li><p>定义#define LOG_SCREEN(text) if(GEngine) GEngine-&gt; AddOnScreenDebugMessage(-1,1,FColor::Red,text);</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"新建工程\"><a href=\"#新建工程\" class=\"headerlink\" title=\"新建工程\"></a>新建工程</h1><h2 id=\"NOTE-PROJECT\"><a href=\"#NOTE-PROJECT\" class=\"headerlink\" title=\"NOTE_PROJECT\"></a>NOTE_PROJECT</h2><p><a href=\"https://ue4community.wiki/logging-lgpidy6i\">https://ue4community.wiki/logging-lgpidy6i</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   UE_LOG(LogTemp,Log,TEXT(&quot;1111111111Warning&quot;))</span><br><span class=\"line\">UE_LOG(LogTemp,Warning,TEXT(&quot;1111111111Warning&quot;))</span><br><span class=\"line\">UE_LOG(LogTemp,Error,TEXT(&quot;1111111111Warning&quot;))</span><br><span class=\"line\">UE_LOG(CustomLog,Error,TEXT(&quot;1111111111Warning&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">GEngine-&gt; AddOnScreenDebugMessage(-1,1,FColor::Red,&quot;AddOnScreenDebugMessage&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">LOG_SCREEN(&quot;LOG_SCREEN&quot;) </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义：\"><a href=\"#自定义：\" class=\"headerlink\" title=\"自定义：\"></a>自定义：</h3><ol>\n<li><p>在.h文件中<br>DECLARE_LOG_CATEGORY_EXTERN(CustomLog, Log, All);<br>在.cpp文件中<br>DEFINE_LOG_CATEGORY(CustomLog);</p>\n</li>\n<li><p>定义#define LOG_SCREEN(text) if(GEngine) GEngine-&gt; AddOnScreenDebugMessage(-1,1,FColor::Red,text);</p>\n</li>\n</ol>\n"},{"title":"四叉树","date":"2021-06-14T04:00:00.000Z","toc":true,"_content":"\n# 四叉树\n\n[四叉树Wiki](https://zh.wikipedia.org/wiki%E5%9B%9B%E5%8F%89%E6%A0%91)\n> 四叉树是一种树状数据结构，在每一个节点上会有四个子区块。四叉树常应用于二维空间资料的分析与分类。 它将资料区分成为四个象限。资料范围可以是方形或矩形或其他任意形状。这种数据结构是由 拉斐尔·芬科尔(Raphael Finkel) 与 J. L. Bentley 在1974年发展出来 。 类似的资料分割方法也称为 Q-tree。 所有的四叉树法有共同之特点:\n\n1. 可分解成为各自的区块\n2. 每个区块都有节点容量。当节点达到最大容量时，节点分裂\n3. 树状数据结构依造四叉树法加以区分\n\n# 根据理论在2D游戏中实际优化到的运用，在几百个单位中搜查，屏幕中的物体代码如下\n\n## 只要点在区域内就可以插入\n\n```\nusing System;\nusing System.Collections.Generic;\n\npublic class TreeRect\n{\n    public float X { get; private set; }\n    public float Y { get; private set; }\n    public float W { get; private set; }\n    public float H { get; private set; }\n    public float HalfW { get; private set; }\n    public float HalfH { get; private set; }\n    public float XL { get; private set; }\n    public float XR{ get; private set; }\n\n    public float YT { get; private set; }\n    public float YB { get; private set; }\n\n    /// <summary>\n    /// 点\n    /// </summary>\n    /// <param name=\"x\"></param>\n    /// <param name=\"y\"></param>\n    public TreeRect(float x, float y)\n    {\n        SetRect(x, y, 0, 0);\n    }\n    \n    /// <summary>\n    /// 四边形\n    /// </summary>\n    /// <param name=\"x\"></param>\n    /// <param name=\"y\"></param>\n    /// <param name=\"w\"></param>\n    /// <param name=\"h\"></param>\n    public TreeRect(float x, float y, float w, float h)\n    {\n        SetRect(x, y, w, h);\n    }\n    \n    public void SetRect(float x, float y, float w, float h)\n    {\n        X = x;\n        Y = y;\n        W = w;\n        H = h;\n\n        HalfW = W * 0.5f;\n        HalfH = H * 0.5f;\n\n        XL = X - HalfW;\n        XR = X + HalfW;\n        YB = Y - HalfH;\n        YT = Y + HalfH;\n    }\n\n    public bool Intersect(TreeRect other)\n    {\n        return (!(XR < other.XL || XL > other.XR)) && (!(YT < other.YB || YB > other.YT));\n    }\n\n    public bool IsCenterIn(TreeRect other)\n    {\n        return other.X <= XR && other.X >= XL && other.Y <= YT && other.Y >= YB;\n    }\n\n    public bool IsIn(TreeRect other)\n    {\n        return XR <= other.XR  && XL >= other.XL && YT <= other.YT && YB >= other.YB;\n    }\n    \n    \n    public override string ToString()\n    {\n        return $\"({X},{Y},{W},{H})\";\n    }\n\n    public static TreeRect operator *(TreeRect rhs,float lhs)\n    {\n        rhs.SetRect(rhs.X * lhs, rhs.Y * lhs, rhs.W * lhs,  rhs.H * lhs);\n        return rhs;\n    }\n}\n\n\npublic class TreeObject\n{\n    /// <summary>\n    /// 信息\n    /// </summary>\n    public TreeRect TreeRect;\n    /// <summary>\n    /// 属于哪个节点\n    /// </summary>\n    public MapQuadTree Node ;\n    public int Id;\n}\n\npublic class MapQuadTree\n{\n    public MapQuadTree Root { get; } //根节点\n    public int MaxCount { get; private set; } = 5;\n    public int MaxDeep { get; private set; } = 4;\n    public int TreeDeep { get; }\n    \n    public List<MapQuadTree> Childs { get; private set; } \n    public MapQuadTree Parent { get; }\n\n    /// <summary>\n    /// </summary>\n    public readonly List<TreeObject> TreePointObjs = new List<TreeObject>();\n\n    // public readonly List<TreeObject> BoundTreeObjs = new List<TreeObject>();\n    public TreeRect Rect { get; }\n    public bool IsLeafNode => Childs == null || Childs.Count == 0;\n    public bool IsEmptyLeafNode => TreePointObjs.Count == 0 && IsLeafNode ;\n\n    public MapQuadTree(TreeRect rect)\n    {\n        Rect = rect;\n        TreeDeep = 0;\n        Root = this;\n    }\n\n    private MapQuadTree(TreeRect rect, int treeDeep, MapQuadTree parent) : this(rect)\n    {\n        TreeDeep = treeDeep + 1;\n        this.Parent = parent;\n        Root = parent.Root;\n    }\n\n    public void Insert(TreeObject treeObj)\n    {\n        if (!IsInTreeRect(treeObj))\n        {\n            return;\n        }\n\n        treeObj.Node = this;\n        if (Childs == null)\n        {\n            TreePointObjs.Add(treeObj);\n            if (TreePointObjs.Count > MaxCount)\n            {\n                SliceTree();\n            }\n        }\n        else\n        {\n            for (int i = 0; i < Childs.Count; i++)\n            {\n                Childs[i].Insert(treeObj);\n            }\n        }\n    }\n\n    private void SliceTree()\n    {\n        if (TreeDeep >= MaxDeep)\n        {\n            return;\n        }\n\n        // 四分 可根据情况 调整\n        // lb, lt, rt, rb  目前与unity recttranform 的 4个 corner 保持一致的分布顺序\n        Childs = new List<MapQuadTree>\n        {\n            new MapQuadTree(new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep, this),\n            new MapQuadTree(new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep, this),\n            new MapQuadTree(new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep, this),\n            new MapQuadTree(new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep, this)\n        };\n\n        for (int i = 0; i < TreePointObjs.Count; i++)\n        {\n            for (int j = 0; j < Childs.Count; j++)\n            {\n                Childs[j].Insert(TreePointObjs[i]);\n            }\n        }\n\n        TreePointObjs.Clear();\n    }\n\n\n    public bool Intersect(TreeRect other)\n    {\n        return Rect.Intersect(other);\n    }\n\n    private bool IsInTreeRect(TreeObject treeObj)\n    {\n        return Rect.IsCenterIn(treeObj.TreeRect);\n    }\n\n    public void ClearEmptyNode()\n    {\n        List<MapQuadTree> emptyLeafNodes = new List<MapQuadTree>();\n        ForEachEmptyLeafNode(Root, (t) =>\n        {\n            emptyLeafNodes.Add(t);\n        });\n        while (emptyLeafNodes.Count > 0)\n        {\n            for (int i = 0; i < emptyLeafNodes.Count; i++)\n            {\n                emptyLeafNodes[i].Parent.RemoveChildNode(emptyLeafNodes[i]);\n            }\n            emptyLeafNodes.Clear();\n            ForEachEmptyLeafNode(Root, (t) =>\n            {\n                emptyLeafNodes.Add(t);\n            });\n        }\n    }\n\n    private void ForEachEmptyLeafNode(MapQuadTree node, Action<MapQuadTree> treeAction)\n    {\n        if (node.IsEmptyLeafNode)\n        {\n            treeAction?.Invoke(node);\n            return;\n        }\n\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachEmptyLeafNode(node.Childs[i],treeAction);\n            }\n        }\n    }\n    \n    private void ForEachLeafNode(MapQuadTree node, Action<MapQuadTree> treeAction)\n    {\n        if (node.IsLeafNode)\n        {\n            treeAction?.Invoke(node);\n            return;\n        }\n\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachLeafNode(node.Childs[i],treeAction);\n            }\n        }\n    }\n    \n    private void RemoveChildNode(MapQuadTree node)\n    {\n        if (Childs!=null)\n        {\n            Childs.Remove(node);\n        }\n    }\n    \n    public void ForEach(Action<MapQuadTree> each)\n    {\n        ForEach(Root, each);\n    }\n\n    public void ForEachInRect(TreeRect rect, Action<MapQuadTree> treeAction)\n    {\n        ForEachAreaTree(Root, rect, treeAction);\n    }\n\n\n    private void ForEachAreaTree(MapQuadTree node, TreeRect rect, Action<MapQuadTree> treeAction)\n    {\n        if (!node.Rect.Intersect(rect))\n        {\n            return;\n        }\n\n        if (node.IsLeafNode)\n        {\n            treeAction?.Invoke(node);\n            return;\n        }\n\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachAreaTree(node.Childs[i], rect, treeAction);\n            }\n        }\n    }\n\n    public void ForEachInRect(TreeRect rect, Action<TreeObject> treeAction)\n    {\n        ForEachAreaTree(Root, rect, treeAction);\n    }\n\n    private void ForEachAreaTree(MapQuadTree node, TreeRect rect, Action<TreeObject> treeAction)\n    {\n        if (!node.Rect.Intersect(rect))\n        {\n            return;\n        }\n\n        if (node.IsLeafNode)\n        {\n            foreach (var treeObject in node.TreePointObjs)\n            {\n                treeAction?.Invoke(treeObject);\n            }\n\n            return;\n        }\n\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachAreaTree(node.Childs[i], rect, treeAction);\n            }\n        }\n    }\n\n    private void ForEach(MapQuadTree node, Action<MapQuadTree> each)\n    {\n        if (node == null)\n        {\n            return;\n        }\n\n        ForEachNodeValues(node, each);\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachNodeValues(node.Childs[i], each);\n                ForEach(node.Childs[i], each);\n            }\n        }\n    }\n\n    private void ForEachNodeValues(MapQuadTree node, Action<MapQuadTree> each)\n    {\n        each?.Invoke(node);\n    }\n\n    public override string ToString()\n    {\n        return $\"Deep :{TreeDeep} : {Rect.ToString()} ,+ {TreePointObjs.Count} \";\n    }\n}\n```\n\n## 只要点和边框必须在区域内就可以插入\n\n```\n\nusing System;\nusing System.Collections.Generic;\n\n\npublic class BoundTreeObject\n{\n    public TreeRect TreeRect;\n    public MapQuadBoundTree Node;\n    public int Id;\n}\n\npublic class MapQuadBoundTree\n{\n    public MapQuadBoundTree Root { get; } //根节点\n    public int MaxCount { get; private set; } = 5;\n    public int MaxDeep { get; private set; } = 5;\n    public int TreeDeep { get; }\n    public List<MapQuadBoundTree> Childs { get; private set; }\n    public MapQuadBoundTree Parent { get; }\n    private TreeRect[] _treeChildRects = new TreeRect[4];\n    public readonly List<BoundTreeObject> TreePointObjs = new List<BoundTreeObject>();\n\n    public readonly List<BoundTreeObject> BoundTreeObjs = new List<BoundTreeObject>();\n    public TreeRect Rect { get; }\n    public bool IsLeafNode => Childs == null || Childs.Count == 0;\n    public bool IsEmptyLeafNode => BoundTreeObjs.Count == 0 && TreePointObjs.Count == 0 && IsLeafNode;\n\n    public MapQuadBoundTree(TreeRect rect)\n    {\n        Rect = rect;\n        TreeDeep = 0;\n        Root = this;\n        _treeChildRects[0] =\n            new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH);\n        _treeChildRects[1] =\n            new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH);\n        _treeChildRects[2] =\n            new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH);\n        _treeChildRects[3] =\n            new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH);\n    }\n\n    private MapQuadBoundTree(TreeRect rect, int treeDeep, MapQuadBoundTree parent) : this(rect)\n    {\n        TreeDeep = treeDeep + 1;\n        this.Parent = parent;\n        Root = parent.Root;\n    }\n\n    public void Insert(BoundTreeObject treeObj)\n    {\n        if (!IsInTreeRect(treeObj))\n        {\n            return;\n        }\n\n        treeObj.Node = this;\n        if (IsAllInsert(treeObj))\n        {\n            BoundTreeObjs.Add(treeObj);\n            return;\n        }\n\n        if (Childs == null)\n        {\n            TreePointObjs.Add(treeObj);\n            if (TreePointObjs.Count > MaxCount)\n            {\n                SliceTree();\n            }\n        }\n        else\n        {\n            for (int i = 0; i < Childs.Count; i++)\n            {\n                Childs[i].Insert(treeObj);\n            }\n        }\n    }\n\n    private bool IsAllInsert(BoundTreeObject treeObj)\n    {\n        int count = 0;\n        for (int i = 0; i < _treeChildRects.Length; i++)\n        {\n            if (_treeChildRects[i].Intersect(treeObj.TreeRect))\n            {\n                if (count > 0)\n                {\n                    return true;\n                }\n\n                count++;\n            }\n        }\n\n        return false;\n    }\n\n    private void SliceTree()\n    {\n        if (TreeDeep >= MaxDeep)\n        {\n            return;\n        }\n\n        // lb, lt, rt, rb  目前与unity recttranform 的 4个 corner 保持一致的分布顺序\n        Childs = new List<MapQuadBoundTree>\n        {\n            new MapQuadBoundTree(\n                new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep,\n                this),\n            new MapQuadBoundTree(\n                new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep,\n                this),\n            new MapQuadBoundTree(\n                new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep,\n                this),\n            new MapQuadBoundTree(\n                new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep,\n                this)\n        };\n\n        for (int i = 0; i < TreePointObjs.Count; i++)\n        {\n            for (int j = 0; j < Childs.Count; j++)\n            {\n                Childs[j].Insert(TreePointObjs[i]);\n            }\n        }\n\n        TreePointObjs.Clear();\n    }\n\n\n    public bool Intersect(TreeRect other)\n    {\n        return Rect.Intersect(other);\n    }\n\n    private bool IsInTreeRect(BoundTreeObject treeObj)\n    {\n        return Rect.IsCenterIn(treeObj.TreeRect);\n    }\n\n    public void ClearEmptyNode()\n    {\n        // TODO  清除空节点 只需从叶节点删除\n        List<MapQuadBoundTree> emptyLeafNodes = new List<MapQuadBoundTree>();\n        ForEachEmptyLeafNode(Root, (t) => { emptyLeafNodes.Add(t); });\n        while (emptyLeafNodes.Count > 0)\n        {\n            for (int i = 0; i < emptyLeafNodes.Count; i++)\n            {\n                emptyLeafNodes[i].Parent.RemoveChildNode(emptyLeafNodes[i]);\n            }\n\n            emptyLeafNodes.Clear();\n            ForEachEmptyLeafNode(Root, (t) => { emptyLeafNodes.Add(t); });\n        }\n    }\n\n    private void ForEachEmptyLeafNode(MapQuadBoundTree node, Action<MapQuadBoundTree> treeAction)\n    {\n        if (node.IsEmptyLeafNode)\n        {\n            treeAction?.Invoke(node);\n            return;\n        }\n\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachEmptyLeafNode(node.Childs[i], treeAction);\n            }\n        }\n    }\n\n    private void RemoveChildNode(MapQuadBoundTree node)\n    {\n        if (Childs != null)\n        {\n            Childs.Remove(node);\n        }\n    }\n\n\n    public void ForEach(Action<MapQuadBoundTree> each)\n    {\n        ForEach(Root, each);\n    }\n\n    public void ForEachInRect(TreeRect rect, Action<MapQuadBoundTree> treeAction)\n    {\n        ForEachAreaTree(Root, rect, treeAction);\n    }\n\n\n    private void ForEachAreaTree(MapQuadBoundTree node, TreeRect rect, Action<MapQuadBoundTree> treeAction)\n    {\n        if (!node.Rect.Intersect(rect))\n        {\n            return;\n        }\n\n        if (node.IsLeafNode)\n        {\n            treeAction?.Invoke(node);\n            return;\n        }\n\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachAreaTree(node.Childs[i], rect, treeAction);\n            }\n        }\n    }\n\n    public void ForEachInRect(TreeRect rect, Action<BoundTreeObject> treeAction)\n    {\n        ForEachAreaTree(Root, rect, treeAction);\n    }\n\n    private void ForEachAreaTree(MapQuadBoundTree node, TreeRect rect, Action<BoundTreeObject> treeAction)\n    {\n        if (!node.Rect.Intersect(rect))\n        {\n            return;\n        }\n\n        foreach (var boundTreeObj in node.BoundTreeObjs)\n        {\n            if (boundTreeObj.TreeRect.Intersect(rect))\n            {\n                treeAction?.Invoke(boundTreeObj);\n            }\n        }\n\n        if (node.IsLeafNode)\n        {\n            foreach (var boundTreeObj in node.TreePointObjs)\n            {\n                if (boundTreeObj.TreeRect.Intersect(rect))\n                {\n                    treeAction?.Invoke(boundTreeObj);\n                }\n            }\n\n            return;\n        }\n\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachAreaTree(node.Childs[i], rect, treeAction);\n            }\n        }\n    }\n\n    private void ForEach(MapQuadBoundTree node, Action<MapQuadBoundTree> each)\n    {\n        if (node == null)\n        {\n            return;\n        }\n\n        ForEachNodeValues(node, each);\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachNodeValues(node.Childs[i], each);\n                ForEach(node.Childs[i], each);\n            }\n        }\n    }\n\n    private void ForEachNodeValues(MapQuadBoundTree node, Action<MapQuadBoundTree> each)\n    {\n        each?.Invoke(node);\n    }\n\n    public override string ToString()\n    {\n        return $\"Deep :{TreeDeep} : {Rect.ToString()} ,+ {TreePointObjs.Count} \";\n    }\n}\n\n```\n\n","source":"_posts/数据结构/四叉树.md","raw":"---\ntitle: 四叉树\ncategories: 数据结构\ntags: 算法\ndate: 2021-06-14 12:00:00\ntoc: true\n---\n\n# 四叉树\n\n[四叉树Wiki](https://zh.wikipedia.org/wiki%E5%9B%9B%E5%8F%89%E6%A0%91)\n> 四叉树是一种树状数据结构，在每一个节点上会有四个子区块。四叉树常应用于二维空间资料的分析与分类。 它将资料区分成为四个象限。资料范围可以是方形或矩形或其他任意形状。这种数据结构是由 拉斐尔·芬科尔(Raphael Finkel) 与 J. L. Bentley 在1974年发展出来 。 类似的资料分割方法也称为 Q-tree。 所有的四叉树法有共同之特点:\n\n1. 可分解成为各自的区块\n2. 每个区块都有节点容量。当节点达到最大容量时，节点分裂\n3. 树状数据结构依造四叉树法加以区分\n\n# 根据理论在2D游戏中实际优化到的运用，在几百个单位中搜查，屏幕中的物体代码如下\n\n## 只要点在区域内就可以插入\n\n```\nusing System;\nusing System.Collections.Generic;\n\npublic class TreeRect\n{\n    public float X { get; private set; }\n    public float Y { get; private set; }\n    public float W { get; private set; }\n    public float H { get; private set; }\n    public float HalfW { get; private set; }\n    public float HalfH { get; private set; }\n    public float XL { get; private set; }\n    public float XR{ get; private set; }\n\n    public float YT { get; private set; }\n    public float YB { get; private set; }\n\n    /// <summary>\n    /// 点\n    /// </summary>\n    /// <param name=\"x\"></param>\n    /// <param name=\"y\"></param>\n    public TreeRect(float x, float y)\n    {\n        SetRect(x, y, 0, 0);\n    }\n    \n    /// <summary>\n    /// 四边形\n    /// </summary>\n    /// <param name=\"x\"></param>\n    /// <param name=\"y\"></param>\n    /// <param name=\"w\"></param>\n    /// <param name=\"h\"></param>\n    public TreeRect(float x, float y, float w, float h)\n    {\n        SetRect(x, y, w, h);\n    }\n    \n    public void SetRect(float x, float y, float w, float h)\n    {\n        X = x;\n        Y = y;\n        W = w;\n        H = h;\n\n        HalfW = W * 0.5f;\n        HalfH = H * 0.5f;\n\n        XL = X - HalfW;\n        XR = X + HalfW;\n        YB = Y - HalfH;\n        YT = Y + HalfH;\n    }\n\n    public bool Intersect(TreeRect other)\n    {\n        return (!(XR < other.XL || XL > other.XR)) && (!(YT < other.YB || YB > other.YT));\n    }\n\n    public bool IsCenterIn(TreeRect other)\n    {\n        return other.X <= XR && other.X >= XL && other.Y <= YT && other.Y >= YB;\n    }\n\n    public bool IsIn(TreeRect other)\n    {\n        return XR <= other.XR  && XL >= other.XL && YT <= other.YT && YB >= other.YB;\n    }\n    \n    \n    public override string ToString()\n    {\n        return $\"({X},{Y},{W},{H})\";\n    }\n\n    public static TreeRect operator *(TreeRect rhs,float lhs)\n    {\n        rhs.SetRect(rhs.X * lhs, rhs.Y * lhs, rhs.W * lhs,  rhs.H * lhs);\n        return rhs;\n    }\n}\n\n\npublic class TreeObject\n{\n    /// <summary>\n    /// 信息\n    /// </summary>\n    public TreeRect TreeRect;\n    /// <summary>\n    /// 属于哪个节点\n    /// </summary>\n    public MapQuadTree Node ;\n    public int Id;\n}\n\npublic class MapQuadTree\n{\n    public MapQuadTree Root { get; } //根节点\n    public int MaxCount { get; private set; } = 5;\n    public int MaxDeep { get; private set; } = 4;\n    public int TreeDeep { get; }\n    \n    public List<MapQuadTree> Childs { get; private set; } \n    public MapQuadTree Parent { get; }\n\n    /// <summary>\n    /// </summary>\n    public readonly List<TreeObject> TreePointObjs = new List<TreeObject>();\n\n    // public readonly List<TreeObject> BoundTreeObjs = new List<TreeObject>();\n    public TreeRect Rect { get; }\n    public bool IsLeafNode => Childs == null || Childs.Count == 0;\n    public bool IsEmptyLeafNode => TreePointObjs.Count == 0 && IsLeafNode ;\n\n    public MapQuadTree(TreeRect rect)\n    {\n        Rect = rect;\n        TreeDeep = 0;\n        Root = this;\n    }\n\n    private MapQuadTree(TreeRect rect, int treeDeep, MapQuadTree parent) : this(rect)\n    {\n        TreeDeep = treeDeep + 1;\n        this.Parent = parent;\n        Root = parent.Root;\n    }\n\n    public void Insert(TreeObject treeObj)\n    {\n        if (!IsInTreeRect(treeObj))\n        {\n            return;\n        }\n\n        treeObj.Node = this;\n        if (Childs == null)\n        {\n            TreePointObjs.Add(treeObj);\n            if (TreePointObjs.Count > MaxCount)\n            {\n                SliceTree();\n            }\n        }\n        else\n        {\n            for (int i = 0; i < Childs.Count; i++)\n            {\n                Childs[i].Insert(treeObj);\n            }\n        }\n    }\n\n    private void SliceTree()\n    {\n        if (TreeDeep >= MaxDeep)\n        {\n            return;\n        }\n\n        // 四分 可根据情况 调整\n        // lb, lt, rt, rb  目前与unity recttranform 的 4个 corner 保持一致的分布顺序\n        Childs = new List<MapQuadTree>\n        {\n            new MapQuadTree(new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep, this),\n            new MapQuadTree(new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep, this),\n            new MapQuadTree(new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep, this),\n            new MapQuadTree(new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep, this)\n        };\n\n        for (int i = 0; i < TreePointObjs.Count; i++)\n        {\n            for (int j = 0; j < Childs.Count; j++)\n            {\n                Childs[j].Insert(TreePointObjs[i]);\n            }\n        }\n\n        TreePointObjs.Clear();\n    }\n\n\n    public bool Intersect(TreeRect other)\n    {\n        return Rect.Intersect(other);\n    }\n\n    private bool IsInTreeRect(TreeObject treeObj)\n    {\n        return Rect.IsCenterIn(treeObj.TreeRect);\n    }\n\n    public void ClearEmptyNode()\n    {\n        List<MapQuadTree> emptyLeafNodes = new List<MapQuadTree>();\n        ForEachEmptyLeafNode(Root, (t) =>\n        {\n            emptyLeafNodes.Add(t);\n        });\n        while (emptyLeafNodes.Count > 0)\n        {\n            for (int i = 0; i < emptyLeafNodes.Count; i++)\n            {\n                emptyLeafNodes[i].Parent.RemoveChildNode(emptyLeafNodes[i]);\n            }\n            emptyLeafNodes.Clear();\n            ForEachEmptyLeafNode(Root, (t) =>\n            {\n                emptyLeafNodes.Add(t);\n            });\n        }\n    }\n\n    private void ForEachEmptyLeafNode(MapQuadTree node, Action<MapQuadTree> treeAction)\n    {\n        if (node.IsEmptyLeafNode)\n        {\n            treeAction?.Invoke(node);\n            return;\n        }\n\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachEmptyLeafNode(node.Childs[i],treeAction);\n            }\n        }\n    }\n    \n    private void ForEachLeafNode(MapQuadTree node, Action<MapQuadTree> treeAction)\n    {\n        if (node.IsLeafNode)\n        {\n            treeAction?.Invoke(node);\n            return;\n        }\n\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachLeafNode(node.Childs[i],treeAction);\n            }\n        }\n    }\n    \n    private void RemoveChildNode(MapQuadTree node)\n    {\n        if (Childs!=null)\n        {\n            Childs.Remove(node);\n        }\n    }\n    \n    public void ForEach(Action<MapQuadTree> each)\n    {\n        ForEach(Root, each);\n    }\n\n    public void ForEachInRect(TreeRect rect, Action<MapQuadTree> treeAction)\n    {\n        ForEachAreaTree(Root, rect, treeAction);\n    }\n\n\n    private void ForEachAreaTree(MapQuadTree node, TreeRect rect, Action<MapQuadTree> treeAction)\n    {\n        if (!node.Rect.Intersect(rect))\n        {\n            return;\n        }\n\n        if (node.IsLeafNode)\n        {\n            treeAction?.Invoke(node);\n            return;\n        }\n\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachAreaTree(node.Childs[i], rect, treeAction);\n            }\n        }\n    }\n\n    public void ForEachInRect(TreeRect rect, Action<TreeObject> treeAction)\n    {\n        ForEachAreaTree(Root, rect, treeAction);\n    }\n\n    private void ForEachAreaTree(MapQuadTree node, TreeRect rect, Action<TreeObject> treeAction)\n    {\n        if (!node.Rect.Intersect(rect))\n        {\n            return;\n        }\n\n        if (node.IsLeafNode)\n        {\n            foreach (var treeObject in node.TreePointObjs)\n            {\n                treeAction?.Invoke(treeObject);\n            }\n\n            return;\n        }\n\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachAreaTree(node.Childs[i], rect, treeAction);\n            }\n        }\n    }\n\n    private void ForEach(MapQuadTree node, Action<MapQuadTree> each)\n    {\n        if (node == null)\n        {\n            return;\n        }\n\n        ForEachNodeValues(node, each);\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachNodeValues(node.Childs[i], each);\n                ForEach(node.Childs[i], each);\n            }\n        }\n    }\n\n    private void ForEachNodeValues(MapQuadTree node, Action<MapQuadTree> each)\n    {\n        each?.Invoke(node);\n    }\n\n    public override string ToString()\n    {\n        return $\"Deep :{TreeDeep} : {Rect.ToString()} ,+ {TreePointObjs.Count} \";\n    }\n}\n```\n\n## 只要点和边框必须在区域内就可以插入\n\n```\n\nusing System;\nusing System.Collections.Generic;\n\n\npublic class BoundTreeObject\n{\n    public TreeRect TreeRect;\n    public MapQuadBoundTree Node;\n    public int Id;\n}\n\npublic class MapQuadBoundTree\n{\n    public MapQuadBoundTree Root { get; } //根节点\n    public int MaxCount { get; private set; } = 5;\n    public int MaxDeep { get; private set; } = 5;\n    public int TreeDeep { get; }\n    public List<MapQuadBoundTree> Childs { get; private set; }\n    public MapQuadBoundTree Parent { get; }\n    private TreeRect[] _treeChildRects = new TreeRect[4];\n    public readonly List<BoundTreeObject> TreePointObjs = new List<BoundTreeObject>();\n\n    public readonly List<BoundTreeObject> BoundTreeObjs = new List<BoundTreeObject>();\n    public TreeRect Rect { get; }\n    public bool IsLeafNode => Childs == null || Childs.Count == 0;\n    public bool IsEmptyLeafNode => BoundTreeObjs.Count == 0 && TreePointObjs.Count == 0 && IsLeafNode;\n\n    public MapQuadBoundTree(TreeRect rect)\n    {\n        Rect = rect;\n        TreeDeep = 0;\n        Root = this;\n        _treeChildRects[0] =\n            new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH);\n        _treeChildRects[1] =\n            new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH);\n        _treeChildRects[2] =\n            new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH);\n        _treeChildRects[3] =\n            new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH);\n    }\n\n    private MapQuadBoundTree(TreeRect rect, int treeDeep, MapQuadBoundTree parent) : this(rect)\n    {\n        TreeDeep = treeDeep + 1;\n        this.Parent = parent;\n        Root = parent.Root;\n    }\n\n    public void Insert(BoundTreeObject treeObj)\n    {\n        if (!IsInTreeRect(treeObj))\n        {\n            return;\n        }\n\n        treeObj.Node = this;\n        if (IsAllInsert(treeObj))\n        {\n            BoundTreeObjs.Add(treeObj);\n            return;\n        }\n\n        if (Childs == null)\n        {\n            TreePointObjs.Add(treeObj);\n            if (TreePointObjs.Count > MaxCount)\n            {\n                SliceTree();\n            }\n        }\n        else\n        {\n            for (int i = 0; i < Childs.Count; i++)\n            {\n                Childs[i].Insert(treeObj);\n            }\n        }\n    }\n\n    private bool IsAllInsert(BoundTreeObject treeObj)\n    {\n        int count = 0;\n        for (int i = 0; i < _treeChildRects.Length; i++)\n        {\n            if (_treeChildRects[i].Intersect(treeObj.TreeRect))\n            {\n                if (count > 0)\n                {\n                    return true;\n                }\n\n                count++;\n            }\n        }\n\n        return false;\n    }\n\n    private void SliceTree()\n    {\n        if (TreeDeep >= MaxDeep)\n        {\n            return;\n        }\n\n        // lb, lt, rt, rb  目前与unity recttranform 的 4个 corner 保持一致的分布顺序\n        Childs = new List<MapQuadBoundTree>\n        {\n            new MapQuadBoundTree(\n                new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep,\n                this),\n            new MapQuadBoundTree(\n                new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep,\n                this),\n            new MapQuadBoundTree(\n                new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep,\n                this),\n            new MapQuadBoundTree(\n                new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep,\n                this)\n        };\n\n        for (int i = 0; i < TreePointObjs.Count; i++)\n        {\n            for (int j = 0; j < Childs.Count; j++)\n            {\n                Childs[j].Insert(TreePointObjs[i]);\n            }\n        }\n\n        TreePointObjs.Clear();\n    }\n\n\n    public bool Intersect(TreeRect other)\n    {\n        return Rect.Intersect(other);\n    }\n\n    private bool IsInTreeRect(BoundTreeObject treeObj)\n    {\n        return Rect.IsCenterIn(treeObj.TreeRect);\n    }\n\n    public void ClearEmptyNode()\n    {\n        // TODO  清除空节点 只需从叶节点删除\n        List<MapQuadBoundTree> emptyLeafNodes = new List<MapQuadBoundTree>();\n        ForEachEmptyLeafNode(Root, (t) => { emptyLeafNodes.Add(t); });\n        while (emptyLeafNodes.Count > 0)\n        {\n            for (int i = 0; i < emptyLeafNodes.Count; i++)\n            {\n                emptyLeafNodes[i].Parent.RemoveChildNode(emptyLeafNodes[i]);\n            }\n\n            emptyLeafNodes.Clear();\n            ForEachEmptyLeafNode(Root, (t) => { emptyLeafNodes.Add(t); });\n        }\n    }\n\n    private void ForEachEmptyLeafNode(MapQuadBoundTree node, Action<MapQuadBoundTree> treeAction)\n    {\n        if (node.IsEmptyLeafNode)\n        {\n            treeAction?.Invoke(node);\n            return;\n        }\n\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachEmptyLeafNode(node.Childs[i], treeAction);\n            }\n        }\n    }\n\n    private void RemoveChildNode(MapQuadBoundTree node)\n    {\n        if (Childs != null)\n        {\n            Childs.Remove(node);\n        }\n    }\n\n\n    public void ForEach(Action<MapQuadBoundTree> each)\n    {\n        ForEach(Root, each);\n    }\n\n    public void ForEachInRect(TreeRect rect, Action<MapQuadBoundTree> treeAction)\n    {\n        ForEachAreaTree(Root, rect, treeAction);\n    }\n\n\n    private void ForEachAreaTree(MapQuadBoundTree node, TreeRect rect, Action<MapQuadBoundTree> treeAction)\n    {\n        if (!node.Rect.Intersect(rect))\n        {\n            return;\n        }\n\n        if (node.IsLeafNode)\n        {\n            treeAction?.Invoke(node);\n            return;\n        }\n\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachAreaTree(node.Childs[i], rect, treeAction);\n            }\n        }\n    }\n\n    public void ForEachInRect(TreeRect rect, Action<BoundTreeObject> treeAction)\n    {\n        ForEachAreaTree(Root, rect, treeAction);\n    }\n\n    private void ForEachAreaTree(MapQuadBoundTree node, TreeRect rect, Action<BoundTreeObject> treeAction)\n    {\n        if (!node.Rect.Intersect(rect))\n        {\n            return;\n        }\n\n        foreach (var boundTreeObj in node.BoundTreeObjs)\n        {\n            if (boundTreeObj.TreeRect.Intersect(rect))\n            {\n                treeAction?.Invoke(boundTreeObj);\n            }\n        }\n\n        if (node.IsLeafNode)\n        {\n            foreach (var boundTreeObj in node.TreePointObjs)\n            {\n                if (boundTreeObj.TreeRect.Intersect(rect))\n                {\n                    treeAction?.Invoke(boundTreeObj);\n                }\n            }\n\n            return;\n        }\n\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachAreaTree(node.Childs[i], rect, treeAction);\n            }\n        }\n    }\n\n    private void ForEach(MapQuadBoundTree node, Action<MapQuadBoundTree> each)\n    {\n        if (node == null)\n        {\n            return;\n        }\n\n        ForEachNodeValues(node, each);\n        if (node.Childs != null)\n        {\n            for (int i = 0; i < node.Childs.Count; i++)\n            {\n                ForEachNodeValues(node.Childs[i], each);\n                ForEach(node.Childs[i], each);\n            }\n        }\n    }\n\n    private void ForEachNodeValues(MapQuadBoundTree node, Action<MapQuadBoundTree> each)\n    {\n        each?.Invoke(node);\n    }\n\n    public override string ToString()\n    {\n        return $\"Deep :{TreeDeep} : {Rect.ToString()} ,+ {TreePointObjs.Count} \";\n    }\n}\n\n```\n\n","slug":"数据结构/四叉树","published":1,"updated":"2021-06-14T05:37:26.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpw6qo4r000014ho3klsg32y","content":"<h1 id=\"四叉树\"><a href=\"#四叉树\" class=\"headerlink\" title=\"四叉树\"></a>四叉树</h1><p><a href=\"https://zh.wikipedia.org/wiki%E5%9B%9B%E5%8F%89%E6%A0%91\">四叉树Wiki</a></p>\n<blockquote>\n<p>四叉树是一种树状数据结构，在每一个节点上会有四个子区块。四叉树常应用于二维空间资料的分析与分类。 它将资料区分成为四个象限。资料范围可以是方形或矩形或其他任意形状。这种数据结构是由 拉斐尔·芬科尔(Raphael Finkel) 与 J. L. Bentley 在1974年发展出来 。 类似的资料分割方法也称为 Q-tree。 所有的四叉树法有共同之特点:</p>\n</blockquote>\n<ol>\n<li>可分解成为各自的区块</li>\n<li>每个区块都有节点容量。当节点达到最大容量时，节点分裂</li>\n<li>树状数据结构依造四叉树法加以区分</li>\n</ol>\n<h1 id=\"根据理论在2D游戏中实际优化到的运用，在几百个单位中搜查，屏幕中的物体代码如下\"><a href=\"#根据理论在2D游戏中实际优化到的运用，在几百个单位中搜查，屏幕中的物体代码如下\" class=\"headerlink\" title=\"根据理论在2D游戏中实际优化到的运用，在几百个单位中搜查，屏幕中的物体代码如下\"></a>根据理论在2D游戏中实际优化到的运用，在几百个单位中搜查，屏幕中的物体代码如下</h1><h2 id=\"只要点在区域内就可以插入\"><a href=\"#只要点在区域内就可以插入\" class=\"headerlink\" title=\"只要点在区域内就可以插入\"></a>只要点在区域内就可以插入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TreeRect</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public float X &#123; get; private set; &#125;</span><br><span class=\"line\">    public float Y &#123; get; private set; &#125;</span><br><span class=\"line\">    public float W &#123; get; private set; &#125;</span><br><span class=\"line\">    public float H &#123; get; private set; &#125;</span><br><span class=\"line\">    public float HalfW &#123; get; private set; &#125;</span><br><span class=\"line\">    public float HalfH &#123; get; private set; &#125;</span><br><span class=\"line\">    public float XL &#123; get; private set; &#125;</span><br><span class=\"line\">    public float XR&#123; get; private set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public float YT &#123; get; private set; &#125;</span><br><span class=\"line\">    public float YB &#123; get; private set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 点</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;param name=&quot;x&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">    /// &lt;param name=&quot;y&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">    public TreeRect(float x, float y)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SetRect(x, y, 0, 0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 四边形</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;param name=&quot;x&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">    /// &lt;param name=&quot;y&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">    /// &lt;param name=&quot;w&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">    /// &lt;param name=&quot;h&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">    public TreeRect(float x, float y, float w, float h)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SetRect(x, y, w, h);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void SetRect(float x, float y, float w, float h)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        X = x;</span><br><span class=\"line\">        Y = y;</span><br><span class=\"line\">        W = w;</span><br><span class=\"line\">        H = h;</span><br><span class=\"line\"></span><br><span class=\"line\">        HalfW = W * 0.5f;</span><br><span class=\"line\">        HalfH = H * 0.5f;</span><br><span class=\"line\"></span><br><span class=\"line\">        XL = X - HalfW;</span><br><span class=\"line\">        XR = X + HalfW;</span><br><span class=\"line\">        YB = Y - HalfH;</span><br><span class=\"line\">        YT = Y + HalfH;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public bool Intersect(TreeRect other)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return (!(XR &lt; other.XL || XL &gt; other.XR)) &amp;&amp; (!(YT &lt; other.YB || YB &gt; other.YT));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public bool IsCenterIn(TreeRect other)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return other.X &lt;= XR &amp;&amp; other.X &gt;= XL &amp;&amp; other.Y &lt;= YT &amp;&amp; other.Y &gt;= YB;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public bool IsIn(TreeRect other)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return XR &lt;= other.XR  &amp;&amp; XL &gt;= other.XL &amp;&amp; YT &lt;= other.YT &amp;&amp; YB &gt;= other.YB;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    public override string ToString()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $&quot;(&#123;X&#125;,&#123;Y&#125;,&#123;W&#125;,&#123;H&#125;)&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static TreeRect operator *(TreeRect rhs,float lhs)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rhs.SetRect(rhs.X * lhs, rhs.Y * lhs, rhs.W * lhs,  rhs.H * lhs);</span><br><span class=\"line\">        return rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class TreeObject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 信息</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public TreeRect TreeRect;</span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 属于哪个节点</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public MapQuadTree Node ;</span><br><span class=\"line\">    public int Id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MapQuadTree</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public MapQuadTree Root &#123; get; &#125; //根节点</span><br><span class=\"line\">    public int MaxCount &#123; get; private set; &#125; = 5;</span><br><span class=\"line\">    public int MaxDeep &#123; get; private set; &#125; = 4;</span><br><span class=\"line\">    public int TreeDeep &#123; get; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public List&lt;MapQuadTree&gt; Childs &#123; get; private set; &#125; </span><br><span class=\"line\">    public MapQuadTree Parent &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public readonly List&lt;TreeObject&gt; TreePointObjs = new List&lt;TreeObject&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    // public readonly List&lt;TreeObject&gt; BoundTreeObjs = new List&lt;TreeObject&gt;();</span><br><span class=\"line\">    public TreeRect Rect &#123; get; &#125;</span><br><span class=\"line\">    public bool IsLeafNode =&gt; Childs == null || Childs.Count == 0;</span><br><span class=\"line\">    public bool IsEmptyLeafNode =&gt; TreePointObjs.Count == 0 &amp;&amp; IsLeafNode ;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MapQuadTree(TreeRect rect)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Rect = rect;</span><br><span class=\"line\">        TreeDeep = 0;</span><br><span class=\"line\">        Root = this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MapQuadTree(TreeRect rect, int treeDeep, MapQuadTree parent) : this(rect)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        TreeDeep = treeDeep + 1;</span><br><span class=\"line\">        this.Parent = parent;</span><br><span class=\"line\">        Root = parent.Root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void Insert(TreeObject treeObj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!IsInTreeRect(treeObj))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        treeObj.Node = this;</span><br><span class=\"line\">        if (Childs == null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            TreePointObjs.Add(treeObj);</span><br><span class=\"line\">            if (TreePointObjs.Count &gt; MaxCount)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                SliceTree();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Childs[i].Insert(treeObj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void SliceTree()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (TreeDeep &gt;= MaxDeep)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 四分 可根据情况 调整</span><br><span class=\"line\">        // lb, lt, rt, rb  目前与unity recttranform 的 4个 corner 保持一致的分布顺序</span><br><span class=\"line\">        Childs = new List&lt;MapQuadTree&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            new MapQuadTree(new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep, this),</span><br><span class=\"line\">            new MapQuadTree(new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep, this),</span><br><span class=\"line\">            new MapQuadTree(new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep, this),</span><br><span class=\"line\">            new MapQuadTree(new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep, this)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 0; i &lt; TreePointObjs.Count; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int j = 0; j &lt; Childs.Count; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Childs[j].Insert(TreePointObjs[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        TreePointObjs.Clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public bool Intersect(TreeRect other)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return Rect.Intersect(other);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private bool IsInTreeRect(TreeObject treeObj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return Rect.IsCenterIn(treeObj.TreeRect);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void ClearEmptyNode()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        List&lt;MapQuadTree&gt; emptyLeafNodes = new List&lt;MapQuadTree&gt;();</span><br><span class=\"line\">        ForEachEmptyLeafNode(Root, (t) =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            emptyLeafNodes.Add(t);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        while (emptyLeafNodes.Count &gt; 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; emptyLeafNodes.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                emptyLeafNodes[i].Parent.RemoveChildNode(emptyLeafNodes[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            emptyLeafNodes.Clear();</span><br><span class=\"line\">            ForEachEmptyLeafNode(Root, (t) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                emptyLeafNodes.Add(t);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEachEmptyLeafNode(MapQuadTree node, Action&lt;MapQuadTree&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (node.IsEmptyLeafNode)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            treeAction?.Invoke(node);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachEmptyLeafNode(node.Childs[i],treeAction);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private void ForEachLeafNode(MapQuadTree node, Action&lt;MapQuadTree&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (node.IsLeafNode)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            treeAction?.Invoke(node);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachLeafNode(node.Childs[i],treeAction);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private void RemoveChildNode(MapQuadTree node)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (Childs!=null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Childs.Remove(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void ForEach(Action&lt;MapQuadTree&gt; each)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ForEach(Root, each);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void ForEachInRect(TreeRect rect, Action&lt;MapQuadTree&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ForEachAreaTree(Root, rect, treeAction);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEachAreaTree(MapQuadTree node, TreeRect rect, Action&lt;MapQuadTree&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!node.Rect.Intersect(rect))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.IsLeafNode)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            treeAction?.Invoke(node);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachAreaTree(node.Childs[i], rect, treeAction);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void ForEachInRect(TreeRect rect, Action&lt;TreeObject&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ForEachAreaTree(Root, rect, treeAction);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEachAreaTree(MapQuadTree node, TreeRect rect, Action&lt;TreeObject&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!node.Rect.Intersect(rect))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.IsLeafNode)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            foreach (var treeObject in node.TreePointObjs)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                treeAction?.Invoke(treeObject);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachAreaTree(node.Childs[i], rect, treeAction);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEach(MapQuadTree node, Action&lt;MapQuadTree&gt; each)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (node == null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ForEachNodeValues(node, each);</span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachNodeValues(node.Childs[i], each);</span><br><span class=\"line\">                ForEach(node.Childs[i], each);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEachNodeValues(MapQuadTree node, Action&lt;MapQuadTree&gt; each)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        each?.Invoke(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public override string ToString()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $&quot;Deep :&#123;TreeDeep&#125; : &#123;Rect.ToString()&#125; ,+ &#123;TreePointObjs.Count&#125; &quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"只要点和边框必须在区域内就可以插入\"><a href=\"#只要点和边框必须在区域内就可以插入\" class=\"headerlink\" title=\"只要点和边框必须在区域内就可以插入\"></a>只要点和边框必须在区域内就可以插入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class BoundTreeObject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public TreeRect TreeRect;</span><br><span class=\"line\">    public MapQuadBoundTree Node;</span><br><span class=\"line\">    public int Id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MapQuadBoundTree</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public MapQuadBoundTree Root &#123; get; &#125; //根节点</span><br><span class=\"line\">    public int MaxCount &#123; get; private set; &#125; = 5;</span><br><span class=\"line\">    public int MaxDeep &#123; get; private set; &#125; = 5;</span><br><span class=\"line\">    public int TreeDeep &#123; get; &#125;</span><br><span class=\"line\">    public List&lt;MapQuadBoundTree&gt; Childs &#123; get; private set; &#125;</span><br><span class=\"line\">    public MapQuadBoundTree Parent &#123; get; &#125;</span><br><span class=\"line\">    private TreeRect[] _treeChildRects = new TreeRect[4];</span><br><span class=\"line\">    public readonly List&lt;BoundTreeObject&gt; TreePointObjs = new List&lt;BoundTreeObject&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public readonly List&lt;BoundTreeObject&gt; BoundTreeObjs = new List&lt;BoundTreeObject&gt;();</span><br><span class=\"line\">    public TreeRect Rect &#123; get; &#125;</span><br><span class=\"line\">    public bool IsLeafNode =&gt; Childs == null || Childs.Count == 0;</span><br><span class=\"line\">    public bool IsEmptyLeafNode =&gt; BoundTreeObjs.Count == 0 &amp;&amp; TreePointObjs.Count == 0 &amp;&amp; IsLeafNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MapQuadBoundTree(TreeRect rect)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Rect = rect;</span><br><span class=\"line\">        TreeDeep = 0;</span><br><span class=\"line\">        Root = this;</span><br><span class=\"line\">        _treeChildRects[0] =</span><br><span class=\"line\">            new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH);</span><br><span class=\"line\">        _treeChildRects[1] =</span><br><span class=\"line\">            new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH);</span><br><span class=\"line\">        _treeChildRects[2] =</span><br><span class=\"line\">            new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH);</span><br><span class=\"line\">        _treeChildRects[3] =</span><br><span class=\"line\">            new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MapQuadBoundTree(TreeRect rect, int treeDeep, MapQuadBoundTree parent) : this(rect)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        TreeDeep = treeDeep + 1;</span><br><span class=\"line\">        this.Parent = parent;</span><br><span class=\"line\">        Root = parent.Root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void Insert(BoundTreeObject treeObj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!IsInTreeRect(treeObj))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        treeObj.Node = this;</span><br><span class=\"line\">        if (IsAllInsert(treeObj))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            BoundTreeObjs.Add(treeObj);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (Childs == null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            TreePointObjs.Add(treeObj);</span><br><span class=\"line\">            if (TreePointObjs.Count &gt; MaxCount)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                SliceTree();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Childs[i].Insert(treeObj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private bool IsAllInsert(BoundTreeObject treeObj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int count = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; _treeChildRects.Length; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (_treeChildRects[i].Intersect(treeObj.TreeRect))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                if (count &gt; 0)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    return true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void SliceTree()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (TreeDeep &gt;= MaxDeep)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // lb, lt, rt, rb  目前与unity recttranform 的 4个 corner 保持一致的分布顺序</span><br><span class=\"line\">        Childs = new List&lt;MapQuadBoundTree&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            new MapQuadBoundTree(</span><br><span class=\"line\">                new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep,</span><br><span class=\"line\">                this),</span><br><span class=\"line\">            new MapQuadBoundTree(</span><br><span class=\"line\">                new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep,</span><br><span class=\"line\">                this),</span><br><span class=\"line\">            new MapQuadBoundTree(</span><br><span class=\"line\">                new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep,</span><br><span class=\"line\">                this),</span><br><span class=\"line\">            new MapQuadBoundTree(</span><br><span class=\"line\">                new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep,</span><br><span class=\"line\">                this)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 0; i &lt; TreePointObjs.Count; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int j = 0; j &lt; Childs.Count; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Childs[j].Insert(TreePointObjs[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        TreePointObjs.Clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public bool Intersect(TreeRect other)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return Rect.Intersect(other);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private bool IsInTreeRect(BoundTreeObject treeObj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return Rect.IsCenterIn(treeObj.TreeRect);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void ClearEmptyNode()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // TODO  清除空节点 只需从叶节点删除</span><br><span class=\"line\">        List&lt;MapQuadBoundTree&gt; emptyLeafNodes = new List&lt;MapQuadBoundTree&gt;();</span><br><span class=\"line\">        ForEachEmptyLeafNode(Root, (t) =&gt; &#123; emptyLeafNodes.Add(t); &#125;);</span><br><span class=\"line\">        while (emptyLeafNodes.Count &gt; 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; emptyLeafNodes.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                emptyLeafNodes[i].Parent.RemoveChildNode(emptyLeafNodes[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            emptyLeafNodes.Clear();</span><br><span class=\"line\">            ForEachEmptyLeafNode(Root, (t) =&gt; &#123; emptyLeafNodes.Add(t); &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEachEmptyLeafNode(MapQuadBoundTree node, Action&lt;MapQuadBoundTree&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (node.IsEmptyLeafNode)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            treeAction?.Invoke(node);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachEmptyLeafNode(node.Childs[i], treeAction);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void RemoveChildNode(MapQuadBoundTree node)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Childs.Remove(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public void ForEach(Action&lt;MapQuadBoundTree&gt; each)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ForEach(Root, each);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void ForEachInRect(TreeRect rect, Action&lt;MapQuadBoundTree&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ForEachAreaTree(Root, rect, treeAction);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEachAreaTree(MapQuadBoundTree node, TreeRect rect, Action&lt;MapQuadBoundTree&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!node.Rect.Intersect(rect))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.IsLeafNode)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            treeAction?.Invoke(node);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachAreaTree(node.Childs[i], rect, treeAction);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void ForEachInRect(TreeRect rect, Action&lt;BoundTreeObject&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ForEachAreaTree(Root, rect, treeAction);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEachAreaTree(MapQuadBoundTree node, TreeRect rect, Action&lt;BoundTreeObject&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!node.Rect.Intersect(rect))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        foreach (var boundTreeObj in node.BoundTreeObjs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (boundTreeObj.TreeRect.Intersect(rect))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                treeAction?.Invoke(boundTreeObj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.IsLeafNode)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            foreach (var boundTreeObj in node.TreePointObjs)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                if (boundTreeObj.TreeRect.Intersect(rect))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    treeAction?.Invoke(boundTreeObj);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachAreaTree(node.Childs[i], rect, treeAction);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEach(MapQuadBoundTree node, Action&lt;MapQuadBoundTree&gt; each)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (node == null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ForEachNodeValues(node, each);</span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachNodeValues(node.Childs[i], each);</span><br><span class=\"line\">                ForEach(node.Childs[i], each);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEachNodeValues(MapQuadBoundTree node, Action&lt;MapQuadBoundTree&gt; each)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        each?.Invoke(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public override string ToString()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $&quot;Deep :&#123;TreeDeep&#125; : &#123;Rect.ToString()&#125; ,+ &#123;TreePointObjs.Count&#125; &quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"四叉树\"><a href=\"#四叉树\" class=\"headerlink\" title=\"四叉树\"></a>四叉树</h1><p><a href=\"https://zh.wikipedia.org/wiki%E5%9B%9B%E5%8F%89%E6%A0%91\">四叉树Wiki</a></p>\n<blockquote>\n<p>四叉树是一种树状数据结构，在每一个节点上会有四个子区块。四叉树常应用于二维空间资料的分析与分类。 它将资料区分成为四个象限。资料范围可以是方形或矩形或其他任意形状。这种数据结构是由 拉斐尔·芬科尔(Raphael Finkel) 与 J. L. Bentley 在1974年发展出来 。 类似的资料分割方法也称为 Q-tree。 所有的四叉树法有共同之特点:</p>\n</blockquote>\n<ol>\n<li>可分解成为各自的区块</li>\n<li>每个区块都有节点容量。当节点达到最大容量时，节点分裂</li>\n<li>树状数据结构依造四叉树法加以区分</li>\n</ol>\n<h1 id=\"根据理论在2D游戏中实际优化到的运用，在几百个单位中搜查，屏幕中的物体代码如下\"><a href=\"#根据理论在2D游戏中实际优化到的运用，在几百个单位中搜查，屏幕中的物体代码如下\" class=\"headerlink\" title=\"根据理论在2D游戏中实际优化到的运用，在几百个单位中搜查，屏幕中的物体代码如下\"></a>根据理论在2D游戏中实际优化到的运用，在几百个单位中搜查，屏幕中的物体代码如下</h1><h2 id=\"只要点在区域内就可以插入\"><a href=\"#只要点在区域内就可以插入\" class=\"headerlink\" title=\"只要点在区域内就可以插入\"></a>只要点在区域内就可以插入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TreeRect</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public float X &#123; get; private set; &#125;</span><br><span class=\"line\">    public float Y &#123; get; private set; &#125;</span><br><span class=\"line\">    public float W &#123; get; private set; &#125;</span><br><span class=\"line\">    public float H &#123; get; private set; &#125;</span><br><span class=\"line\">    public float HalfW &#123; get; private set; &#125;</span><br><span class=\"line\">    public float HalfH &#123; get; private set; &#125;</span><br><span class=\"line\">    public float XL &#123; get; private set; &#125;</span><br><span class=\"line\">    public float XR&#123; get; private set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public float YT &#123; get; private set; &#125;</span><br><span class=\"line\">    public float YB &#123; get; private set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 点</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;param name=&quot;x&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">    /// &lt;param name=&quot;y&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">    public TreeRect(float x, float y)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SetRect(x, y, 0, 0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 四边形</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;param name=&quot;x&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">    /// &lt;param name=&quot;y&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">    /// &lt;param name=&quot;w&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">    /// &lt;param name=&quot;h&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">    public TreeRect(float x, float y, float w, float h)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SetRect(x, y, w, h);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void SetRect(float x, float y, float w, float h)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        X = x;</span><br><span class=\"line\">        Y = y;</span><br><span class=\"line\">        W = w;</span><br><span class=\"line\">        H = h;</span><br><span class=\"line\"></span><br><span class=\"line\">        HalfW = W * 0.5f;</span><br><span class=\"line\">        HalfH = H * 0.5f;</span><br><span class=\"line\"></span><br><span class=\"line\">        XL = X - HalfW;</span><br><span class=\"line\">        XR = X + HalfW;</span><br><span class=\"line\">        YB = Y - HalfH;</span><br><span class=\"line\">        YT = Y + HalfH;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public bool Intersect(TreeRect other)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return (!(XR &lt; other.XL || XL &gt; other.XR)) &amp;&amp; (!(YT &lt; other.YB || YB &gt; other.YT));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public bool IsCenterIn(TreeRect other)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return other.X &lt;= XR &amp;&amp; other.X &gt;= XL &amp;&amp; other.Y &lt;= YT &amp;&amp; other.Y &gt;= YB;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public bool IsIn(TreeRect other)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return XR &lt;= other.XR  &amp;&amp; XL &gt;= other.XL &amp;&amp; YT &lt;= other.YT &amp;&amp; YB &gt;= other.YB;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    public override string ToString()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $&quot;(&#123;X&#125;,&#123;Y&#125;,&#123;W&#125;,&#123;H&#125;)&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static TreeRect operator *(TreeRect rhs,float lhs)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rhs.SetRect(rhs.X * lhs, rhs.Y * lhs, rhs.W * lhs,  rhs.H * lhs);</span><br><span class=\"line\">        return rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class TreeObject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 信息</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public TreeRect TreeRect;</span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 属于哪个节点</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public MapQuadTree Node ;</span><br><span class=\"line\">    public int Id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MapQuadTree</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public MapQuadTree Root &#123; get; &#125; //根节点</span><br><span class=\"line\">    public int MaxCount &#123; get; private set; &#125; = 5;</span><br><span class=\"line\">    public int MaxDeep &#123; get; private set; &#125; = 4;</span><br><span class=\"line\">    public int TreeDeep &#123; get; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public List&lt;MapQuadTree&gt; Childs &#123; get; private set; &#125; </span><br><span class=\"line\">    public MapQuadTree Parent &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public readonly List&lt;TreeObject&gt; TreePointObjs = new List&lt;TreeObject&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    // public readonly List&lt;TreeObject&gt; BoundTreeObjs = new List&lt;TreeObject&gt;();</span><br><span class=\"line\">    public TreeRect Rect &#123; get; &#125;</span><br><span class=\"line\">    public bool IsLeafNode =&gt; Childs == null || Childs.Count == 0;</span><br><span class=\"line\">    public bool IsEmptyLeafNode =&gt; TreePointObjs.Count == 0 &amp;&amp; IsLeafNode ;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MapQuadTree(TreeRect rect)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Rect = rect;</span><br><span class=\"line\">        TreeDeep = 0;</span><br><span class=\"line\">        Root = this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MapQuadTree(TreeRect rect, int treeDeep, MapQuadTree parent) : this(rect)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        TreeDeep = treeDeep + 1;</span><br><span class=\"line\">        this.Parent = parent;</span><br><span class=\"line\">        Root = parent.Root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void Insert(TreeObject treeObj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!IsInTreeRect(treeObj))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        treeObj.Node = this;</span><br><span class=\"line\">        if (Childs == null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            TreePointObjs.Add(treeObj);</span><br><span class=\"line\">            if (TreePointObjs.Count &gt; MaxCount)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                SliceTree();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Childs[i].Insert(treeObj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void SliceTree()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (TreeDeep &gt;= MaxDeep)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 四分 可根据情况 调整</span><br><span class=\"line\">        // lb, lt, rt, rb  目前与unity recttranform 的 4个 corner 保持一致的分布顺序</span><br><span class=\"line\">        Childs = new List&lt;MapQuadTree&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            new MapQuadTree(new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep, this),</span><br><span class=\"line\">            new MapQuadTree(new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep, this),</span><br><span class=\"line\">            new MapQuadTree(new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep, this),</span><br><span class=\"line\">            new MapQuadTree(new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep, this)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 0; i &lt; TreePointObjs.Count; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int j = 0; j &lt; Childs.Count; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Childs[j].Insert(TreePointObjs[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        TreePointObjs.Clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public bool Intersect(TreeRect other)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return Rect.Intersect(other);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private bool IsInTreeRect(TreeObject treeObj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return Rect.IsCenterIn(treeObj.TreeRect);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void ClearEmptyNode()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        List&lt;MapQuadTree&gt; emptyLeafNodes = new List&lt;MapQuadTree&gt;();</span><br><span class=\"line\">        ForEachEmptyLeafNode(Root, (t) =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            emptyLeafNodes.Add(t);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        while (emptyLeafNodes.Count &gt; 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; emptyLeafNodes.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                emptyLeafNodes[i].Parent.RemoveChildNode(emptyLeafNodes[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            emptyLeafNodes.Clear();</span><br><span class=\"line\">            ForEachEmptyLeafNode(Root, (t) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                emptyLeafNodes.Add(t);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEachEmptyLeafNode(MapQuadTree node, Action&lt;MapQuadTree&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (node.IsEmptyLeafNode)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            treeAction?.Invoke(node);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachEmptyLeafNode(node.Childs[i],treeAction);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private void ForEachLeafNode(MapQuadTree node, Action&lt;MapQuadTree&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (node.IsLeafNode)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            treeAction?.Invoke(node);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachLeafNode(node.Childs[i],treeAction);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private void RemoveChildNode(MapQuadTree node)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (Childs!=null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Childs.Remove(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void ForEach(Action&lt;MapQuadTree&gt; each)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ForEach(Root, each);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void ForEachInRect(TreeRect rect, Action&lt;MapQuadTree&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ForEachAreaTree(Root, rect, treeAction);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEachAreaTree(MapQuadTree node, TreeRect rect, Action&lt;MapQuadTree&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!node.Rect.Intersect(rect))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.IsLeafNode)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            treeAction?.Invoke(node);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachAreaTree(node.Childs[i], rect, treeAction);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void ForEachInRect(TreeRect rect, Action&lt;TreeObject&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ForEachAreaTree(Root, rect, treeAction);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEachAreaTree(MapQuadTree node, TreeRect rect, Action&lt;TreeObject&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!node.Rect.Intersect(rect))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.IsLeafNode)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            foreach (var treeObject in node.TreePointObjs)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                treeAction?.Invoke(treeObject);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachAreaTree(node.Childs[i], rect, treeAction);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEach(MapQuadTree node, Action&lt;MapQuadTree&gt; each)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (node == null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ForEachNodeValues(node, each);</span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachNodeValues(node.Childs[i], each);</span><br><span class=\"line\">                ForEach(node.Childs[i], each);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEachNodeValues(MapQuadTree node, Action&lt;MapQuadTree&gt; each)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        each?.Invoke(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public override string ToString()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $&quot;Deep :&#123;TreeDeep&#125; : &#123;Rect.ToString()&#125; ,+ &#123;TreePointObjs.Count&#125; &quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"只要点和边框必须在区域内就可以插入\"><a href=\"#只要点和边框必须在区域内就可以插入\" class=\"headerlink\" title=\"只要点和边框必须在区域内就可以插入\"></a>只要点和边框必须在区域内就可以插入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class BoundTreeObject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public TreeRect TreeRect;</span><br><span class=\"line\">    public MapQuadBoundTree Node;</span><br><span class=\"line\">    public int Id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MapQuadBoundTree</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public MapQuadBoundTree Root &#123; get; &#125; //根节点</span><br><span class=\"line\">    public int MaxCount &#123; get; private set; &#125; = 5;</span><br><span class=\"line\">    public int MaxDeep &#123; get; private set; &#125; = 5;</span><br><span class=\"line\">    public int TreeDeep &#123; get; &#125;</span><br><span class=\"line\">    public List&lt;MapQuadBoundTree&gt; Childs &#123; get; private set; &#125;</span><br><span class=\"line\">    public MapQuadBoundTree Parent &#123; get; &#125;</span><br><span class=\"line\">    private TreeRect[] _treeChildRects = new TreeRect[4];</span><br><span class=\"line\">    public readonly List&lt;BoundTreeObject&gt; TreePointObjs = new List&lt;BoundTreeObject&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public readonly List&lt;BoundTreeObject&gt; BoundTreeObjs = new List&lt;BoundTreeObject&gt;();</span><br><span class=\"line\">    public TreeRect Rect &#123; get; &#125;</span><br><span class=\"line\">    public bool IsLeafNode =&gt; Childs == null || Childs.Count == 0;</span><br><span class=\"line\">    public bool IsEmptyLeafNode =&gt; BoundTreeObjs.Count == 0 &amp;&amp; TreePointObjs.Count == 0 &amp;&amp; IsLeafNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MapQuadBoundTree(TreeRect rect)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Rect = rect;</span><br><span class=\"line\">        TreeDeep = 0;</span><br><span class=\"line\">        Root = this;</span><br><span class=\"line\">        _treeChildRects[0] =</span><br><span class=\"line\">            new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH);</span><br><span class=\"line\">        _treeChildRects[1] =</span><br><span class=\"line\">            new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH);</span><br><span class=\"line\">        _treeChildRects[2] =</span><br><span class=\"line\">            new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH);</span><br><span class=\"line\">        _treeChildRects[3] =</span><br><span class=\"line\">            new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MapQuadBoundTree(TreeRect rect, int treeDeep, MapQuadBoundTree parent) : this(rect)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        TreeDeep = treeDeep + 1;</span><br><span class=\"line\">        this.Parent = parent;</span><br><span class=\"line\">        Root = parent.Root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void Insert(BoundTreeObject treeObj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!IsInTreeRect(treeObj))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        treeObj.Node = this;</span><br><span class=\"line\">        if (IsAllInsert(treeObj))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            BoundTreeObjs.Add(treeObj);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (Childs == null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            TreePointObjs.Add(treeObj);</span><br><span class=\"line\">            if (TreePointObjs.Count &gt; MaxCount)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                SliceTree();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Childs[i].Insert(treeObj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private bool IsAllInsert(BoundTreeObject treeObj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int count = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; _treeChildRects.Length; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (_treeChildRects[i].Intersect(treeObj.TreeRect))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                if (count &gt; 0)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    return true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void SliceTree()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (TreeDeep &gt;= MaxDeep)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // lb, lt, rt, rb  目前与unity recttranform 的 4个 corner 保持一致的分布顺序</span><br><span class=\"line\">        Childs = new List&lt;MapQuadBoundTree&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            new MapQuadBoundTree(</span><br><span class=\"line\">                new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep,</span><br><span class=\"line\">                this),</span><br><span class=\"line\">            new MapQuadBoundTree(</span><br><span class=\"line\">                new TreeRect(Rect.X - Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep,</span><br><span class=\"line\">                this),</span><br><span class=\"line\">            new MapQuadBoundTree(</span><br><span class=\"line\">                new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y + Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep,</span><br><span class=\"line\">                this),</span><br><span class=\"line\">            new MapQuadBoundTree(</span><br><span class=\"line\">                new TreeRect(Rect.X + Rect.HalfW * 0.5f, Rect.Y - Rect.HalfH * 0.5f, Rect.HalfW, Rect.HalfH), TreeDeep,</span><br><span class=\"line\">                this)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 0; i &lt; TreePointObjs.Count; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int j = 0; j &lt; Childs.Count; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Childs[j].Insert(TreePointObjs[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        TreePointObjs.Clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public bool Intersect(TreeRect other)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return Rect.Intersect(other);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private bool IsInTreeRect(BoundTreeObject treeObj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return Rect.IsCenterIn(treeObj.TreeRect);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void ClearEmptyNode()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // TODO  清除空节点 只需从叶节点删除</span><br><span class=\"line\">        List&lt;MapQuadBoundTree&gt; emptyLeafNodes = new List&lt;MapQuadBoundTree&gt;();</span><br><span class=\"line\">        ForEachEmptyLeafNode(Root, (t) =&gt; &#123; emptyLeafNodes.Add(t); &#125;);</span><br><span class=\"line\">        while (emptyLeafNodes.Count &gt; 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; emptyLeafNodes.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                emptyLeafNodes[i].Parent.RemoveChildNode(emptyLeafNodes[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            emptyLeafNodes.Clear();</span><br><span class=\"line\">            ForEachEmptyLeafNode(Root, (t) =&gt; &#123; emptyLeafNodes.Add(t); &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEachEmptyLeafNode(MapQuadBoundTree node, Action&lt;MapQuadBoundTree&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (node.IsEmptyLeafNode)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            treeAction?.Invoke(node);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachEmptyLeafNode(node.Childs[i], treeAction);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void RemoveChildNode(MapQuadBoundTree node)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Childs.Remove(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public void ForEach(Action&lt;MapQuadBoundTree&gt; each)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ForEach(Root, each);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void ForEachInRect(TreeRect rect, Action&lt;MapQuadBoundTree&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ForEachAreaTree(Root, rect, treeAction);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEachAreaTree(MapQuadBoundTree node, TreeRect rect, Action&lt;MapQuadBoundTree&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!node.Rect.Intersect(rect))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.IsLeafNode)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            treeAction?.Invoke(node);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachAreaTree(node.Childs[i], rect, treeAction);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void ForEachInRect(TreeRect rect, Action&lt;BoundTreeObject&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ForEachAreaTree(Root, rect, treeAction);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEachAreaTree(MapQuadBoundTree node, TreeRect rect, Action&lt;BoundTreeObject&gt; treeAction)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!node.Rect.Intersect(rect))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        foreach (var boundTreeObj in node.BoundTreeObjs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (boundTreeObj.TreeRect.Intersect(rect))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                treeAction?.Invoke(boundTreeObj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.IsLeafNode)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            foreach (var boundTreeObj in node.TreePointObjs)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                if (boundTreeObj.TreeRect.Intersect(rect))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    treeAction?.Invoke(boundTreeObj);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachAreaTree(node.Childs[i], rect, treeAction);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEach(MapQuadBoundTree node, Action&lt;MapQuadBoundTree&gt; each)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (node == null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ForEachNodeValues(node, each);</span><br><span class=\"line\">        if (node.Childs != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; node.Childs.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ForEachNodeValues(node.Childs[i], each);</span><br><span class=\"line\">                ForEach(node.Childs[i], each);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void ForEachNodeValues(MapQuadBoundTree node, Action&lt;MapQuadBoundTree&gt; each)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        each?.Invoke(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public override string ToString()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $&quot;Deep :&#123;TreeDeep&#125; : &#123;Rect.ToString()&#125; ,+ &#123;TreePointObjs.Count&#125; &quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"CSharpLua","date":"2021-06-17T04:00:00.000Z","toc":true,"_content":"\n\n# CSharpLua \n\n一个翻译c#为Lua的工具 \nGit地址[Charp.lua](https://github.com/yanghuan/CSharp.lua.git)\n\n## 参数\n\n```\n\nD:\\>dotnet CSharp.Lua.Launcher.dll -h\nUsage: CSharp.lua [-s srcfolder] [-d dstfolder]\nArguments\n-s              : can be a directory where all cs files will be compiled, or a list of files, using ';' or ',' to separate\n-d              : destination directory, will put the out lua files\n\nOptions\n-h              : show the help message and exit\n-l              : libraries referenced, use ';' to separate\n                  if the librarie is a module, whitch is compield by CSharp.lua with -module arguemnt, the last character needs to be '!' in order to mark  \n\n-m              : meta files, like System.xml, use ';' to separate\n-csc            : csc.exe command argumnets, use ' ' or '\\t' to separate\n\n-c              : support classic lua version(5.1), default support 5.3\n-a              : attributes need to export, use ';' to separate, if \"\"-a\"\" only, all attributes whill be exported\n-e              : enums need to export, use ';' to separate, if \"\"-e\"\" only, all enums will be exported\n-ei             : enums is represented by a variable reference rather than a constant value, need to be used with -e\n-p              : do not use debug.setmetatable, in some Addon/Plugin environment debug object cannot be used\n-metadata       : export all metadata, use @CSharpLua.Metadata annotations for precise control\n-module         : the currently compiled assembly needs to be referenced, it's useful for multiple module compiled\n-inline-property: inline some single-line properties\n-include        : the root directory of the CoreSystem library, adds all the dependencies to a single file named out.lua\n-noconcurrent   : close concurrent compile\n\n```\n\n### 编译源码\n\n打开 CSharp.lua.sln \n自己可编译 我这里选择 Release Build\n\n![截图](/images/csharplua/2.png)\n\n红色标记处为编译成功后\n \n\n这里新建一个文件夹将上图红色标记文件拷出\n\n![截图](/images/csharplua/3.png)\n\ncmd测试： dotnet CSharp.lua.Launcher.dll -h\n\n![截图](/images/csharplua/1.png)\n\n\n### 编译c# 工程\n\nlua 使用的 5.3 版本\n\n新建 CompileScript Console工程,新增文件夹Core\n创建测试脚本 \n\nTest.cs\n```\nusing System;\n\nnamespace CompileScript.Core\n{\n    public class Test\n    {\n        public int a;\n        public int b;\n\n        public Test()\n        {\n            \n        }\n\n        public void Debug()\n        {\n            Console.WriteLine(a + b);\n        }\n\n    }\n    \n    \n}\n\n```\nTestClass2.cs\n\n```\nnamespace CompileScript.Core\n{\n    class TestClass2\n    {\n        public void Debug()\n        {\n            Test t = new Test();\n            t.Debug();\n        }\n\n    }\n}\n\n```\n\n> 命令行： dotnet CSharp.lua.Launcher.dll -s ../CompileScript/CompileScript/CompileScript/Core -d ../Export\n\n\n在Export 下创建lua工程\n将![截图](/images/csharplua/4.png) copy 到工程，新建main.lua\n\n```\nrequire(\"All\")()\nrequire(\"manifest\")()\n\nlocal baseTime = System.DateTime(1970, 1, 1)\nprint(baseTime:ToString())\n\nlocal t = CompileScript.Core.Test()\nt.a = 10\nt:Debug()\n```\n运行 可以\n\n将![截图](/images/csharplua/5.png) copy 到工程，新建main.lua\n\n\n### 第三方库引用\n\nCompileScript 工程添加Newtonsoft库\n\n```\nusing System;\nusing Newtonsoft.Json;\nnamespace CompileScript.Core\n{\n    public class Test\n    {\n        public int a;\n        public int b;\n\n        public Test()\n        {\n            \n        }\n\n        public void Debug()\n        {\n          \n            Console.WriteLine(a + b);\n\n            Console.WriteLine(JsonConvert.SerializeObject(this));\n        }\n\n    }\n    \n}\n\n```\n编译指令\n\n> G:\\Learning\\CsharpLua\\CSharpLuaTools>dotnet CSharp.lua.Launcher.dll -s ../CompileScript/CompileScript/CompileScript/Core -d ../Export -l ../3rd/Newtonsoft.Json.dll\n\n运行代码 报错\n\n![截图](/images/csharplua/6.png)\n\n\n> 这里第三方库dll的实现需要自己适配\n\n这里适配 NewtonsoftJson.JsonConvert.SerializeObject(this)\n\n\n新建 NewtonsoftJson.lua\n\n\n```\nNewtonsoft = {}\nNewtonsoft.Json = {}\nNewtonsoft.Json.JsonConvert = {}\nNewtonsoft.Json.JsonConvert.SerializeObject = function (obj)\n     return \"todo\"\nend\n\nreturn Newtonsoft\n```\n\nreturn \"todo\"可修改为lua相关的json库，比如cjson\n\n\n### 注意事项\n\n* 第三方库的依赖尽量少依赖\n* 如果有需要查看适配结果，多测试\n* 核心库CoreSystem.Lua 文件夹下的适配了多数System。\n\n### Tip\n\n如果手写Lua 需要调用翻译的lua class 时，如果不知道如何new对象等，参考TestClass2, 创建一个专门的class 用来测试 翻译出的如何new 对象。\n\n\n### 适配踩坑\n\nUnity工程适配 ToLua支持，Xlua 实际测试不支持，如果在Xlua 使用，不得依赖UnityEngine 相关库。\n\n","source":"_posts/Tools/CSharp.lua.md","raw":"---\ntitle: CSharpLua\ncategories: Tools\ntags: Charp Lua\ndate: 2021-06-17 12:00:00\ntoc: true\n---\n\n\n# CSharpLua \n\n一个翻译c#为Lua的工具 \nGit地址[Charp.lua](https://github.com/yanghuan/CSharp.lua.git)\n\n## 参数\n\n```\n\nD:\\>dotnet CSharp.Lua.Launcher.dll -h\nUsage: CSharp.lua [-s srcfolder] [-d dstfolder]\nArguments\n-s              : can be a directory where all cs files will be compiled, or a list of files, using ';' or ',' to separate\n-d              : destination directory, will put the out lua files\n\nOptions\n-h              : show the help message and exit\n-l              : libraries referenced, use ';' to separate\n                  if the librarie is a module, whitch is compield by CSharp.lua with -module arguemnt, the last character needs to be '!' in order to mark  \n\n-m              : meta files, like System.xml, use ';' to separate\n-csc            : csc.exe command argumnets, use ' ' or '\\t' to separate\n\n-c              : support classic lua version(5.1), default support 5.3\n-a              : attributes need to export, use ';' to separate, if \"\"-a\"\" only, all attributes whill be exported\n-e              : enums need to export, use ';' to separate, if \"\"-e\"\" only, all enums will be exported\n-ei             : enums is represented by a variable reference rather than a constant value, need to be used with -e\n-p              : do not use debug.setmetatable, in some Addon/Plugin environment debug object cannot be used\n-metadata       : export all metadata, use @CSharpLua.Metadata annotations for precise control\n-module         : the currently compiled assembly needs to be referenced, it's useful for multiple module compiled\n-inline-property: inline some single-line properties\n-include        : the root directory of the CoreSystem library, adds all the dependencies to a single file named out.lua\n-noconcurrent   : close concurrent compile\n\n```\n\n### 编译源码\n\n打开 CSharp.lua.sln \n自己可编译 我这里选择 Release Build\n\n![截图](/images/csharplua/2.png)\n\n红色标记处为编译成功后\n \n\n这里新建一个文件夹将上图红色标记文件拷出\n\n![截图](/images/csharplua/3.png)\n\ncmd测试： dotnet CSharp.lua.Launcher.dll -h\n\n![截图](/images/csharplua/1.png)\n\n\n### 编译c# 工程\n\nlua 使用的 5.3 版本\n\n新建 CompileScript Console工程,新增文件夹Core\n创建测试脚本 \n\nTest.cs\n```\nusing System;\n\nnamespace CompileScript.Core\n{\n    public class Test\n    {\n        public int a;\n        public int b;\n\n        public Test()\n        {\n            \n        }\n\n        public void Debug()\n        {\n            Console.WriteLine(a + b);\n        }\n\n    }\n    \n    \n}\n\n```\nTestClass2.cs\n\n```\nnamespace CompileScript.Core\n{\n    class TestClass2\n    {\n        public void Debug()\n        {\n            Test t = new Test();\n            t.Debug();\n        }\n\n    }\n}\n\n```\n\n> 命令行： dotnet CSharp.lua.Launcher.dll -s ../CompileScript/CompileScript/CompileScript/Core -d ../Export\n\n\n在Export 下创建lua工程\n将![截图](/images/csharplua/4.png) copy 到工程，新建main.lua\n\n```\nrequire(\"All\")()\nrequire(\"manifest\")()\n\nlocal baseTime = System.DateTime(1970, 1, 1)\nprint(baseTime:ToString())\n\nlocal t = CompileScript.Core.Test()\nt.a = 10\nt:Debug()\n```\n运行 可以\n\n将![截图](/images/csharplua/5.png) copy 到工程，新建main.lua\n\n\n### 第三方库引用\n\nCompileScript 工程添加Newtonsoft库\n\n```\nusing System;\nusing Newtonsoft.Json;\nnamespace CompileScript.Core\n{\n    public class Test\n    {\n        public int a;\n        public int b;\n\n        public Test()\n        {\n            \n        }\n\n        public void Debug()\n        {\n          \n            Console.WriteLine(a + b);\n\n            Console.WriteLine(JsonConvert.SerializeObject(this));\n        }\n\n    }\n    \n}\n\n```\n编译指令\n\n> G:\\Learning\\CsharpLua\\CSharpLuaTools>dotnet CSharp.lua.Launcher.dll -s ../CompileScript/CompileScript/CompileScript/Core -d ../Export -l ../3rd/Newtonsoft.Json.dll\n\n运行代码 报错\n\n![截图](/images/csharplua/6.png)\n\n\n> 这里第三方库dll的实现需要自己适配\n\n这里适配 NewtonsoftJson.JsonConvert.SerializeObject(this)\n\n\n新建 NewtonsoftJson.lua\n\n\n```\nNewtonsoft = {}\nNewtonsoft.Json = {}\nNewtonsoft.Json.JsonConvert = {}\nNewtonsoft.Json.JsonConvert.SerializeObject = function (obj)\n     return \"todo\"\nend\n\nreturn Newtonsoft\n```\n\nreturn \"todo\"可修改为lua相关的json库，比如cjson\n\n\n### 注意事项\n\n* 第三方库的依赖尽量少依赖\n* 如果有需要查看适配结果，多测试\n* 核心库CoreSystem.Lua 文件夹下的适配了多数System。\n\n### Tip\n\n如果手写Lua 需要调用翻译的lua class 时，如果不知道如何new对象等，参考TestClass2, 创建一个专门的class 用来测试 翻译出的如何new 对象。\n\n\n### 适配踩坑\n\nUnity工程适配 ToLua支持，Xlua 实际测试不支持，如果在Xlua 使用，不得依赖UnityEngine 相关库。\n\n","slug":"Tools/CSharp.lua","published":1,"updated":"2021-06-17T11:12:00.203Z","_id":"ckq0iwwgy0000nwhoghky6wcs","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"CSharpLua\"><a href=\"#CSharpLua\" class=\"headerlink\" title=\"CSharpLua\"></a>CSharpLua</h1><p>一个翻译c#为Lua的工具<br>Git地址<a href=\"https://github.com/yanghuan/CSharp.lua.git\">Charp.lua</a></p>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">D:\\&gt;dotnet CSharp.Lua.Launcher.dll -h</span><br><span class=\"line\">Usage: CSharp.lua [-s srcfolder] [-d dstfolder]</span><br><span class=\"line\">Arguments</span><br><span class=\"line\">-s              : can be a directory where all cs files will be compiled, or a list of files, using &#x27;;&#x27; or &#x27;,&#x27; to separate</span><br><span class=\"line\">-d              : destination directory, will put the out lua files</span><br><span class=\"line\"></span><br><span class=\"line\">Options</span><br><span class=\"line\">-h              : show the help message and exit</span><br><span class=\"line\">-l              : libraries referenced, use &#x27;;&#x27; to separate</span><br><span class=\"line\">                  if the librarie is a module, whitch is compield by CSharp.lua with -module arguemnt, the last character needs to be &#x27;!&#x27; in order to mark  </span><br><span class=\"line\"></span><br><span class=\"line\">-m              : meta files, like System.xml, use &#x27;;&#x27; to separate</span><br><span class=\"line\">-csc            : csc.exe command argumnets, use &#x27; &#x27; or &#x27;\\t&#x27; to separate</span><br><span class=\"line\"></span><br><span class=\"line\">-c              : support classic lua version(5.1), default support 5.3</span><br><span class=\"line\">-a              : attributes need to export, use &#x27;;&#x27; to separate, if &quot;&quot;-a&quot;&quot; only, all attributes whill be exported</span><br><span class=\"line\">-e              : enums need to export, use &#x27;;&#x27; to separate, if &quot;&quot;-e&quot;&quot; only, all enums will be exported</span><br><span class=\"line\">-ei             : enums is represented by a variable reference rather than a constant value, need to be used with -e</span><br><span class=\"line\">-p              : do not use debug.setmetatable, in some Addon/Plugin environment debug object cannot be used</span><br><span class=\"line\">-metadata       : export all metadata, use @CSharpLua.Metadata annotations for precise control</span><br><span class=\"line\">-module         : the currently compiled assembly needs to be referenced, it&#x27;s useful for multiple module compiled</span><br><span class=\"line\">-inline-property: inline some single-line properties</span><br><span class=\"line\">-include        : the root directory of the CoreSystem library, adds all the dependencies to a single file named out.lua</span><br><span class=\"line\">-noconcurrent   : close concurrent compile</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译源码\"><a href=\"#编译源码\" class=\"headerlink\" title=\"编译源码\"></a>编译源码</h3><p>打开 CSharp.lua.sln<br>自己可编译 我这里选择 Release Build</p>\n<p><img src=\"/images/csharplua/2.png\" alt=\"截图\"></p>\n<p>红色标记处为编译成功后</p>\n<p>这里新建一个文件夹将上图红色标记文件拷出</p>\n<p><img src=\"/images/csharplua/3.png\" alt=\"截图\"></p>\n<p>cmd测试： dotnet CSharp.lua.Launcher.dll -h</p>\n<p><img src=\"/images/csharplua/1.png\" alt=\"截图\"></p>\n<h3 id=\"编译c-工程\"><a href=\"#编译c-工程\" class=\"headerlink\" title=\"编译c# 工程\"></a>编译c# 工程</h3><p>lua 使用的 5.3 版本</p>\n<p>新建 CompileScript Console工程,新增文件夹Core<br>创建测试脚本 </p>\n<p>Test.cs</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace CompileScript.Core</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class Test</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public int a;</span><br><span class=\"line\">        public int b;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Test()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void Debug()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(a + b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>TestClass2.cs</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace CompileScript.Core</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    class TestClass2</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public void Debug()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Test t = new Test();</span><br><span class=\"line\">            t.Debug();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>命令行： dotnet CSharp.lua.Launcher.dll -s ../CompileScript/CompileScript/CompileScript/Core -d ../Export</p>\n</blockquote>\n<p>在Export 下创建lua工程<br>将<img src=\"/images/csharplua/4.png\" alt=\"截图\"> copy 到工程，新建main.lua</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require(&quot;All&quot;)()</span><br><span class=\"line\">require(&quot;manifest&quot;)()</span><br><span class=\"line\"></span><br><span class=\"line\">local baseTime = System.DateTime(1970, 1, 1)</span><br><span class=\"line\">print(baseTime:ToString())</span><br><span class=\"line\"></span><br><span class=\"line\">local t = CompileScript.Core.Test()</span><br><span class=\"line\">t.a = 10</span><br><span class=\"line\">t:Debug()</span><br></pre></td></tr></table></figure>\n<p>运行 可以</p>\n<p>将<img src=\"/images/csharplua/5.png\" alt=\"截图\"> copy 到工程，新建main.lua</p>\n<h3 id=\"第三方库引用\"><a href=\"#第三方库引用\" class=\"headerlink\" title=\"第三方库引用\"></a>第三方库引用</h3><p>CompileScript 工程添加Newtonsoft库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using Newtonsoft.Json;</span><br><span class=\"line\">namespace CompileScript.Core</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class Test</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public int a;</span><br><span class=\"line\">        public int b;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Test()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void Debug()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          </span><br><span class=\"line\">            Console.WriteLine(a + b);</span><br><span class=\"line\"></span><br><span class=\"line\">            Console.WriteLine(JsonConvert.SerializeObject(this));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编译指令</p>\n<blockquote>\n<p>G:\\Learning\\CsharpLua\\CSharpLuaTools&gt;dotnet CSharp.lua.Launcher.dll -s ../CompileScript/CompileScript/CompileScript/Core -d ../Export -l ../3rd/Newtonsoft.Json.dll</p>\n</blockquote>\n<p>运行代码 报错</p>\n<p><img src=\"/images/csharplua/6.png\" alt=\"截图\"></p>\n<blockquote>\n<p>这里第三方库dll的实现需要自己适配</p>\n</blockquote>\n<p>这里适配 NewtonsoftJson.JsonConvert.SerializeObject(this)</p>\n<p>新建 NewtonsoftJson.lua</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Newtonsoft = &#123;&#125;</span><br><span class=\"line\">Newtonsoft.Json = &#123;&#125;</span><br><span class=\"line\">Newtonsoft.Json.JsonConvert = &#123;&#125;</span><br><span class=\"line\">Newtonsoft.Json.JsonConvert.SerializeObject = function (obj)</span><br><span class=\"line\">     return &quot;todo&quot;</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">return Newtonsoft</span><br></pre></td></tr></table></figure>\n\n<p>return “todo”可修改为lua相关的json库，比如cjson</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>第三方库的依赖尽量少依赖</li>\n<li>如果有需要查看适配结果，多测试</li>\n<li>核心库CoreSystem.Lua 文件夹下的适配了多数System。</li>\n</ul>\n<h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><p>如果手写Lua 需要调用翻译的lua class 时，如果不知道如何new对象等，参考TestClass2, 创建一个专门的class 用来测试 翻译出的如何new 对象。</p>\n<h3 id=\"适配踩坑\"><a href=\"#适配踩坑\" class=\"headerlink\" title=\"适配踩坑\"></a>适配踩坑</h3><p>Unity工程适配 ToLua支持，Xlua 实际测试不支持，如果在Xlua 使用，不得依赖UnityEngine 相关库。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CSharpLua\"><a href=\"#CSharpLua\" class=\"headerlink\" title=\"CSharpLua\"></a>CSharpLua</h1><p>一个翻译c#为Lua的工具<br>Git地址<a href=\"https://github.com/yanghuan/CSharp.lua.git\">Charp.lua</a></p>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">D:\\&gt;dotnet CSharp.Lua.Launcher.dll -h</span><br><span class=\"line\">Usage: CSharp.lua [-s srcfolder] [-d dstfolder]</span><br><span class=\"line\">Arguments</span><br><span class=\"line\">-s              : can be a directory where all cs files will be compiled, or a list of files, using &#x27;;&#x27; or &#x27;,&#x27; to separate</span><br><span class=\"line\">-d              : destination directory, will put the out lua files</span><br><span class=\"line\"></span><br><span class=\"line\">Options</span><br><span class=\"line\">-h              : show the help message and exit</span><br><span class=\"line\">-l              : libraries referenced, use &#x27;;&#x27; to separate</span><br><span class=\"line\">                  if the librarie is a module, whitch is compield by CSharp.lua with -module arguemnt, the last character needs to be &#x27;!&#x27; in order to mark  </span><br><span class=\"line\"></span><br><span class=\"line\">-m              : meta files, like System.xml, use &#x27;;&#x27; to separate</span><br><span class=\"line\">-csc            : csc.exe command argumnets, use &#x27; &#x27; or &#x27;\\t&#x27; to separate</span><br><span class=\"line\"></span><br><span class=\"line\">-c              : support classic lua version(5.1), default support 5.3</span><br><span class=\"line\">-a              : attributes need to export, use &#x27;;&#x27; to separate, if &quot;&quot;-a&quot;&quot; only, all attributes whill be exported</span><br><span class=\"line\">-e              : enums need to export, use &#x27;;&#x27; to separate, if &quot;&quot;-e&quot;&quot; only, all enums will be exported</span><br><span class=\"line\">-ei             : enums is represented by a variable reference rather than a constant value, need to be used with -e</span><br><span class=\"line\">-p              : do not use debug.setmetatable, in some Addon/Plugin environment debug object cannot be used</span><br><span class=\"line\">-metadata       : export all metadata, use @CSharpLua.Metadata annotations for precise control</span><br><span class=\"line\">-module         : the currently compiled assembly needs to be referenced, it&#x27;s useful for multiple module compiled</span><br><span class=\"line\">-inline-property: inline some single-line properties</span><br><span class=\"line\">-include        : the root directory of the CoreSystem library, adds all the dependencies to a single file named out.lua</span><br><span class=\"line\">-noconcurrent   : close concurrent compile</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译源码\"><a href=\"#编译源码\" class=\"headerlink\" title=\"编译源码\"></a>编译源码</h3><p>打开 CSharp.lua.sln<br>自己可编译 我这里选择 Release Build</p>\n<p><img src=\"/images/csharplua/2.png\" alt=\"截图\"></p>\n<p>红色标记处为编译成功后</p>\n<p>这里新建一个文件夹将上图红色标记文件拷出</p>\n<p><img src=\"/images/csharplua/3.png\" alt=\"截图\"></p>\n<p>cmd测试： dotnet CSharp.lua.Launcher.dll -h</p>\n<p><img src=\"/images/csharplua/1.png\" alt=\"截图\"></p>\n<h3 id=\"编译c-工程\"><a href=\"#编译c-工程\" class=\"headerlink\" title=\"编译c# 工程\"></a>编译c# 工程</h3><p>lua 使用的 5.3 版本</p>\n<p>新建 CompileScript Console工程,新增文件夹Core<br>创建测试脚本 </p>\n<p>Test.cs</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace CompileScript.Core</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class Test</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public int a;</span><br><span class=\"line\">        public int b;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Test()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void Debug()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(a + b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>TestClass2.cs</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace CompileScript.Core</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    class TestClass2</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public void Debug()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Test t = new Test();</span><br><span class=\"line\">            t.Debug();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>命令行： dotnet CSharp.lua.Launcher.dll -s ../CompileScript/CompileScript/CompileScript/Core -d ../Export</p>\n</blockquote>\n<p>在Export 下创建lua工程<br>将<img src=\"/images/csharplua/4.png\" alt=\"截图\"> copy 到工程，新建main.lua</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require(&quot;All&quot;)()</span><br><span class=\"line\">require(&quot;manifest&quot;)()</span><br><span class=\"line\"></span><br><span class=\"line\">local baseTime = System.DateTime(1970, 1, 1)</span><br><span class=\"line\">print(baseTime:ToString())</span><br><span class=\"line\"></span><br><span class=\"line\">local t = CompileScript.Core.Test()</span><br><span class=\"line\">t.a = 10</span><br><span class=\"line\">t:Debug()</span><br></pre></td></tr></table></figure>\n<p>运行 可以</p>\n<p>将<img src=\"/images/csharplua/5.png\" alt=\"截图\"> copy 到工程，新建main.lua</p>\n<h3 id=\"第三方库引用\"><a href=\"#第三方库引用\" class=\"headerlink\" title=\"第三方库引用\"></a>第三方库引用</h3><p>CompileScript 工程添加Newtonsoft库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using Newtonsoft.Json;</span><br><span class=\"line\">namespace CompileScript.Core</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class Test</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public int a;</span><br><span class=\"line\">        public int b;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Test()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void Debug()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          </span><br><span class=\"line\">            Console.WriteLine(a + b);</span><br><span class=\"line\"></span><br><span class=\"line\">            Console.WriteLine(JsonConvert.SerializeObject(this));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编译指令</p>\n<blockquote>\n<p>G:\\Learning\\CsharpLua\\CSharpLuaTools&gt;dotnet CSharp.lua.Launcher.dll -s ../CompileScript/CompileScript/CompileScript/Core -d ../Export -l ../3rd/Newtonsoft.Json.dll</p>\n</blockquote>\n<p>运行代码 报错</p>\n<p><img src=\"/images/csharplua/6.png\" alt=\"截图\"></p>\n<blockquote>\n<p>这里第三方库dll的实现需要自己适配</p>\n</blockquote>\n<p>这里适配 NewtonsoftJson.JsonConvert.SerializeObject(this)</p>\n<p>新建 NewtonsoftJson.lua</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Newtonsoft = &#123;&#125;</span><br><span class=\"line\">Newtonsoft.Json = &#123;&#125;</span><br><span class=\"line\">Newtonsoft.Json.JsonConvert = &#123;&#125;</span><br><span class=\"line\">Newtonsoft.Json.JsonConvert.SerializeObject = function (obj)</span><br><span class=\"line\">     return &quot;todo&quot;</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">return Newtonsoft</span><br></pre></td></tr></table></figure>\n\n<p>return “todo”可修改为lua相关的json库，比如cjson</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>第三方库的依赖尽量少依赖</li>\n<li>如果有需要查看适配结果，多测试</li>\n<li>核心库CoreSystem.Lua 文件夹下的适配了多数System。</li>\n</ul>\n<h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><p>如果手写Lua 需要调用翻译的lua class 时，如果不知道如何new对象等，参考TestClass2, 创建一个专门的class 用来测试 翻译出的如何new 对象。</p>\n<h3 id=\"适配踩坑\"><a href=\"#适配踩坑\" class=\"headerlink\" title=\"适配踩坑\"></a>适配踩坑</h3><p>Unity工程适配 ToLua支持，Xlua 实际测试不支持，如果在Xlua 使用，不得依赖UnityEngine 相关库。</p>\n"},{"title":"GoogleProtobuffer","date":"2021-06-14T04:00:00.000Z","toc":true,"_content":"\n# Protocolbuffers\n\n* [官方git地址](https://github.com/protocolbuffers/protobuf)\n* [官方文档地址](https://developers.google.com/protocol-buffers)\n* [官方Release](https://github.com/protocolbuffers/protobuf/releases)\n* [知乎介绍](https://zhuanlan.zhihu.com/p/38200420)\n\nProtocol Buffers 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，很适合做数据存储或 RPC 数据交换格式。它可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。\n\n常见的数据格式：XML,Json,Protobuf,FlatBuffers 等其它。\n\n* 数据储存\n* 数据交换格式\n\n使用流程：\n\n1.编写Scheme;\n2.使用Protoc 生成代码；\n\n## 下载Release Protoc代码生成工具\n\n> Release中下载Window 或 Mac Os\n![截图](/images/protobuffer/1.png)\n\n### 设置环境变量\n\n在下载程序后，需要将下载 zip 文件中的 bin 目录设置到环境变量中。\n\n然后运行 protoc --version 来确定你的编译运行版本已经被正确配置。\n\n### 使用\n\n[官方文档地址](https://developers.google.com/protocol-buffers)\n\n生成代码命令\n\n> eg:   protoc -- csharp_out=SciptOutFolder/  ProtoFolder/filename.proto\n\n\n### Protocol Buffer 编码原理\n\n采用Varint编码规则\n\n#### Varint编码\n\nvariant是可变长的编码方式,Varint是一种使用一个或多个字节序列化整数的方法，会把整数编码变为长字节，对于32位整型进过Variant编码后需要1-5个字节,小的数字使用1个byte，大的数字使用5个bytes。64位整型数据编码后占用1~10个字节。在实际场景中小数字的使用率远远大于大数字，因此Varint编码对于大部分的场景都可以起到很好的压缩效果。\n\n##### 编码原理\n\n除了最后一个字节外,Varint编码中的每个字节都设置了最高有效位（most significant bit - msb）–msb为1则表明后面的字节还是属于当前数据的,如果是0那么这是当前数据的最后一个字节数据。每个字节的第7位用于以7位为一组存储数字的二进制补码表示，最低有效组在前，或者叫最低有效字节在前。这表明varint编码后数据的字节是按照小端序排列的。\n\n关于字节排列的方式引用一下维基百科上的词条\n> 字节的排列方式有两个通用规则。例如，一个多位的整数，按照存储地址从低到高排序的字节中，如果该整数的最低有效字节（类似于最低有效位）在最高有效字节的前面，则称小端序；反之则称大端序。在网络应用中，字节序是一个必须被考虑的因素，因为不同机器类型可能采用不同标准的字节序，所以均按照网络标准转化。\n\n通俗一点说就是：大端序是按照数字的书写顺序排列的，而小端序是颠倒书写顺序进行排列的。\n\n> variant编码对负数编码效率低","source":"_posts/Tools/GoogleProtobuffer.md","raw":"---\ntitle: GoogleProtobuffer\ncategories: Tools\ntags: GoogleProtobuffer\ndate: 2021-06-14 12:00:00\ntoc: true\n---\n\n# Protocolbuffers\n\n* [官方git地址](https://github.com/protocolbuffers/protobuf)\n* [官方文档地址](https://developers.google.com/protocol-buffers)\n* [官方Release](https://github.com/protocolbuffers/protobuf/releases)\n* [知乎介绍](https://zhuanlan.zhihu.com/p/38200420)\n\nProtocol Buffers 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，很适合做数据存储或 RPC 数据交换格式。它可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。\n\n常见的数据格式：XML,Json,Protobuf,FlatBuffers 等其它。\n\n* 数据储存\n* 数据交换格式\n\n使用流程：\n\n1.编写Scheme;\n2.使用Protoc 生成代码；\n\n## 下载Release Protoc代码生成工具\n\n> Release中下载Window 或 Mac Os\n![截图](/images/protobuffer/1.png)\n\n### 设置环境变量\n\n在下载程序后，需要将下载 zip 文件中的 bin 目录设置到环境变量中。\n\n然后运行 protoc --version 来确定你的编译运行版本已经被正确配置。\n\n### 使用\n\n[官方文档地址](https://developers.google.com/protocol-buffers)\n\n生成代码命令\n\n> eg:   protoc -- csharp_out=SciptOutFolder/  ProtoFolder/filename.proto\n\n\n### Protocol Buffer 编码原理\n\n采用Varint编码规则\n\n#### Varint编码\n\nvariant是可变长的编码方式,Varint是一种使用一个或多个字节序列化整数的方法，会把整数编码变为长字节，对于32位整型进过Variant编码后需要1-5个字节,小的数字使用1个byte，大的数字使用5个bytes。64位整型数据编码后占用1~10个字节。在实际场景中小数字的使用率远远大于大数字，因此Varint编码对于大部分的场景都可以起到很好的压缩效果。\n\n##### 编码原理\n\n除了最后一个字节外,Varint编码中的每个字节都设置了最高有效位（most significant bit - msb）–msb为1则表明后面的字节还是属于当前数据的,如果是0那么这是当前数据的最后一个字节数据。每个字节的第7位用于以7位为一组存储数字的二进制补码表示，最低有效组在前，或者叫最低有效字节在前。这表明varint编码后数据的字节是按照小端序排列的。\n\n关于字节排列的方式引用一下维基百科上的词条\n> 字节的排列方式有两个通用规则。例如，一个多位的整数，按照存储地址从低到高排序的字节中，如果该整数的最低有效字节（类似于最低有效位）在最高有效字节的前面，则称小端序；反之则称大端序。在网络应用中，字节序是一个必须被考虑的因素，因为不同机器类型可能采用不同标准的字节序，所以均按照网络标准转化。\n\n通俗一点说就是：大端序是按照数字的书写顺序排列的，而小端序是颠倒书写顺序进行排列的。\n\n> variant编码对负数编码效率低","slug":"Tools/GoogleProtobuffer","published":1,"updated":"2021-06-16T08:51:50.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq0iwwh10001nwho0hey9jic","content":"<h1 id=\"Protocolbuffers\"><a href=\"#Protocolbuffers\" class=\"headerlink\" title=\"Protocolbuffers\"></a>Protocolbuffers</h1><ul>\n<li><a href=\"https://github.com/protocolbuffers/protobuf\">官方git地址</a></li>\n<li><a href=\"https://developers.google.com/protocol-buffers\">官方文档地址</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/releases\">官方Release</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/38200420\">知乎介绍</a></li>\n</ul>\n<p>Protocol Buffers 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，很适合做数据存储或 RPC 数据交换格式。它可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。</p>\n<p>常见的数据格式：XML,Json,Protobuf,FlatBuffers 等其它。</p>\n<ul>\n<li>数据储存</li>\n<li>数据交换格式</li>\n</ul>\n<p>使用流程：</p>\n<p>1.编写Scheme;<br>2.使用Protoc 生成代码；</p>\n<h2 id=\"下载Release-Protoc代码生成工具\"><a href=\"#下载Release-Protoc代码生成工具\" class=\"headerlink\" title=\"下载Release Protoc代码生成工具\"></a>下载Release Protoc代码生成工具</h2><blockquote>\n<p>Release中下载Window 或 Mac Os<br><img src=\"/images/protobuffer/1.png\" alt=\"截图\"></p>\n</blockquote>\n<h3 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h3><p>在下载程序后，需要将下载 zip 文件中的 bin 目录设置到环境变量中。</p>\n<p>然后运行 protoc –version 来确定你的编译运行版本已经被正确配置。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><a href=\"https://developers.google.com/protocol-buffers\">官方文档地址</a></p>\n<p>生成代码命令</p>\n<blockquote>\n<p>eg:   protoc – csharp_out=SciptOutFolder/  ProtoFolder/filename.proto</p>\n</blockquote>\n<h3 id=\"Protocol-Buffer-编码原理\"><a href=\"#Protocol-Buffer-编码原理\" class=\"headerlink\" title=\"Protocol Buffer 编码原理\"></a>Protocol Buffer 编码原理</h3><p>采用Varint编码规则</p>\n<h4 id=\"Varint编码\"><a href=\"#Varint编码\" class=\"headerlink\" title=\"Varint编码\"></a>Varint编码</h4><p>variant是可变长的编码方式,Varint是一种使用一个或多个字节序列化整数的方法，会把整数编码变为长字节，对于32位整型进过Variant编码后需要1-5个字节,小的数字使用1个byte，大的数字使用5个bytes。64位整型数据编码后占用1~10个字节。在实际场景中小数字的使用率远远大于大数字，因此Varint编码对于大部分的场景都可以起到很好的压缩效果。</p>\n<h5 id=\"编码原理\"><a href=\"#编码原理\" class=\"headerlink\" title=\"编码原理\"></a>编码原理</h5><p>除了最后一个字节外,Varint编码中的每个字节都设置了最高有效位（most significant bit - msb）–msb为1则表明后面的字节还是属于当前数据的,如果是0那么这是当前数据的最后一个字节数据。每个字节的第7位用于以7位为一组存储数字的二进制补码表示，最低有效组在前，或者叫最低有效字节在前。这表明varint编码后数据的字节是按照小端序排列的。</p>\n<p>关于字节排列的方式引用一下维基百科上的词条</p>\n<blockquote>\n<p>字节的排列方式有两个通用规则。例如，一个多位的整数，按照存储地址从低到高排序的字节中，如果该整数的最低有效字节（类似于最低有效位）在最高有效字节的前面，则称小端序；反之则称大端序。在网络应用中，字节序是一个必须被考虑的因素，因为不同机器类型可能采用不同标准的字节序，所以均按照网络标准转化。</p>\n</blockquote>\n<p>通俗一点说就是：大端序是按照数字的书写顺序排列的，而小端序是颠倒书写顺序进行排列的。</p>\n<blockquote>\n<p>variant编码对负数编码效率低</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Protocolbuffers\"><a href=\"#Protocolbuffers\" class=\"headerlink\" title=\"Protocolbuffers\"></a>Protocolbuffers</h1><ul>\n<li><a href=\"https://github.com/protocolbuffers/protobuf\">官方git地址</a></li>\n<li><a href=\"https://developers.google.com/protocol-buffers\">官方文档地址</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/releases\">官方Release</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/38200420\">知乎介绍</a></li>\n</ul>\n<p>Protocol Buffers 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，很适合做数据存储或 RPC 数据交换格式。它可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。</p>\n<p>常见的数据格式：XML,Json,Protobuf,FlatBuffers 等其它。</p>\n<ul>\n<li>数据储存</li>\n<li>数据交换格式</li>\n</ul>\n<p>使用流程：</p>\n<p>1.编写Scheme;<br>2.使用Protoc 生成代码；</p>\n<h2 id=\"下载Release-Protoc代码生成工具\"><a href=\"#下载Release-Protoc代码生成工具\" class=\"headerlink\" title=\"下载Release Protoc代码生成工具\"></a>下载Release Protoc代码生成工具</h2><blockquote>\n<p>Release中下载Window 或 Mac Os<br><img src=\"/images/protobuffer/1.png\" alt=\"截图\"></p>\n</blockquote>\n<h3 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h3><p>在下载程序后，需要将下载 zip 文件中的 bin 目录设置到环境变量中。</p>\n<p>然后运行 protoc –version 来确定你的编译运行版本已经被正确配置。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><a href=\"https://developers.google.com/protocol-buffers\">官方文档地址</a></p>\n<p>生成代码命令</p>\n<blockquote>\n<p>eg:   protoc – csharp_out=SciptOutFolder/  ProtoFolder/filename.proto</p>\n</blockquote>\n<h3 id=\"Protocol-Buffer-编码原理\"><a href=\"#Protocol-Buffer-编码原理\" class=\"headerlink\" title=\"Protocol Buffer 编码原理\"></a>Protocol Buffer 编码原理</h3><p>采用Varint编码规则</p>\n<h4 id=\"Varint编码\"><a href=\"#Varint编码\" class=\"headerlink\" title=\"Varint编码\"></a>Varint编码</h4><p>variant是可变长的编码方式,Varint是一种使用一个或多个字节序列化整数的方法，会把整数编码变为长字节，对于32位整型进过Variant编码后需要1-5个字节,小的数字使用1个byte，大的数字使用5个bytes。64位整型数据编码后占用1~10个字节。在实际场景中小数字的使用率远远大于大数字，因此Varint编码对于大部分的场景都可以起到很好的压缩效果。</p>\n<h5 id=\"编码原理\"><a href=\"#编码原理\" class=\"headerlink\" title=\"编码原理\"></a>编码原理</h5><p>除了最后一个字节外,Varint编码中的每个字节都设置了最高有效位（most significant bit - msb）–msb为1则表明后面的字节还是属于当前数据的,如果是0那么这是当前数据的最后一个字节数据。每个字节的第7位用于以7位为一组存储数字的二进制补码表示，最低有效组在前，或者叫最低有效字节在前。这表明varint编码后数据的字节是按照小端序排列的。</p>\n<p>关于字节排列的方式引用一下维基百科上的词条</p>\n<blockquote>\n<p>字节的排列方式有两个通用规则。例如，一个多位的整数，按照存储地址从低到高排序的字节中，如果该整数的最低有效字节（类似于最低有效位）在最高有效字节的前面，则称小端序；反之则称大端序。在网络应用中，字节序是一个必须被考虑的因素，因为不同机器类型可能采用不同标准的字节序，所以均按照网络标准转化。</p>\n</blockquote>\n<p>通俗一点说就是：大端序是按照数字的书写顺序排列的，而小端序是颠倒书写顺序进行排列的。</p>\n<blockquote>\n<p>variant编码对负数编码效率低</p>\n</blockquote>\n"},{"title":"ECS架构","date":"2021-06-14T04:00:00.000Z","toc":true,"_content":"\n\n> ECS ,即  Entity-Component-System 的缩写，其模式遵循组合优于继承原则，游戏内的每一个单位都是一个实体，每个实体又又一个或多个组件构成，每个组件仅仅包含代表其特性的数据(即在组件中没有任何方法),系统便是来处理拥有一个或多个相同组件的实体集合的工具，其只拥有行为，在这个例子中，处理移动的系统仅仅关心拥有移动能力的实体，它会遍历所有拥有相关组件的实体，并根据相关的数据，更新实体。\n\n\n![截图](/images/ecs/1.png)\n\n\n\n这里核心思路区别于Unity ECS，提供一个设计思路。Unity 后面单独研究下\n\nECS 获取组件较为麻烦。","source":"_posts/U3D/ECS/ECS架构.md","raw":"---\ntitle: ECS架构\ncategories:  U3D\ntags: 框架\ndate: 2021-06-14 12:00:00\ntoc: true\n---\n\n\n> ECS ,即  Entity-Component-System 的缩写，其模式遵循组合优于继承原则，游戏内的每一个单位都是一个实体，每个实体又又一个或多个组件构成，每个组件仅仅包含代表其特性的数据(即在组件中没有任何方法),系统便是来处理拥有一个或多个相同组件的实体集合的工具，其只拥有行为，在这个例子中，处理移动的系统仅仅关心拥有移动能力的实体，它会遍历所有拥有相关组件的实体，并根据相关的数据，更新实体。\n\n\n![截图](/images/ecs/1.png)\n\n\n\n这里核心思路区别于Unity ECS，提供一个设计思路。Unity 后面单独研究下\n\nECS 获取组件较为麻烦。","slug":"U3D/ECS/ECS架构","published":1,"updated":"2022-02-21T11:07:33.626Z","_id":"ckqrp6q0w0000asho4fjx2dl9","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>ECS ,即  Entity-Component-System 的缩写，其模式遵循组合优于继承原则，游戏内的每一个单位都是一个实体，每个实体又又一个或多个组件构成，每个组件仅仅包含代表其特性的数据(即在组件中没有任何方法),系统便是来处理拥有一个或多个相同组件的实体集合的工具，其只拥有行为，在这个例子中，处理移动的系统仅仅关心拥有移动能力的实体，它会遍历所有拥有相关组件的实体，并根据相关的数据，更新实体。</p>\n</blockquote>\n<p><img src=\"/images/ecs/1.png\" alt=\"截图\"></p>\n<p>这里核心思路区别于Unity ECS，提供一个设计思路。Unity 后面单独研究下</p>\n<p>ECS 获取组件较为麻烦。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>ECS ,即  Entity-Component-System 的缩写，其模式遵循组合优于继承原则，游戏内的每一个单位都是一个实体，每个实体又又一个或多个组件构成，每个组件仅仅包含代表其特性的数据(即在组件中没有任何方法),系统便是来处理拥有一个或多个相同组件的实体集合的工具，其只拥有行为，在这个例子中，处理移动的系统仅仅关心拥有移动能力的实体，它会遍历所有拥有相关组件的实体，并根据相关的数据，更新实体。</p>\n</blockquote>\n<p><img src=\"/images/ecs/1.png\" alt=\"截图\"></p>\n<p>这里核心思路区别于Unity ECS，提供一个设计思路。Unity 后面单独研究下</p>\n<p>ECS 获取组件较为麻烦。</p>\n"},{"title":"开发流程-客户端-策划配置数据","date":"2021-06-14T04:00:00.000Z","toc":true,"_content":"\n# 客户端配置数据管理\n\n>开发或上线后不可避免的出现配置逻辑错误问题，系统功能通常会给策划留有很大的配置空间用于铺量和修改，但不可避免的会有错误，这里记录下配置表检查的原则\n\n### 必须检查的情况\n1. id 与其它表格关联\n2. 配置资源路径，必须判断资源是否存在\n3. 配置要求一定得格式，比如约定的分隔符 1;2 分割数组，可能会配置成1,2\n4. 有 type:id  type 不同id 指向不用配置表，必须检查。\n5. 未完待续.....","source":"_posts/开发流程管理/策划配置表管理.md","raw":"---\ntitle: 开发流程-客户端-策划配置数据\ncategories: 开发流程\ntags: 开发流程\ndate: 2021-06-14 12:00:00\ntoc: true\n---\n\n# 客户端配置数据管理\n\n>开发或上线后不可避免的出现配置逻辑错误问题，系统功能通常会给策划留有很大的配置空间用于铺量和修改，但不可避免的会有错误，这里记录下配置表检查的原则\n\n### 必须检查的情况\n1. id 与其它表格关联\n2. 配置资源路径，必须判断资源是否存在\n3. 配置要求一定得格式，比如约定的分隔符 1;2 分割数组，可能会配置成1,2\n4. 有 type:id  type 不同id 指向不用配置表，必须检查。\n5. 未完待续.....","slug":"开发流程管理/策划配置表管理","published":1,"updated":"2021-08-11T09:36:14.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks7ax3mw0000a0ho415bhbt0","content":"<h1 id=\"客户端配置数据管理\"><a href=\"#客户端配置数据管理\" class=\"headerlink\" title=\"客户端配置数据管理\"></a>客户端配置数据管理</h1><blockquote>\n<p>开发或上线后不可避免的出现配置逻辑错误问题，系统功能通常会给策划留有很大的配置空间用于铺量和修改，但不可避免的会有错误，这里记录下配置表检查的原则</p>\n</blockquote>\n<h3 id=\"必须检查的情况\"><a href=\"#必须检查的情况\" class=\"headerlink\" title=\"必须检查的情况\"></a>必须检查的情况</h3><ol>\n<li>id 与其它表格关联</li>\n<li>配置资源路径，必须判断资源是否存在</li>\n<li>配置要求一定得格式，比如约定的分隔符 1;2 分割数组，可能会配置成1,2</li>\n<li>有 type:id  type 不同id 指向不用配置表，必须检查。</li>\n<li>未完待续…..</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"客户端配置数据管理\"><a href=\"#客户端配置数据管理\" class=\"headerlink\" title=\"客户端配置数据管理\"></a>客户端配置数据管理</h1><blockquote>\n<p>开发或上线后不可避免的出现配置逻辑错误问题，系统功能通常会给策划留有很大的配置空间用于铺量和修改，但不可避免的会有错误，这里记录下配置表检查的原则</p>\n</blockquote>\n<h3 id=\"必须检查的情况\"><a href=\"#必须检查的情况\" class=\"headerlink\" title=\"必须检查的情况\"></a>必须检查的情况</h3><ol>\n<li>id 与其它表格关联</li>\n<li>配置资源路径，必须判断资源是否存在</li>\n<li>配置要求一定得格式，比如约定的分隔符 1;2 分割数组，可能会配置成1,2</li>\n<li>有 type:id  type 不同id 指向不用配置表，必须检查。</li>\n<li>未完待续…..</li>\n</ol>\n"},{"title":"cmd-常用命令","date":"2021-06-14T04:00:00.000Z","toc":true,"_content":"\n###  ipconfig /flushdns\n\n### ipconfig\n\n### ping\n\n### cd\n\n","source":"_posts/cmd.md","raw":"---\ntitle: cmd-常用命令\ncategories: shell\ntags: shell\ndate: 2021-06-14 12:00:00\ntoc: true\n---\n\n###  ipconfig /flushdns\n\n### ipconfig\n\n### ping\n\n### cd\n\n","slug":"cmd","published":1,"updated":"2021-08-11T09:49:52.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks7bah9l0000vohoaro8a1b4","content":"<h3 id=\"ipconfig-flushdns\"><a href=\"#ipconfig-flushdns\" class=\"headerlink\" title=\"ipconfig /flushdns\"></a>ipconfig /flushdns</h3><h3 id=\"ipconfig\"><a href=\"#ipconfig\" class=\"headerlink\" title=\"ipconfig\"></a>ipconfig</h3><h3 id=\"ping\"><a href=\"#ping\" class=\"headerlink\" title=\"ping\"></a>ping</h3><h3 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ipconfig-flushdns\"><a href=\"#ipconfig-flushdns\" class=\"headerlink\" title=\"ipconfig /flushdns\"></a>ipconfig /flushdns</h3><h3 id=\"ipconfig\"><a href=\"#ipconfig\" class=\"headerlink\" title=\"ipconfig\"></a>ipconfig</h3><h3 id=\"ping\"><a href=\"#ping\" class=\"headerlink\" title=\"ping\"></a>ping</h3><h3 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h3>"},{"title":"1.从Unlit-Color开始入手","date":"2021-06-14T04:00:00.000Z","toc":true,"_content":"\n\n# Shader 源码-Unlit-Color\n\n需要有一定的shader基础，深刻理解unity 内置shader的实现原里。\n\n> 先贴代码，逐步分析\n```\n// Unity built-in shader source. Copyright (c) 2016 Unity Technologies. MIT license (see license.txt)\n\n// Unlit shader. Simplest possible colored shader.\n// - no lighting\n// - no lightmap support\n// - no texture\n\nShader \"Unlit/Color\"\n{\n    Properties\n    {\n        _Color (\"Main Color\", Color) = (1, 1, 1, 1)\n    }\n\n    SubShader\n    {\n        Tags { \"RenderType\" = \"Opaque\" }\n        LOD 100\n\n        Pass\n        {\n            CGPROGRAM\n            \n            #pragma vertex vert\n            #pragma fragment frag\n            #pragma target 2.0\n            #pragma multi_compile_fog\n\n            #include \"UnityCG.cginc\"\n\n            struct appdata_t\n            {\n                float4 vertex: POSITION;\n                UNITY_VERTEX_INPUT_INSTANCE_ID\n            };\n\n            struct v2f\n            {\n                float4 vertex: SV_POSITION;\n                UNITY_FOG_COORDS(0)\n                UNITY_VERTEX_OUTPUT_STEREO\n            };\n\n            fixed4 _Color;\n\n            v2f vert(appdata_t v)\n            {\n                v2f o;\n                UNITY_SETUP_INSTANCE_ID(v);\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n                o.vertex = UnityObjectToClipPos(v.vertex);\n                UNITY_TRANSFER_FOG(o, o.vertex);\n                return o;\n            }\n\n            fixed4 frag(v2f i): SV_Target\n            {\n                fixed4 col = _Color;\n                UNITY_APPLY_FOG(i.fogCoord, col);\n                UNITY_OPAQUE_ALPHA(col.a);\n                return col;\n            }\n            ENDCG\n            \n        }\n    }\n}\n\n```\n\n## #pragma multi_compile_fog\n\n实现很简单，重点点记录\n\n- #pragma multi_compile_fog\n- UNITY_VERTEX_INPUT_INSTANCE_ID\n- UNITY_FOG_COORDS(0)\n- UNITY_VERTEX_OUTPUT_STEREO\n- UNITY_SETUP_INSTANCE_ID(v)\n- UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o)\n- UNITY_TRANSFER_FOG(o, o.vertex)\n- UNITY_APPLY_FOG(i.fogCoord, col)\n- UNITY_OPAQUE_ALPHA(col.a)\n\n这些在一个基础的顶点片元着色器的基本原里。\n\n### 基础概念宏定义\n\n```\n#define 标识  //定义标识，如果 （标识） 已经被标识过会报错。\n#undef 标识   //取消标识的定义\n#ifdef 标识   //判断某个宏是否被定义，若已定义，执行随后的语句\n#ifndef 标示  // 判断\"标示\"是否定义，如果被定义则返回false，如果没有被定义则返回true\n\n#if           //编译预处理中的条件命令，相当于C语法中的if语句\n#elif         // 若#if, #ifdef, #ifndef或前面的#elif条件不满足，则执行#elif之后的语句，相当于C语法中的else-if\n#else         //与#if, #ifdef, #ifndef对应, 若这些条件不满足，则执行#else之后的语句，相当于C语法中的else\n#endif        //#if, #ifdef, #ifndef这些条件命令的结束标志.  \ndefined(宏)        与#if, #elif配合使用，判断某个宏是否被定义\n```\n\n###  #include \"UnityCG.cginc\"\n\n这里需要注意下,include并不是像c++ 这样在调用shader时将文件include进去，而是在编译shader时决定生成的代码。可以测试在去掉#pragma multi_compile_fog前后点击shader面板 Compile and show code 查看编译后的代码。\n\n追到UnityCG.cginc文件中查看UNITY_FOG_COORDS宏\n\n```\n#if defined(FOG_LINEAR) || defined(FOG_EXP) || defined(FOG_EXP2)\n    #define UNITY_FOG_COORDS(idx) UNITY_FOG_COORDS_PACKED(idx, float1)\n\n    #if (SHADER_TARGET < 30) || defined(SHADER_API_MOBILE)\n        // mobile or SM2.0: calculate fog factor per-vertex\n        #define UNITY_TRANSFER_FOG(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.fogCoord.x = unityFogFactor\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.tSpace1.y = tangentSign; o.tSpace2.y = unityFogFactor\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.worldPos.w = unityFogFactor\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.eyeVec.w = unityFogFactor\n    #else\n        // SM3.0 and PC/console: calculate fog distance per-vertex, and fog factor per-pixel\n        #define UNITY_TRANSFER_FOG(o,outpos) o.fogCoord.x = (outpos).z\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos) o.tSpace2.y = (outpos).z\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos) o.worldPos.w = (outpos).z\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos) o.eyeVec.w = (outpos).z\n    #endif\n#else\n    #define UNITY_FOG_COORDS(idx)\n    #define UNITY_TRANSFER_FOG(o,outpos)\n    #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos)\n    #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos)\n    #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos)\n#endif\n```\n当开启Fog时 \n```\n #define UNITY_FOG_COORDS(idx) UNITY_FOG_COORDS_PACKED(idx, float1)\n```\n\n>UNITY_FOG_COORDS_PACKED\n```\n#define UNITY_FOG_COORDS_PACKED(idx, vectype) vectype fogCoord : TEXCOORD##idx;\n```\n\n可知实际 UNITY_FOG_COORDS(0) 如果Fog开启,相当一在片元数据中定义了\n\n```\nfloat1 fogCoord : TEXCOORD0\n```\n\n> UNITY_TRANSFER_FOG\n\n```\n \n#if defined(FOG_LINEAR) || defined(FOG_EXP) || defined(FOG_EXP2)\n    #define UNITY_FOG_COORDS(idx) UNITY_FOG_COORDS_PACKED(idx, float1)\n\n    #if (SHADER_TARGET < 30) || defined(SHADER_API_MOBILE)\n        // mobile or SM2.0: calculate fog factor per-vertex\n        #define UNITY_TRANSFER_FOG(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.fogCoord.x = unityFogFactor\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.tSpace1.y = tangentSign; o.tSpace2.y = unityFogFactor\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.worldPos.w = unityFogFactor\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.eyeVec.w = unityFogFactor\n    #else\n        // SM3.0 and PC/console: calculate fog distance per-vertex, and fog factor per-pixel\n        #define UNITY_TRANSFER_FOG(o,outpos) o.fogCoord.x = (outpos).z\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos) o.tSpace2.y = (outpos).z\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos) o.worldPos.w = (outpos).z\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos) o.eyeVec.w = (outpos).z\n    #endif\n#else\n    #define UNITY_FOG_COORDS(idx)\n    #define UNITY_TRANSFER_FOG(o,outpos)\n    #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos)\n    #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos)\n    #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos)\n#endif\n\n```\n\n因为   #pragma target 2.0 时 SHADER_TARGET <30 所以\n\n```\n\n#if defined(FOG_LINEAR)\n    // factor = (end-z)/(end-start) = z * (-1/(end-start)) + (end/(end-start))\n    #define UNITY_CALC_FOG_FACTOR_RAW(coord) float unityFogFactor = (coord) * unity_FogParams.z + unity_FogParams.w\n#elif defined(FOG_EXP)\n    // factor = exp(-density*z)\n    #define UNITY_CALC_FOG_FACTOR_RAW(coord) float unityFogFactor = unity_FogParams.y * (coord); unityFogFactor = exp2(-unityFogFactor)\n#elif defined(FOG_EXP2)\n    // factor = exp(-(density*z)^2)\n    #define UNITY_CALC_FOG_FACTOR_RAW(coord) float unityFogFactor = unity_FogParams.x * (coord); unityFogFactor = exp2(-unityFogFactor*unityFogFactor)\n#else\n    #define UNITY_CALC_FOG_FACTOR_RAW(coord) float unityFogFactor = 0.0\n#endif\n\n\n#define UNITY_CALC_FOG_FACTOR(coord) UNITY_CALC_FOG_FACTOR_RAW(UNITY_Z_0_FAR_FROM_CLIPSPACE(coord))\n\n #define UNITY_TRANSFER_FOG(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.fogCoord.x = unityFogFactor\n\n```\n> \n可以追溯宏定义的运算 得到 fogCoord值,并在 UNITY_APPLY_FOG(i.fogCoord, col);得到新得col值。\n\n### 备注\nINSTANCE 和FOG 会在后面补充，这里只记录shader分析的一个过程。\n","source":"_posts/Shader/1笔记_builtin_shaders_Unlit-Color.md","raw":"---\ntitle: 1.从Unlit-Color开始入手\ncategories: ShaderLab\ntags: builtin_shaders\ndate: 2021-06-14 12:00:00\ntoc: true\n---\n\n\n# Shader 源码-Unlit-Color\n\n需要有一定的shader基础，深刻理解unity 内置shader的实现原里。\n\n> 先贴代码，逐步分析\n```\n// Unity built-in shader source. Copyright (c) 2016 Unity Technologies. MIT license (see license.txt)\n\n// Unlit shader. Simplest possible colored shader.\n// - no lighting\n// - no lightmap support\n// - no texture\n\nShader \"Unlit/Color\"\n{\n    Properties\n    {\n        _Color (\"Main Color\", Color) = (1, 1, 1, 1)\n    }\n\n    SubShader\n    {\n        Tags { \"RenderType\" = \"Opaque\" }\n        LOD 100\n\n        Pass\n        {\n            CGPROGRAM\n            \n            #pragma vertex vert\n            #pragma fragment frag\n            #pragma target 2.0\n            #pragma multi_compile_fog\n\n            #include \"UnityCG.cginc\"\n\n            struct appdata_t\n            {\n                float4 vertex: POSITION;\n                UNITY_VERTEX_INPUT_INSTANCE_ID\n            };\n\n            struct v2f\n            {\n                float4 vertex: SV_POSITION;\n                UNITY_FOG_COORDS(0)\n                UNITY_VERTEX_OUTPUT_STEREO\n            };\n\n            fixed4 _Color;\n\n            v2f vert(appdata_t v)\n            {\n                v2f o;\n                UNITY_SETUP_INSTANCE_ID(v);\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n                o.vertex = UnityObjectToClipPos(v.vertex);\n                UNITY_TRANSFER_FOG(o, o.vertex);\n                return o;\n            }\n\n            fixed4 frag(v2f i): SV_Target\n            {\n                fixed4 col = _Color;\n                UNITY_APPLY_FOG(i.fogCoord, col);\n                UNITY_OPAQUE_ALPHA(col.a);\n                return col;\n            }\n            ENDCG\n            \n        }\n    }\n}\n\n```\n\n## #pragma multi_compile_fog\n\n实现很简单，重点点记录\n\n- #pragma multi_compile_fog\n- UNITY_VERTEX_INPUT_INSTANCE_ID\n- UNITY_FOG_COORDS(0)\n- UNITY_VERTEX_OUTPUT_STEREO\n- UNITY_SETUP_INSTANCE_ID(v)\n- UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o)\n- UNITY_TRANSFER_FOG(o, o.vertex)\n- UNITY_APPLY_FOG(i.fogCoord, col)\n- UNITY_OPAQUE_ALPHA(col.a)\n\n这些在一个基础的顶点片元着色器的基本原里。\n\n### 基础概念宏定义\n\n```\n#define 标识  //定义标识，如果 （标识） 已经被标识过会报错。\n#undef 标识   //取消标识的定义\n#ifdef 标识   //判断某个宏是否被定义，若已定义，执行随后的语句\n#ifndef 标示  // 判断\"标示\"是否定义，如果被定义则返回false，如果没有被定义则返回true\n\n#if           //编译预处理中的条件命令，相当于C语法中的if语句\n#elif         // 若#if, #ifdef, #ifndef或前面的#elif条件不满足，则执行#elif之后的语句，相当于C语法中的else-if\n#else         //与#if, #ifdef, #ifndef对应, 若这些条件不满足，则执行#else之后的语句，相当于C语法中的else\n#endif        //#if, #ifdef, #ifndef这些条件命令的结束标志.  \ndefined(宏)        与#if, #elif配合使用，判断某个宏是否被定义\n```\n\n###  #include \"UnityCG.cginc\"\n\n这里需要注意下,include并不是像c++ 这样在调用shader时将文件include进去，而是在编译shader时决定生成的代码。可以测试在去掉#pragma multi_compile_fog前后点击shader面板 Compile and show code 查看编译后的代码。\n\n追到UnityCG.cginc文件中查看UNITY_FOG_COORDS宏\n\n```\n#if defined(FOG_LINEAR) || defined(FOG_EXP) || defined(FOG_EXP2)\n    #define UNITY_FOG_COORDS(idx) UNITY_FOG_COORDS_PACKED(idx, float1)\n\n    #if (SHADER_TARGET < 30) || defined(SHADER_API_MOBILE)\n        // mobile or SM2.0: calculate fog factor per-vertex\n        #define UNITY_TRANSFER_FOG(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.fogCoord.x = unityFogFactor\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.tSpace1.y = tangentSign; o.tSpace2.y = unityFogFactor\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.worldPos.w = unityFogFactor\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.eyeVec.w = unityFogFactor\n    #else\n        // SM3.0 and PC/console: calculate fog distance per-vertex, and fog factor per-pixel\n        #define UNITY_TRANSFER_FOG(o,outpos) o.fogCoord.x = (outpos).z\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos) o.tSpace2.y = (outpos).z\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos) o.worldPos.w = (outpos).z\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos) o.eyeVec.w = (outpos).z\n    #endif\n#else\n    #define UNITY_FOG_COORDS(idx)\n    #define UNITY_TRANSFER_FOG(o,outpos)\n    #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos)\n    #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos)\n    #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos)\n#endif\n```\n当开启Fog时 \n```\n #define UNITY_FOG_COORDS(idx) UNITY_FOG_COORDS_PACKED(idx, float1)\n```\n\n>UNITY_FOG_COORDS_PACKED\n```\n#define UNITY_FOG_COORDS_PACKED(idx, vectype) vectype fogCoord : TEXCOORD##idx;\n```\n\n可知实际 UNITY_FOG_COORDS(0) 如果Fog开启,相当一在片元数据中定义了\n\n```\nfloat1 fogCoord : TEXCOORD0\n```\n\n> UNITY_TRANSFER_FOG\n\n```\n \n#if defined(FOG_LINEAR) || defined(FOG_EXP) || defined(FOG_EXP2)\n    #define UNITY_FOG_COORDS(idx) UNITY_FOG_COORDS_PACKED(idx, float1)\n\n    #if (SHADER_TARGET < 30) || defined(SHADER_API_MOBILE)\n        // mobile or SM2.0: calculate fog factor per-vertex\n        #define UNITY_TRANSFER_FOG(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.fogCoord.x = unityFogFactor\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.tSpace1.y = tangentSign; o.tSpace2.y = unityFogFactor\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.worldPos.w = unityFogFactor\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.eyeVec.w = unityFogFactor\n    #else\n        // SM3.0 and PC/console: calculate fog distance per-vertex, and fog factor per-pixel\n        #define UNITY_TRANSFER_FOG(o,outpos) o.fogCoord.x = (outpos).z\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos) o.tSpace2.y = (outpos).z\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos) o.worldPos.w = (outpos).z\n        #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos) o.eyeVec.w = (outpos).z\n    #endif\n#else\n    #define UNITY_FOG_COORDS(idx)\n    #define UNITY_TRANSFER_FOG(o,outpos)\n    #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos)\n    #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos)\n    #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos)\n#endif\n\n```\n\n因为   #pragma target 2.0 时 SHADER_TARGET <30 所以\n\n```\n\n#if defined(FOG_LINEAR)\n    // factor = (end-z)/(end-start) = z * (-1/(end-start)) + (end/(end-start))\n    #define UNITY_CALC_FOG_FACTOR_RAW(coord) float unityFogFactor = (coord) * unity_FogParams.z + unity_FogParams.w\n#elif defined(FOG_EXP)\n    // factor = exp(-density*z)\n    #define UNITY_CALC_FOG_FACTOR_RAW(coord) float unityFogFactor = unity_FogParams.y * (coord); unityFogFactor = exp2(-unityFogFactor)\n#elif defined(FOG_EXP2)\n    // factor = exp(-(density*z)^2)\n    #define UNITY_CALC_FOG_FACTOR_RAW(coord) float unityFogFactor = unity_FogParams.x * (coord); unityFogFactor = exp2(-unityFogFactor*unityFogFactor)\n#else\n    #define UNITY_CALC_FOG_FACTOR_RAW(coord) float unityFogFactor = 0.0\n#endif\n\n\n#define UNITY_CALC_FOG_FACTOR(coord) UNITY_CALC_FOG_FACTOR_RAW(UNITY_Z_0_FAR_FROM_CLIPSPACE(coord))\n\n #define UNITY_TRANSFER_FOG(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.fogCoord.x = unityFogFactor\n\n```\n> \n可以追溯宏定义的运算 得到 fogCoord值,并在 UNITY_APPLY_FOG(i.fogCoord, col);得到新得col值。\n\n### 备注\nINSTANCE 和FOG 会在后面补充，这里只记录shader分析的一个过程。\n","slug":"Shader/1笔记_builtin_shaders_Unlit-Color","published":1,"updated":"2022-02-21T11:10:49.482Z","_id":"cks8p0dbi0000y8hoey95cpd4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Shader-源码-Unlit-Color\"><a href=\"#Shader-源码-Unlit-Color\" class=\"headerlink\" title=\"Shader 源码-Unlit-Color\"></a>Shader 源码-Unlit-Color</h1><p>需要有一定的shader基础，深刻理解unity 内置shader的实现原里。</p>\n<blockquote>\n<p>先贴代码，逐步分析</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Unity built-in shader source. Copyright (c) 2016 Unity Technologies. MIT license (see license.txt)</span><br><span class=\"line\"></span><br><span class=\"line\">// Unlit shader. Simplest possible colored shader.</span><br><span class=\"line\">// - no lighting</span><br><span class=\"line\">// - no lightmap support</span><br><span class=\"line\">// - no texture</span><br><span class=\"line\"></span><br><span class=\"line\">Shader &quot;Unlit/Color&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Properties</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _Color (&quot;Main Color&quot;, Color) = (1, 1, 1, 1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    SubShader</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Tags &#123; &quot;RenderType&quot; = &quot;Opaque&quot; &#125;</span><br><span class=\"line\">        LOD 100</span><br><span class=\"line\"></span><br><span class=\"line\">        Pass</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            CGPROGRAM</span><br><span class=\"line\">            </span><br><span class=\"line\">            #pragma vertex vert</span><br><span class=\"line\">            #pragma fragment frag</span><br><span class=\"line\">            #pragma target 2.0</span><br><span class=\"line\">            #pragma multi_compile_fog</span><br><span class=\"line\"></span><br><span class=\"line\">            #include &quot;UnityCG.cginc&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">            struct appdata_t</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                float4 vertex: POSITION;</span><br><span class=\"line\">                UNITY_VERTEX_INPUT_INSTANCE_ID</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            struct v2f</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                float4 vertex: SV_POSITION;</span><br><span class=\"line\">                UNITY_FOG_COORDS(0)</span><br><span class=\"line\">                UNITY_VERTEX_OUTPUT_STEREO</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            fixed4 _Color;</span><br><span class=\"line\"></span><br><span class=\"line\">            v2f vert(appdata_t v)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                v2f o;</span><br><span class=\"line\">                UNITY_SETUP_INSTANCE_ID(v);</span><br><span class=\"line\">                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);</span><br><span class=\"line\">                o.vertex = UnityObjectToClipPos(v.vertex);</span><br><span class=\"line\">                UNITY_TRANSFER_FOG(o, o.vertex);</span><br><span class=\"line\">                return o;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            fixed4 frag(v2f i): SV_Target</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                fixed4 col = _Color;</span><br><span class=\"line\">                UNITY_APPLY_FOG(i.fogCoord, col);</span><br><span class=\"line\">                UNITY_OPAQUE_ALPHA(col.a);</span><br><span class=\"line\">                return col;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ENDCG</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pragma-multi-compile-fog\"><a href=\"#pragma-multi-compile-fog\" class=\"headerlink\" title=\"#pragma multi_compile_fog\"></a>#pragma multi_compile_fog</h2><p>实现很简单，重点点记录</p>\n<ul>\n<li>#pragma multi_compile_fog</li>\n<li>UNITY_VERTEX_INPUT_INSTANCE_ID</li>\n<li>UNITY_FOG_COORDS(0)</li>\n<li>UNITY_VERTEX_OUTPUT_STEREO</li>\n<li>UNITY_SETUP_INSTANCE_ID(v)</li>\n<li>UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o)</li>\n<li>UNITY_TRANSFER_FOG(o, o.vertex)</li>\n<li>UNITY_APPLY_FOG(i.fogCoord, col)</li>\n<li>UNITY_OPAQUE_ALPHA(col.a)</li>\n</ul>\n<p>这些在一个基础的顶点片元着色器的基本原里。</p>\n<h3 id=\"基础概念宏定义\"><a href=\"#基础概念宏定义\" class=\"headerlink\" title=\"基础概念宏定义\"></a>基础概念宏定义</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define 标识  //定义标识，如果 （标识） 已经被标识过会报错。</span><br><span class=\"line\">#undef 标识   //取消标识的定义</span><br><span class=\"line\">#ifdef 标识   //判断某个宏是否被定义，若已定义，执行随后的语句</span><br><span class=\"line\">#ifndef 标示  // 判断&quot;标示&quot;是否定义，如果被定义则返回false，如果没有被定义则返回true</span><br><span class=\"line\"></span><br><span class=\"line\">#if           //编译预处理中的条件命令，相当于C语法中的if语句</span><br><span class=\"line\">#elif         // 若#if, #ifdef, #ifndef或前面的#elif条件不满足，则执行#elif之后的语句，相当于C语法中的else-if</span><br><span class=\"line\">#else         //与#if, #ifdef, #ifndef对应, 若这些条件不满足，则执行#else之后的语句，相当于C语法中的else</span><br><span class=\"line\">#endif        //#if, #ifdef, #ifndef这些条件命令的结束标志.  </span><br><span class=\"line\">defined(宏)        与#if, #elif配合使用，判断某个宏是否被定义</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"include-“UnityCG-cginc”\"><a href=\"#include-“UnityCG-cginc”\" class=\"headerlink\" title=\"#include “UnityCG.cginc”\"></a>#include “UnityCG.cginc”</h3><p>这里需要注意下,include并不是像c++ 这样在调用shader时将文件include进去，而是在编译shader时决定生成的代码。可以测试在去掉#pragma multi_compile_fog前后点击shader面板 Compile and show code 查看编译后的代码。</p>\n<p>追到UnityCG.cginc文件中查看UNITY_FOG_COORDS宏</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#if defined(FOG_LINEAR) || defined(FOG_EXP) || defined(FOG_EXP2)</span><br><span class=\"line\">    #define UNITY_FOG_COORDS(idx) UNITY_FOG_COORDS_PACKED(idx, float1)</span><br><span class=\"line\"></span><br><span class=\"line\">    #if (SHADER_TARGET &lt; 30) || defined(SHADER_API_MOBILE)</span><br><span class=\"line\">        // mobile or SM2.0: calculate fog factor per-vertex</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.fogCoord.x = unityFogFactor</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.tSpace1.y = tangentSign; o.tSpace2.y = unityFogFactor</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.worldPos.w = unityFogFactor</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.eyeVec.w = unityFogFactor</span><br><span class=\"line\">    #else</span><br><span class=\"line\">        // SM3.0 and PC/console: calculate fog distance per-vertex, and fog factor per-pixel</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG(o,outpos) o.fogCoord.x = (outpos).z</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos) o.tSpace2.y = (outpos).z</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos) o.worldPos.w = (outpos).z</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos) o.eyeVec.w = (outpos).z</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">#else</span><br><span class=\"line\">    #define UNITY_FOG_COORDS(idx)</span><br><span class=\"line\">    #define UNITY_TRANSFER_FOG(o,outpos)</span><br><span class=\"line\">    #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos)</span><br><span class=\"line\">    #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos)</span><br><span class=\"line\">    #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos)</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<p>当开启Fog时 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define UNITY_FOG_COORDS(idx) UNITY_FOG_COORDS_PACKED(idx, float1)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>UNITY_FOG_COORDS_PACKED</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define UNITY_FOG_COORDS_PACKED(idx, vectype) vectype fogCoord : TEXCOORD##idx;</span><br></pre></td></tr></table></figure>\n\n<p>可知实际 UNITY_FOG_COORDS(0) 如果Fog开启,相当一在片元数据中定义了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float1 fogCoord : TEXCOORD0</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>UNITY_TRANSFER_FOG</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">#if defined(FOG_LINEAR) || defined(FOG_EXP) || defined(FOG_EXP2)</span><br><span class=\"line\">    #define UNITY_FOG_COORDS(idx) UNITY_FOG_COORDS_PACKED(idx, float1)</span><br><span class=\"line\"></span><br><span class=\"line\">    #if (SHADER_TARGET &lt; 30) || defined(SHADER_API_MOBILE)</span><br><span class=\"line\">        // mobile or SM2.0: calculate fog factor per-vertex</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.fogCoord.x = unityFogFactor</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.tSpace1.y = tangentSign; o.tSpace2.y = unityFogFactor</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.worldPos.w = unityFogFactor</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.eyeVec.w = unityFogFactor</span><br><span class=\"line\">    #else</span><br><span class=\"line\">        // SM3.0 and PC/console: calculate fog distance per-vertex, and fog factor per-pixel</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG(o,outpos) o.fogCoord.x = (outpos).z</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos) o.tSpace2.y = (outpos).z</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos) o.worldPos.w = (outpos).z</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos) o.eyeVec.w = (outpos).z</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">#else</span><br><span class=\"line\">    #define UNITY_FOG_COORDS(idx)</span><br><span class=\"line\">    #define UNITY_TRANSFER_FOG(o,outpos)</span><br><span class=\"line\">    #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos)</span><br><span class=\"line\">    #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos)</span><br><span class=\"line\">    #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos)</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>因为   #pragma target 2.0 时 SHADER_TARGET &lt;30 所以</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#if defined(FOG_LINEAR)</span><br><span class=\"line\">    // factor = (end-z)/(end-start) = z * (-1/(end-start)) + (end/(end-start))</span><br><span class=\"line\">    #define UNITY_CALC_FOG_FACTOR_RAW(coord) float unityFogFactor = (coord) * unity_FogParams.z + unity_FogParams.w</span><br><span class=\"line\">#elif defined(FOG_EXP)</span><br><span class=\"line\">    // factor = exp(-density*z)</span><br><span class=\"line\">    #define UNITY_CALC_FOG_FACTOR_RAW(coord) float unityFogFactor = unity_FogParams.y * (coord); unityFogFactor = exp2(-unityFogFactor)</span><br><span class=\"line\">#elif defined(FOG_EXP2)</span><br><span class=\"line\">    // factor = exp(-(density*z)^2)</span><br><span class=\"line\">    #define UNITY_CALC_FOG_FACTOR_RAW(coord) float unityFogFactor = unity_FogParams.x * (coord); unityFogFactor = exp2(-unityFogFactor*unityFogFactor)</span><br><span class=\"line\">#else</span><br><span class=\"line\">    #define UNITY_CALC_FOG_FACTOR_RAW(coord) float unityFogFactor = 0.0</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#define UNITY_CALC_FOG_FACTOR(coord) UNITY_CALC_FOG_FACTOR_RAW(UNITY_Z_0_FAR_FROM_CLIPSPACE(coord))</span><br><span class=\"line\"></span><br><span class=\"line\"> #define UNITY_TRANSFER_FOG(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.fogCoord.x = unityFogFactor</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n</blockquote>\n<p>可以追溯宏定义的运算 得到 fogCoord值,并在 UNITY_APPLY_FOG(i.fogCoord, col);得到新得col值。</p>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>INSTANCE 和FOG 会在后面补充，这里只记录shader分析的一个过程。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Shader-源码-Unlit-Color\"><a href=\"#Shader-源码-Unlit-Color\" class=\"headerlink\" title=\"Shader 源码-Unlit-Color\"></a>Shader 源码-Unlit-Color</h1><p>需要有一定的shader基础，深刻理解unity 内置shader的实现原里。</p>\n<blockquote>\n<p>先贴代码，逐步分析</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Unity built-in shader source. Copyright (c) 2016 Unity Technologies. MIT license (see license.txt)</span><br><span class=\"line\"></span><br><span class=\"line\">// Unlit shader. Simplest possible colored shader.</span><br><span class=\"line\">// - no lighting</span><br><span class=\"line\">// - no lightmap support</span><br><span class=\"line\">// - no texture</span><br><span class=\"line\"></span><br><span class=\"line\">Shader &quot;Unlit/Color&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Properties</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _Color (&quot;Main Color&quot;, Color) = (1, 1, 1, 1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    SubShader</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Tags &#123; &quot;RenderType&quot; = &quot;Opaque&quot; &#125;</span><br><span class=\"line\">        LOD 100</span><br><span class=\"line\"></span><br><span class=\"line\">        Pass</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            CGPROGRAM</span><br><span class=\"line\">            </span><br><span class=\"line\">            #pragma vertex vert</span><br><span class=\"line\">            #pragma fragment frag</span><br><span class=\"line\">            #pragma target 2.0</span><br><span class=\"line\">            #pragma multi_compile_fog</span><br><span class=\"line\"></span><br><span class=\"line\">            #include &quot;UnityCG.cginc&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">            struct appdata_t</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                float4 vertex: POSITION;</span><br><span class=\"line\">                UNITY_VERTEX_INPUT_INSTANCE_ID</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            struct v2f</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                float4 vertex: SV_POSITION;</span><br><span class=\"line\">                UNITY_FOG_COORDS(0)</span><br><span class=\"line\">                UNITY_VERTEX_OUTPUT_STEREO</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            fixed4 _Color;</span><br><span class=\"line\"></span><br><span class=\"line\">            v2f vert(appdata_t v)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                v2f o;</span><br><span class=\"line\">                UNITY_SETUP_INSTANCE_ID(v);</span><br><span class=\"line\">                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);</span><br><span class=\"line\">                o.vertex = UnityObjectToClipPos(v.vertex);</span><br><span class=\"line\">                UNITY_TRANSFER_FOG(o, o.vertex);</span><br><span class=\"line\">                return o;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            fixed4 frag(v2f i): SV_Target</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                fixed4 col = _Color;</span><br><span class=\"line\">                UNITY_APPLY_FOG(i.fogCoord, col);</span><br><span class=\"line\">                UNITY_OPAQUE_ALPHA(col.a);</span><br><span class=\"line\">                return col;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ENDCG</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pragma-multi-compile-fog\"><a href=\"#pragma-multi-compile-fog\" class=\"headerlink\" title=\"#pragma multi_compile_fog\"></a>#pragma multi_compile_fog</h2><p>实现很简单，重点点记录</p>\n<ul>\n<li>#pragma multi_compile_fog</li>\n<li>UNITY_VERTEX_INPUT_INSTANCE_ID</li>\n<li>UNITY_FOG_COORDS(0)</li>\n<li>UNITY_VERTEX_OUTPUT_STEREO</li>\n<li>UNITY_SETUP_INSTANCE_ID(v)</li>\n<li>UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o)</li>\n<li>UNITY_TRANSFER_FOG(o, o.vertex)</li>\n<li>UNITY_APPLY_FOG(i.fogCoord, col)</li>\n<li>UNITY_OPAQUE_ALPHA(col.a)</li>\n</ul>\n<p>这些在一个基础的顶点片元着色器的基本原里。</p>\n<h3 id=\"基础概念宏定义\"><a href=\"#基础概念宏定义\" class=\"headerlink\" title=\"基础概念宏定义\"></a>基础概念宏定义</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define 标识  //定义标识，如果 （标识） 已经被标识过会报错。</span><br><span class=\"line\">#undef 标识   //取消标识的定义</span><br><span class=\"line\">#ifdef 标识   //判断某个宏是否被定义，若已定义，执行随后的语句</span><br><span class=\"line\">#ifndef 标示  // 判断&quot;标示&quot;是否定义，如果被定义则返回false，如果没有被定义则返回true</span><br><span class=\"line\"></span><br><span class=\"line\">#if           //编译预处理中的条件命令，相当于C语法中的if语句</span><br><span class=\"line\">#elif         // 若#if, #ifdef, #ifndef或前面的#elif条件不满足，则执行#elif之后的语句，相当于C语法中的else-if</span><br><span class=\"line\">#else         //与#if, #ifdef, #ifndef对应, 若这些条件不满足，则执行#else之后的语句，相当于C语法中的else</span><br><span class=\"line\">#endif        //#if, #ifdef, #ifndef这些条件命令的结束标志.  </span><br><span class=\"line\">defined(宏)        与#if, #elif配合使用，判断某个宏是否被定义</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"include-“UnityCG-cginc”\"><a href=\"#include-“UnityCG-cginc”\" class=\"headerlink\" title=\"#include “UnityCG.cginc”\"></a>#include “UnityCG.cginc”</h3><p>这里需要注意下,include并不是像c++ 这样在调用shader时将文件include进去，而是在编译shader时决定生成的代码。可以测试在去掉#pragma multi_compile_fog前后点击shader面板 Compile and show code 查看编译后的代码。</p>\n<p>追到UnityCG.cginc文件中查看UNITY_FOG_COORDS宏</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#if defined(FOG_LINEAR) || defined(FOG_EXP) || defined(FOG_EXP2)</span><br><span class=\"line\">    #define UNITY_FOG_COORDS(idx) UNITY_FOG_COORDS_PACKED(idx, float1)</span><br><span class=\"line\"></span><br><span class=\"line\">    #if (SHADER_TARGET &lt; 30) || defined(SHADER_API_MOBILE)</span><br><span class=\"line\">        // mobile or SM2.0: calculate fog factor per-vertex</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.fogCoord.x = unityFogFactor</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.tSpace1.y = tangentSign; o.tSpace2.y = unityFogFactor</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.worldPos.w = unityFogFactor</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.eyeVec.w = unityFogFactor</span><br><span class=\"line\">    #else</span><br><span class=\"line\">        // SM3.0 and PC/console: calculate fog distance per-vertex, and fog factor per-pixel</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG(o,outpos) o.fogCoord.x = (outpos).z</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos) o.tSpace2.y = (outpos).z</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos) o.worldPos.w = (outpos).z</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos) o.eyeVec.w = (outpos).z</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">#else</span><br><span class=\"line\">    #define UNITY_FOG_COORDS(idx)</span><br><span class=\"line\">    #define UNITY_TRANSFER_FOG(o,outpos)</span><br><span class=\"line\">    #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos)</span><br><span class=\"line\">    #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos)</span><br><span class=\"line\">    #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos)</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<p>当开启Fog时 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define UNITY_FOG_COORDS(idx) UNITY_FOG_COORDS_PACKED(idx, float1)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>UNITY_FOG_COORDS_PACKED</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define UNITY_FOG_COORDS_PACKED(idx, vectype) vectype fogCoord : TEXCOORD##idx;</span><br></pre></td></tr></table></figure>\n\n<p>可知实际 UNITY_FOG_COORDS(0) 如果Fog开启,相当一在片元数据中定义了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float1 fogCoord : TEXCOORD0</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>UNITY_TRANSFER_FOG</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">#if defined(FOG_LINEAR) || defined(FOG_EXP) || defined(FOG_EXP2)</span><br><span class=\"line\">    #define UNITY_FOG_COORDS(idx) UNITY_FOG_COORDS_PACKED(idx, float1)</span><br><span class=\"line\"></span><br><span class=\"line\">    #if (SHADER_TARGET &lt; 30) || defined(SHADER_API_MOBILE)</span><br><span class=\"line\">        // mobile or SM2.0: calculate fog factor per-vertex</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.fogCoord.x = unityFogFactor</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.tSpace1.y = tangentSign; o.tSpace2.y = unityFogFactor</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.worldPos.w = unityFogFactor</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.eyeVec.w = unityFogFactor</span><br><span class=\"line\">    #else</span><br><span class=\"line\">        // SM3.0 and PC/console: calculate fog distance per-vertex, and fog factor per-pixel</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG(o,outpos) o.fogCoord.x = (outpos).z</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos) o.tSpace2.y = (outpos).z</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos) o.worldPos.w = (outpos).z</span><br><span class=\"line\">        #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos) o.eyeVec.w = (outpos).z</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">#else</span><br><span class=\"line\">    #define UNITY_FOG_COORDS(idx)</span><br><span class=\"line\">    #define UNITY_TRANSFER_FOG(o,outpos)</span><br><span class=\"line\">    #define UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,outpos)</span><br><span class=\"line\">    #define UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,outpos)</span><br><span class=\"line\">    #define UNITY_TRANSFER_FOG_COMBINED_WITH_EYE_VEC(o,outpos)</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>因为   #pragma target 2.0 时 SHADER_TARGET &lt;30 所以</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#if defined(FOG_LINEAR)</span><br><span class=\"line\">    // factor = (end-z)/(end-start) = z * (-1/(end-start)) + (end/(end-start))</span><br><span class=\"line\">    #define UNITY_CALC_FOG_FACTOR_RAW(coord) float unityFogFactor = (coord) * unity_FogParams.z + unity_FogParams.w</span><br><span class=\"line\">#elif defined(FOG_EXP)</span><br><span class=\"line\">    // factor = exp(-density*z)</span><br><span class=\"line\">    #define UNITY_CALC_FOG_FACTOR_RAW(coord) float unityFogFactor = unity_FogParams.y * (coord); unityFogFactor = exp2(-unityFogFactor)</span><br><span class=\"line\">#elif defined(FOG_EXP2)</span><br><span class=\"line\">    // factor = exp(-(density*z)^2)</span><br><span class=\"line\">    #define UNITY_CALC_FOG_FACTOR_RAW(coord) float unityFogFactor = unity_FogParams.x * (coord); unityFogFactor = exp2(-unityFogFactor*unityFogFactor)</span><br><span class=\"line\">#else</span><br><span class=\"line\">    #define UNITY_CALC_FOG_FACTOR_RAW(coord) float unityFogFactor = 0.0</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#define UNITY_CALC_FOG_FACTOR(coord) UNITY_CALC_FOG_FACTOR_RAW(UNITY_Z_0_FAR_FROM_CLIPSPACE(coord))</span><br><span class=\"line\"></span><br><span class=\"line\"> #define UNITY_TRANSFER_FOG(o,outpos) UNITY_CALC_FOG_FACTOR((outpos).z); o.fogCoord.x = unityFogFactor</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n</blockquote>\n<p>可以追溯宏定义的运算 得到 fogCoord值,并在 UNITY_APPLY_FOG(i.fogCoord, col);得到新得col值。</p>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>INSTANCE 和FOG 会在后面补充，这里只记录shader分析的一个过程。</p>\n"},{"_content":"","source":"_posts/U3D/资源管理/图片格式优化.md","raw":"","slug":"U3D/资源管理/图片格式优化","published":1,"date":"2021-11-18T07:20:09.089Z","updated":"2021-11-18T07:23:24.171Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4trgdv000084ho25g0c118","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"AndroidAppBundle","date":"2021-06-14T04:00:00.000Z","toc":true,"_content":"\n[官方文档](https://developer.android.com/guide/app-bundle/asset-delivery)\n\n## AndroidAppBundle\n> googlePlay上一种新的上传格式，以前是传apk,现在可以传Bundle。google play通过dynamic Delevery从Bundle中现在特定的配置给用户。\n\n## Play Asset Delivery\n\nPlay Asset Delivery (PAD) 将 app bundle 的优势带到游戏中。它允许超过 150 MB 的游戏替换旧版扩展文件 (OBB)，方法是将包含游戏所需的所有资源的单个工件发布到 Play。PAD 提供了灵活的分发模式、自动更新、压缩和增量修补功能，并且可免费使用。使用 PAD，所有资源包均在 Google Play 上托管和提供，因此您无需使用内容分发网络 (CDN) 向玩家提供游戏资源。\n\nPlay Asset Delivery 使用资源包，资源包由资源（如纹理、着色器和声音）组成，但不包含可执行代码。通过 Dynamic Delivery，您可以按照以下三种分发模式自定义如何以及何时将各个资源包下载到设备上：安装时分发、快速跟进式分发和按需分发。\n\n#### install-time\n\n资源包在用户安装应用时分发。这些资源包以拆分 APK（APK 集的一部分）的形式提供。它们也称为“预先”资源包；您可以在应用启动时立即使用这些资源包。这些资源包会增加 Google Play 商店上列出的应用大小。用户无法修改或删除这些资源包。\n\n#### fast-follow \n\n资源包会在用户安装应用后立即自动下载；用户无需打开应用即可开始 fast-follow 下载。此类下载不会阻止用户访问应用。这些资源包会增加 Google Play 商店上列出的应用大小。\n\n#### on-demand \n\n资源包会在应用运行时下载。\n\nGoogle Play 商店会以归档文件（而非拆分 APK）的形式提供配置为 fast-follow 和 on-demand 的资源包。这些资源包随后会在应用的内部存储空间中展开。您可以使用 Play Core API 查询以这种方式提供的资源包的位置。应用无法假设这些文件的存在或其位置，因为它们可能会被用户删除，或由 Play Core SDK 在游戏会话之间移动。尽管这些文件可由应用写入，您也应将其视为只读文件，因为资源包补丁程序依赖于这些文件的完整性。\n\n\n每个 fast-follow 和 on-demand Asset Pack 的下载大小上限为 512 MB。\n所有 install-time Asset Pack 的总下载大小上限为 1 GB。\n一个 Android App Bundle 中的所有 Asset Pack 的总下载大小上限为 2 GB。\n一个 Android App Bundle 中最多可以使用 50 个资源包。\n\n也就是从install-time 我们可以放比较多的重要资源\n\nfast-follow 和 on-demand 放二级资源\n\n我们项目目前有将近4G 的资源 最新的assetbundle（3.75G）\n\n从PAD中可以处理将近2G的资源，仍需有将近2G的资源从cdn下载。\n\n### PAD需要处理的工作\n\n1. 打包时记录所有的AssetPack信息, 测试分支已经写好。（每个pack的文件和大小信息等。）加入自动打包也已改好。\n2. 根据记录的pack信息 在应用启动时对PAD做资源完整检查;\n3. 每个分包的PlayAssetPack的处理（分包里的assetbundle 或其它资源，需要先加载此AssetPack 再从assetPack里加载assetbundle）这里包含任何分发模式的资源。\n4. 加载AssetBundle的逻辑修改这里主要是是 以及AssetPack在内存中的依赖维护。\n\n```\n\n  //异步加载\n  PlayAssetPackRequest playAssetPackRequest = PlayAssetDelivery.RetrieveAssetPackAsync(packName);\n   //异步加载\n  AssetBundleCreateRequest request = playAssetPackRequest.LoadAssetBundleAsync(abPath)\n\n  //目前的加assetbundle     \n  AssetBundleCreateRequest request = AssetBundle.LoadFromFileAsync(AssetBundleFullPath);\n\n```\n### 在 Play 上测试 app bundle\nhttps://developer.android.com/guide/app-bundle/test\n\n### 本地测试流程\n\n[官方测试参考文档](https://developer.android.com/guide/app-bundle/test)\n\n[下载BundleTool](https://github.com/google/bundletool/releases)\n\n\n将aab装成课本第测试的apks 此步骤以自动加入到打包流程。\n```\nbundletool build-apks --local-testing\n  --bundle my_app.aab\n  --output my_app.apks\n```\n\n安装到测试机(模拟器需要abd 先链接模拟器，比如夜神模拟器：adb connect 127.0.0.1:62001)\n\n```\nbundletool install-apks --apks my_app.apks\n```","source":"_posts/U3D/aab打包.md","raw":"---\ntitle: AndroidAppBundle\ncategories: U3D\ntags: AAB\ndate: 2021-06-14 12:00:00\ntoc: true\n---\n\n[官方文档](https://developer.android.com/guide/app-bundle/asset-delivery)\n\n## AndroidAppBundle\n> googlePlay上一种新的上传格式，以前是传apk,现在可以传Bundle。google play通过dynamic Delevery从Bundle中现在特定的配置给用户。\n\n## Play Asset Delivery\n\nPlay Asset Delivery (PAD) 将 app bundle 的优势带到游戏中。它允许超过 150 MB 的游戏替换旧版扩展文件 (OBB)，方法是将包含游戏所需的所有资源的单个工件发布到 Play。PAD 提供了灵活的分发模式、自动更新、压缩和增量修补功能，并且可免费使用。使用 PAD，所有资源包均在 Google Play 上托管和提供，因此您无需使用内容分发网络 (CDN) 向玩家提供游戏资源。\n\nPlay Asset Delivery 使用资源包，资源包由资源（如纹理、着色器和声音）组成，但不包含可执行代码。通过 Dynamic Delivery，您可以按照以下三种分发模式自定义如何以及何时将各个资源包下载到设备上：安装时分发、快速跟进式分发和按需分发。\n\n#### install-time\n\n资源包在用户安装应用时分发。这些资源包以拆分 APK（APK 集的一部分）的形式提供。它们也称为“预先”资源包；您可以在应用启动时立即使用这些资源包。这些资源包会增加 Google Play 商店上列出的应用大小。用户无法修改或删除这些资源包。\n\n#### fast-follow \n\n资源包会在用户安装应用后立即自动下载；用户无需打开应用即可开始 fast-follow 下载。此类下载不会阻止用户访问应用。这些资源包会增加 Google Play 商店上列出的应用大小。\n\n#### on-demand \n\n资源包会在应用运行时下载。\n\nGoogle Play 商店会以归档文件（而非拆分 APK）的形式提供配置为 fast-follow 和 on-demand 的资源包。这些资源包随后会在应用的内部存储空间中展开。您可以使用 Play Core API 查询以这种方式提供的资源包的位置。应用无法假设这些文件的存在或其位置，因为它们可能会被用户删除，或由 Play Core SDK 在游戏会话之间移动。尽管这些文件可由应用写入，您也应将其视为只读文件，因为资源包补丁程序依赖于这些文件的完整性。\n\n\n每个 fast-follow 和 on-demand Asset Pack 的下载大小上限为 512 MB。\n所有 install-time Asset Pack 的总下载大小上限为 1 GB。\n一个 Android App Bundle 中的所有 Asset Pack 的总下载大小上限为 2 GB。\n一个 Android App Bundle 中最多可以使用 50 个资源包。\n\n也就是从install-time 我们可以放比较多的重要资源\n\nfast-follow 和 on-demand 放二级资源\n\n我们项目目前有将近4G 的资源 最新的assetbundle（3.75G）\n\n从PAD中可以处理将近2G的资源，仍需有将近2G的资源从cdn下载。\n\n### PAD需要处理的工作\n\n1. 打包时记录所有的AssetPack信息, 测试分支已经写好。（每个pack的文件和大小信息等。）加入自动打包也已改好。\n2. 根据记录的pack信息 在应用启动时对PAD做资源完整检查;\n3. 每个分包的PlayAssetPack的处理（分包里的assetbundle 或其它资源，需要先加载此AssetPack 再从assetPack里加载assetbundle）这里包含任何分发模式的资源。\n4. 加载AssetBundle的逻辑修改这里主要是是 以及AssetPack在内存中的依赖维护。\n\n```\n\n  //异步加载\n  PlayAssetPackRequest playAssetPackRequest = PlayAssetDelivery.RetrieveAssetPackAsync(packName);\n   //异步加载\n  AssetBundleCreateRequest request = playAssetPackRequest.LoadAssetBundleAsync(abPath)\n\n  //目前的加assetbundle     \n  AssetBundleCreateRequest request = AssetBundle.LoadFromFileAsync(AssetBundleFullPath);\n\n```\n### 在 Play 上测试 app bundle\nhttps://developer.android.com/guide/app-bundle/test\n\n### 本地测试流程\n\n[官方测试参考文档](https://developer.android.com/guide/app-bundle/test)\n\n[下载BundleTool](https://github.com/google/bundletool/releases)\n\n\n将aab装成课本第测试的apks 此步骤以自动加入到打包流程。\n```\nbundletool build-apks --local-testing\n  --bundle my_app.aab\n  --output my_app.apks\n```\n\n安装到测试机(模拟器需要abd 先链接模拟器，比如夜神模拟器：adb connect 127.0.0.1:62001)\n\n```\nbundletool install-apks --apks my_app.apks\n```","slug":"U3D/aab打包","published":1,"updated":"2022-02-21T11:07:21.602Z","_id":"ckw4trge0000184hoex456f9e","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://developer.android.com/guide/app-bundle/asset-delivery\">官方文档</a></p>\n<h2 id=\"AndroidAppBundle\"><a href=\"#AndroidAppBundle\" class=\"headerlink\" title=\"AndroidAppBundle\"></a>AndroidAppBundle</h2><blockquote>\n<p>googlePlay上一种新的上传格式，以前是传apk,现在可以传Bundle。google play通过dynamic Delevery从Bundle中现在特定的配置给用户。</p>\n</blockquote>\n<h2 id=\"Play-Asset-Delivery\"><a href=\"#Play-Asset-Delivery\" class=\"headerlink\" title=\"Play Asset Delivery\"></a>Play Asset Delivery</h2><p>Play Asset Delivery (PAD) 将 app bundle 的优势带到游戏中。它允许超过 150 MB 的游戏替换旧版扩展文件 (OBB)，方法是将包含游戏所需的所有资源的单个工件发布到 Play。PAD 提供了灵活的分发模式、自动更新、压缩和增量修补功能，并且可免费使用。使用 PAD，所有资源包均在 Google Play 上托管和提供，因此您无需使用内容分发网络 (CDN) 向玩家提供游戏资源。</p>\n<p>Play Asset Delivery 使用资源包，资源包由资源（如纹理、着色器和声音）组成，但不包含可执行代码。通过 Dynamic Delivery，您可以按照以下三种分发模式自定义如何以及何时将各个资源包下载到设备上：安装时分发、快速跟进式分发和按需分发。</p>\n<h4 id=\"install-time\"><a href=\"#install-time\" class=\"headerlink\" title=\"install-time\"></a>install-time</h4><p>资源包在用户安装应用时分发。这些资源包以拆分 APK（APK 集的一部分）的形式提供。它们也称为“预先”资源包；您可以在应用启动时立即使用这些资源包。这些资源包会增加 Google Play 商店上列出的应用大小。用户无法修改或删除这些资源包。</p>\n<h4 id=\"fast-follow\"><a href=\"#fast-follow\" class=\"headerlink\" title=\"fast-follow\"></a>fast-follow</h4><p>资源包会在用户安装应用后立即自动下载；用户无需打开应用即可开始 fast-follow 下载。此类下载不会阻止用户访问应用。这些资源包会增加 Google Play 商店上列出的应用大小。</p>\n<h4 id=\"on-demand\"><a href=\"#on-demand\" class=\"headerlink\" title=\"on-demand\"></a>on-demand</h4><p>资源包会在应用运行时下载。</p>\n<p>Google Play 商店会以归档文件（而非拆分 APK）的形式提供配置为 fast-follow 和 on-demand 的资源包。这些资源包随后会在应用的内部存储空间中展开。您可以使用 Play Core API 查询以这种方式提供的资源包的位置。应用无法假设这些文件的存在或其位置，因为它们可能会被用户删除，或由 Play Core SDK 在游戏会话之间移动。尽管这些文件可由应用写入，您也应将其视为只读文件，因为资源包补丁程序依赖于这些文件的完整性。</p>\n<p>每个 fast-follow 和 on-demand Asset Pack 的下载大小上限为 512 MB。<br>所有 install-time Asset Pack 的总下载大小上限为 1 GB。<br>一个 Android App Bundle 中的所有 Asset Pack 的总下载大小上限为 2 GB。<br>一个 Android App Bundle 中最多可以使用 50 个资源包。</p>\n<p>也就是从install-time 我们可以放比较多的重要资源</p>\n<p>fast-follow 和 on-demand 放二级资源</p>\n<p>我们项目目前有将近4G 的资源 最新的assetbundle（3.75G）</p>\n<p>从PAD中可以处理将近2G的资源，仍需有将近2G的资源从cdn下载。</p>\n<h3 id=\"PAD需要处理的工作\"><a href=\"#PAD需要处理的工作\" class=\"headerlink\" title=\"PAD需要处理的工作\"></a>PAD需要处理的工作</h3><ol>\n<li>打包时记录所有的AssetPack信息, 测试分支已经写好。（每个pack的文件和大小信息等。）加入自动打包也已改好。</li>\n<li>根据记录的pack信息 在应用启动时对PAD做资源完整检查;</li>\n<li>每个分包的PlayAssetPack的处理（分包里的assetbundle 或其它资源，需要先加载此AssetPack 再从assetPack里加载assetbundle）这里包含任何分发模式的资源。</li>\n<li>加载AssetBundle的逻辑修改这里主要是是 以及AssetPack在内存中的依赖维护。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//异步加载</span><br><span class=\"line\">PlayAssetPackRequest playAssetPackRequest = PlayAssetDelivery.RetrieveAssetPackAsync(packName);</span><br><span class=\"line\"> //异步加载</span><br><span class=\"line\">AssetBundleCreateRequest request = playAssetPackRequest.LoadAssetBundleAsync(abPath)</span><br><span class=\"line\"></span><br><span class=\"line\">//目前的加assetbundle     </span><br><span class=\"line\">AssetBundleCreateRequest request = AssetBundle.LoadFromFileAsync(AssetBundleFullPath);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"在-Play-上测试-app-bundle\"><a href=\"#在-Play-上测试-app-bundle\" class=\"headerlink\" title=\"在 Play 上测试 app bundle\"></a>在 Play 上测试 app bundle</h3><p><a href=\"https://developer.android.com/guide/app-bundle/test\">https://developer.android.com/guide/app-bundle/test</a></p>\n<h3 id=\"本地测试流程\"><a href=\"#本地测试流程\" class=\"headerlink\" title=\"本地测试流程\"></a>本地测试流程</h3><p><a href=\"https://developer.android.com/guide/app-bundle/test\">官方测试参考文档</a></p>\n<p><a href=\"https://github.com/google/bundletool/releases\">下载BundleTool</a></p>\n<p>将aab装成课本第测试的apks 此步骤以自动加入到打包流程。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundletool build-apks --local-testing</span><br><span class=\"line\">  --bundle my_app.aab</span><br><span class=\"line\">  --output my_app.apks</span><br></pre></td></tr></table></figure>\n\n<p>安装到测试机(模拟器需要abd 先链接模拟器，比如夜神模拟器：adb connect 127.0.0.1:62001)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundletool install-apks --apks my_app.apks</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://developer.android.com/guide/app-bundle/asset-delivery\">官方文档</a></p>\n<h2 id=\"AndroidAppBundle\"><a href=\"#AndroidAppBundle\" class=\"headerlink\" title=\"AndroidAppBundle\"></a>AndroidAppBundle</h2><blockquote>\n<p>googlePlay上一种新的上传格式，以前是传apk,现在可以传Bundle。google play通过dynamic Delevery从Bundle中现在特定的配置给用户。</p>\n</blockquote>\n<h2 id=\"Play-Asset-Delivery\"><a href=\"#Play-Asset-Delivery\" class=\"headerlink\" title=\"Play Asset Delivery\"></a>Play Asset Delivery</h2><p>Play Asset Delivery (PAD) 将 app bundle 的优势带到游戏中。它允许超过 150 MB 的游戏替换旧版扩展文件 (OBB)，方法是将包含游戏所需的所有资源的单个工件发布到 Play。PAD 提供了灵活的分发模式、自动更新、压缩和增量修补功能，并且可免费使用。使用 PAD，所有资源包均在 Google Play 上托管和提供，因此您无需使用内容分发网络 (CDN) 向玩家提供游戏资源。</p>\n<p>Play Asset Delivery 使用资源包，资源包由资源（如纹理、着色器和声音）组成，但不包含可执行代码。通过 Dynamic Delivery，您可以按照以下三种分发模式自定义如何以及何时将各个资源包下载到设备上：安装时分发、快速跟进式分发和按需分发。</p>\n<h4 id=\"install-time\"><a href=\"#install-time\" class=\"headerlink\" title=\"install-time\"></a>install-time</h4><p>资源包在用户安装应用时分发。这些资源包以拆分 APK（APK 集的一部分）的形式提供。它们也称为“预先”资源包；您可以在应用启动时立即使用这些资源包。这些资源包会增加 Google Play 商店上列出的应用大小。用户无法修改或删除这些资源包。</p>\n<h4 id=\"fast-follow\"><a href=\"#fast-follow\" class=\"headerlink\" title=\"fast-follow\"></a>fast-follow</h4><p>资源包会在用户安装应用后立即自动下载；用户无需打开应用即可开始 fast-follow 下载。此类下载不会阻止用户访问应用。这些资源包会增加 Google Play 商店上列出的应用大小。</p>\n<h4 id=\"on-demand\"><a href=\"#on-demand\" class=\"headerlink\" title=\"on-demand\"></a>on-demand</h4><p>资源包会在应用运行时下载。</p>\n<p>Google Play 商店会以归档文件（而非拆分 APK）的形式提供配置为 fast-follow 和 on-demand 的资源包。这些资源包随后会在应用的内部存储空间中展开。您可以使用 Play Core API 查询以这种方式提供的资源包的位置。应用无法假设这些文件的存在或其位置，因为它们可能会被用户删除，或由 Play Core SDK 在游戏会话之间移动。尽管这些文件可由应用写入，您也应将其视为只读文件，因为资源包补丁程序依赖于这些文件的完整性。</p>\n<p>每个 fast-follow 和 on-demand Asset Pack 的下载大小上限为 512 MB。<br>所有 install-time Asset Pack 的总下载大小上限为 1 GB。<br>一个 Android App Bundle 中的所有 Asset Pack 的总下载大小上限为 2 GB。<br>一个 Android App Bundle 中最多可以使用 50 个资源包。</p>\n<p>也就是从install-time 我们可以放比较多的重要资源</p>\n<p>fast-follow 和 on-demand 放二级资源</p>\n<p>我们项目目前有将近4G 的资源 最新的assetbundle（3.75G）</p>\n<p>从PAD中可以处理将近2G的资源，仍需有将近2G的资源从cdn下载。</p>\n<h3 id=\"PAD需要处理的工作\"><a href=\"#PAD需要处理的工作\" class=\"headerlink\" title=\"PAD需要处理的工作\"></a>PAD需要处理的工作</h3><ol>\n<li>打包时记录所有的AssetPack信息, 测试分支已经写好。（每个pack的文件和大小信息等。）加入自动打包也已改好。</li>\n<li>根据记录的pack信息 在应用启动时对PAD做资源完整检查;</li>\n<li>每个分包的PlayAssetPack的处理（分包里的assetbundle 或其它资源，需要先加载此AssetPack 再从assetPack里加载assetbundle）这里包含任何分发模式的资源。</li>\n<li>加载AssetBundle的逻辑修改这里主要是是 以及AssetPack在内存中的依赖维护。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//异步加载</span><br><span class=\"line\">PlayAssetPackRequest playAssetPackRequest = PlayAssetDelivery.RetrieveAssetPackAsync(packName);</span><br><span class=\"line\"> //异步加载</span><br><span class=\"line\">AssetBundleCreateRequest request = playAssetPackRequest.LoadAssetBundleAsync(abPath)</span><br><span class=\"line\"></span><br><span class=\"line\">//目前的加assetbundle     </span><br><span class=\"line\">AssetBundleCreateRequest request = AssetBundle.LoadFromFileAsync(AssetBundleFullPath);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"在-Play-上测试-app-bundle\"><a href=\"#在-Play-上测试-app-bundle\" class=\"headerlink\" title=\"在 Play 上测试 app bundle\"></a>在 Play 上测试 app bundle</h3><p><a href=\"https://developer.android.com/guide/app-bundle/test\">https://developer.android.com/guide/app-bundle/test</a></p>\n<h3 id=\"本地测试流程\"><a href=\"#本地测试流程\" class=\"headerlink\" title=\"本地测试流程\"></a>本地测试流程</h3><p><a href=\"https://developer.android.com/guide/app-bundle/test\">官方测试参考文档</a></p>\n<p><a href=\"https://github.com/google/bundletool/releases\">下载BundleTool</a></p>\n<p>将aab装成课本第测试的apks 此步骤以自动加入到打包流程。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundletool build-apks --local-testing</span><br><span class=\"line\">  --bundle my_app.aab</span><br><span class=\"line\">  --output my_app.apks</span><br></pre></td></tr></table></figure>\n\n<p>安装到测试机(模拟器需要abd 先链接模拟器，比如夜神模拟器：adb connect 127.0.0.1:62001)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundletool install-apks --apks my_app.apks</span><br></pre></td></tr></table></figure>"},{"title":"优化记录 - 1","date":"2021-06-14T04:00:00.000Z","toc":true,"_content":"\n优化的最终是希望代码占用内存小的同时执行效率高。\n\nunity 分为CPU 和 GPU 优化\n\n# CPU \n\n\n# GPU","source":"_posts/U3D/优化.md","raw":"---\ntitle: 优化记录 - 1\ncategories:  U3D\ntags: 优化\ndate: 2021-06-14 12:00:00\ntoc: true\n---\n\n优化的最终是希望代码占用内存小的同时执行效率高。\n\nunity 分为CPU 和 GPU 优化\n\n# CPU \n\n\n# GPU","slug":"U3D/优化","published":1,"updated":"2022-02-21T11:07:24.638Z","_id":"ckw4trge2000284hogbhobpp2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>优化的最终是希望代码占用内存小的同时执行效率高。</p>\n<p>unity 分为CPU 和 GPU 优化</p>\n<h1 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h1><h1 id=\"GPU\"><a href=\"#GPU\" class=\"headerlink\" title=\"GPU\"></a>GPU</h1>","site":{"data":{}},"excerpt":"","more":"<p>优化的最终是希望代码占用内存小的同时执行效率高。</p>\n<p>unity 分为CPU 和 GPU 优化</p>\n<h1 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h1><h1 id=\"GPU\"><a href=\"#GPU\" class=\"headerlink\" title=\"GPU\"></a>GPU</h1>"},{"title":"Unity DOTS","date":"2021-08-30T04:00:00.000Z","toc":true,"_content":"\n# Job System\n\n[官方文档](file:///D:/Program%20Files/2020.3.14f1c1/Editor/Data/Documentation/en/Manual/JobSystem.html)\n\n1. 借助 Unity C# 作业系统，用户可以编写与 Unity 其余部分良好交互的多线程代码，并使编写正确代码变得更加容易。\n\n2. 编写多线程代码可以带来高性能优势，包括显著提高帧率。将 Burst 编译器与 C# 作业配合使用可以提高代码生成质量，还可以大大降低移动设备的电池消耗。\n\n3. C# 作业系统的一个重要特点是它与 Unity 内部使用的系统（Unity 的原生作业系统）相集成。用户编写的代码与 Unity 共享工作线程。此协作避免了创建超过 CPU 核心数的线程（这种情况会导致争用 CPU 资源）\n\n\n### NativeContainer\n\n> NativeContainer是一种托管值类型，为本机内存提供了一个相对安全的C#封装器。它包含一个指向非托管分配的指针。与Unity C# 作业系统一起使用时，NativeContainer允许Job 访问与主线程共享的数据，而不是使用副本。\n\n* NativeList - 可调整大小的 NativeArray。\n* NativeHashMap - 键/值对。\n* NativeMultiHashMap - 每个键有多个值。\n* NativeQueue  - 先进先出 (FIFO) 队列。\n\n### NativeContainer Allocator\n\n>创建 NativeContainer 时，必须指定所需的内存分配类型。分配类型取决于作业运行的时间长度。因此，可以定制分配以便在每种情况下获得最佳性能。可以使用三种 Allocator 类型进行 NativeContainer 内存分配和释放。在实例化 NativeContainer 时需要指定适当的一种类型。\n\n* Allocator.Temp 具有最快的分配速度。此类型适用于寿命为一帧或更短的分配，不应该使用Temp将NativeContainer 分配传递给Job，在方法调用返回之前，还需要调用Dispose方法。\n\n以下错误 不应该使用Temp将NativeContainer 分配传递给Job\n```\npublic struct JobSum : IJob\n{\n    public int a;\n    public int b;\n    public NativeArray<int> result;\n    public void Execute()\n    {\n        result[0] =  result[0]+ a + b;\n    }\n}\n    void Test()\n    {\n        JobSum jobSum = new JobSum();\n        jobSum.a = 1;\n        jobSum.b = 10;\n        \n        NativeArray<int>  result = new NativeArray<int>(1, Allocator.Temp );\n        jobSum.result = result;\n        var handle =  jobSum.Schedule();\n        handle.Complete();\n        result.Dispose();\n    }\n```\n\n* Allocator.TempJob的分配速度比Temp慢，但比Persistent快。此类型适用于寿命为四帧的分配，并具有线程安全性，如果没有在四帧内对其执行Dispose,控制台会输出一条从本机代码生成的警告。大多数小作业都使用这种 NativeContainer 分配类型。\n\n* Allocator.Persistent 是最慢的分配，但可以在您所需的任意时间内持续存在，如果有必要，可以在整个应用程序的生命周期内存在。此分配器是直接调用 malloc 的封装器。持续时间较长的作业可以使用这种 NativeContainer 分配类型。在非常注重性能的情况下不应使用 Persistent。\n","source":"_posts/U3D/ECS/Unity DOTS.md","raw":"---\ntitle: Unity DOTS\ncategories: U3D\ntags: 框架\ndate: 2021-08-30 12:00:00\ntoc: true\n---\n\n# Job System\n\n[官方文档](file:///D:/Program%20Files/2020.3.14f1c1/Editor/Data/Documentation/en/Manual/JobSystem.html)\n\n1. 借助 Unity C# 作业系统，用户可以编写与 Unity 其余部分良好交互的多线程代码，并使编写正确代码变得更加容易。\n\n2. 编写多线程代码可以带来高性能优势，包括显著提高帧率。将 Burst 编译器与 C# 作业配合使用可以提高代码生成质量，还可以大大降低移动设备的电池消耗。\n\n3. C# 作业系统的一个重要特点是它与 Unity 内部使用的系统（Unity 的原生作业系统）相集成。用户编写的代码与 Unity 共享工作线程。此协作避免了创建超过 CPU 核心数的线程（这种情况会导致争用 CPU 资源）\n\n\n### NativeContainer\n\n> NativeContainer是一种托管值类型，为本机内存提供了一个相对安全的C#封装器。它包含一个指向非托管分配的指针。与Unity C# 作业系统一起使用时，NativeContainer允许Job 访问与主线程共享的数据，而不是使用副本。\n\n* NativeList - 可调整大小的 NativeArray。\n* NativeHashMap - 键/值对。\n* NativeMultiHashMap - 每个键有多个值。\n* NativeQueue  - 先进先出 (FIFO) 队列。\n\n### NativeContainer Allocator\n\n>创建 NativeContainer 时，必须指定所需的内存分配类型。分配类型取决于作业运行的时间长度。因此，可以定制分配以便在每种情况下获得最佳性能。可以使用三种 Allocator 类型进行 NativeContainer 内存分配和释放。在实例化 NativeContainer 时需要指定适当的一种类型。\n\n* Allocator.Temp 具有最快的分配速度。此类型适用于寿命为一帧或更短的分配，不应该使用Temp将NativeContainer 分配传递给Job，在方法调用返回之前，还需要调用Dispose方法。\n\n以下错误 不应该使用Temp将NativeContainer 分配传递给Job\n```\npublic struct JobSum : IJob\n{\n    public int a;\n    public int b;\n    public NativeArray<int> result;\n    public void Execute()\n    {\n        result[0] =  result[0]+ a + b;\n    }\n}\n    void Test()\n    {\n        JobSum jobSum = new JobSum();\n        jobSum.a = 1;\n        jobSum.b = 10;\n        \n        NativeArray<int>  result = new NativeArray<int>(1, Allocator.Temp );\n        jobSum.result = result;\n        var handle =  jobSum.Schedule();\n        handle.Complete();\n        result.Dispose();\n    }\n```\n\n* Allocator.TempJob的分配速度比Temp慢，但比Persistent快。此类型适用于寿命为四帧的分配，并具有线程安全性，如果没有在四帧内对其执行Dispose,控制台会输出一条从本机代码生成的警告。大多数小作业都使用这种 NativeContainer 分配类型。\n\n* Allocator.Persistent 是最慢的分配，但可以在您所需的任意时间内持续存在，如果有必要，可以在整个应用程序的生命周期内存在。此分配器是直接调用 malloc 的封装器。持续时间较长的作业可以使用这种 NativeContainer 分配类型。在非常注重性能的情况下不应使用 Persistent。\n","slug":"U3D/ECS/Unity DOTS","published":1,"updated":"2022-02-21T11:07:38.984Z","_id":"ckw4trge9000b84hocn699zxm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Job-System\"><a href=\"#Job-System\" class=\"headerlink\" title=\"Job System\"></a>Job System</h1><p><a href=\"file:///D:/Program%20Files/2020.3.14f1c1/Editor/Data/Documentation/en/Manual/JobSystem.html\">官方文档</a></p>\n<ol>\n<li><p>借助 Unity C# 作业系统，用户可以编写与 Unity 其余部分良好交互的多线程代码，并使编写正确代码变得更加容易。</p>\n</li>\n<li><p>编写多线程代码可以带来高性能优势，包括显著提高帧率。将 Burst 编译器与 C# 作业配合使用可以提高代码生成质量，还可以大大降低移动设备的电池消耗。</p>\n</li>\n<li><p>C# 作业系统的一个重要特点是它与 Unity 内部使用的系统（Unity 的原生作业系统）相集成。用户编写的代码与 Unity 共享工作线程。此协作避免了创建超过 CPU 核心数的线程（这种情况会导致争用 CPU 资源）</p>\n</li>\n</ol>\n<h3 id=\"NativeContainer\"><a href=\"#NativeContainer\" class=\"headerlink\" title=\"NativeContainer\"></a>NativeContainer</h3><blockquote>\n<p>NativeContainer是一种托管值类型，为本机内存提供了一个相对安全的C#封装器。它包含一个指向非托管分配的指针。与Unity C# 作业系统一起使用时，NativeContainer允许Job 访问与主线程共享的数据，而不是使用副本。</p>\n</blockquote>\n<ul>\n<li>NativeList - 可调整大小的 NativeArray。</li>\n<li>NativeHashMap - 键/值对。</li>\n<li>NativeMultiHashMap - 每个键有多个值。</li>\n<li>NativeQueue  - 先进先出 (FIFO) 队列。</li>\n</ul>\n<h3 id=\"NativeContainer-Allocator\"><a href=\"#NativeContainer-Allocator\" class=\"headerlink\" title=\"NativeContainer Allocator\"></a>NativeContainer Allocator</h3><blockquote>\n<p>创建 NativeContainer 时，必须指定所需的内存分配类型。分配类型取决于作业运行的时间长度。因此，可以定制分配以便在每种情况下获得最佳性能。可以使用三种 Allocator 类型进行 NativeContainer 内存分配和释放。在实例化 NativeContainer 时需要指定适当的一种类型。</p>\n</blockquote>\n<ul>\n<li>Allocator.Temp 具有最快的分配速度。此类型适用于寿命为一帧或更短的分配，不应该使用Temp将NativeContainer 分配传递给Job，在方法调用返回之前，还需要调用Dispose方法。</li>\n</ul>\n<p>以下错误 不应该使用Temp将NativeContainer 分配传递给Job</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public struct JobSum : IJob</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public int a;</span><br><span class=\"line\">    public int b;</span><br><span class=\"line\">    public NativeArray&lt;int&gt; result;</span><br><span class=\"line\">    public void Execute()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        result[0] =  result[0]+ a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    void Test()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        JobSum jobSum = new JobSum();</span><br><span class=\"line\">        jobSum.a = 1;</span><br><span class=\"line\">        jobSum.b = 10;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NativeArray&lt;int&gt;  result = new NativeArray&lt;int&gt;(1, Allocator.Temp );</span><br><span class=\"line\">        jobSum.result = result;</span><br><span class=\"line\">        var handle =  jobSum.Schedule();</span><br><span class=\"line\">        handle.Complete();</span><br><span class=\"line\">        result.Dispose();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Allocator.TempJob的分配速度比Temp慢，但比Persistent快。此类型适用于寿命为四帧的分配，并具有线程安全性，如果没有在四帧内对其执行Dispose,控制台会输出一条从本机代码生成的警告。大多数小作业都使用这种 NativeContainer 分配类型。</p>\n</li>\n<li><p>Allocator.Persistent 是最慢的分配，但可以在您所需的任意时间内持续存在，如果有必要，可以在整个应用程序的生命周期内存在。此分配器是直接调用 malloc 的封装器。持续时间较长的作业可以使用这种 NativeContainer 分配类型。在非常注重性能的情况下不应使用 Persistent。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Job-System\"><a href=\"#Job-System\" class=\"headerlink\" title=\"Job System\"></a>Job System</h1><p><a href=\"file:///D:/Program%20Files/2020.3.14f1c1/Editor/Data/Documentation/en/Manual/JobSystem.html\">官方文档</a></p>\n<ol>\n<li><p>借助 Unity C# 作业系统，用户可以编写与 Unity 其余部分良好交互的多线程代码，并使编写正确代码变得更加容易。</p>\n</li>\n<li><p>编写多线程代码可以带来高性能优势，包括显著提高帧率。将 Burst 编译器与 C# 作业配合使用可以提高代码生成质量，还可以大大降低移动设备的电池消耗。</p>\n</li>\n<li><p>C# 作业系统的一个重要特点是它与 Unity 内部使用的系统（Unity 的原生作业系统）相集成。用户编写的代码与 Unity 共享工作线程。此协作避免了创建超过 CPU 核心数的线程（这种情况会导致争用 CPU 资源）</p>\n</li>\n</ol>\n<h3 id=\"NativeContainer\"><a href=\"#NativeContainer\" class=\"headerlink\" title=\"NativeContainer\"></a>NativeContainer</h3><blockquote>\n<p>NativeContainer是一种托管值类型，为本机内存提供了一个相对安全的C#封装器。它包含一个指向非托管分配的指针。与Unity C# 作业系统一起使用时，NativeContainer允许Job 访问与主线程共享的数据，而不是使用副本。</p>\n</blockquote>\n<ul>\n<li>NativeList - 可调整大小的 NativeArray。</li>\n<li>NativeHashMap - 键/值对。</li>\n<li>NativeMultiHashMap - 每个键有多个值。</li>\n<li>NativeQueue  - 先进先出 (FIFO) 队列。</li>\n</ul>\n<h3 id=\"NativeContainer-Allocator\"><a href=\"#NativeContainer-Allocator\" class=\"headerlink\" title=\"NativeContainer Allocator\"></a>NativeContainer Allocator</h3><blockquote>\n<p>创建 NativeContainer 时，必须指定所需的内存分配类型。分配类型取决于作业运行的时间长度。因此，可以定制分配以便在每种情况下获得最佳性能。可以使用三种 Allocator 类型进行 NativeContainer 内存分配和释放。在实例化 NativeContainer 时需要指定适当的一种类型。</p>\n</blockquote>\n<ul>\n<li>Allocator.Temp 具有最快的分配速度。此类型适用于寿命为一帧或更短的分配，不应该使用Temp将NativeContainer 分配传递给Job，在方法调用返回之前，还需要调用Dispose方法。</li>\n</ul>\n<p>以下错误 不应该使用Temp将NativeContainer 分配传递给Job</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public struct JobSum : IJob</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public int a;</span><br><span class=\"line\">    public int b;</span><br><span class=\"line\">    public NativeArray&lt;int&gt; result;</span><br><span class=\"line\">    public void Execute()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        result[0] =  result[0]+ a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    void Test()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        JobSum jobSum = new JobSum();</span><br><span class=\"line\">        jobSum.a = 1;</span><br><span class=\"line\">        jobSum.b = 10;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NativeArray&lt;int&gt;  result = new NativeArray&lt;int&gt;(1, Allocator.Temp );</span><br><span class=\"line\">        jobSum.result = result;</span><br><span class=\"line\">        var handle =  jobSum.Schedule();</span><br><span class=\"line\">        handle.Complete();</span><br><span class=\"line\">        result.Dispose();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Allocator.TempJob的分配速度比Temp慢，但比Persistent快。此类型适用于寿命为四帧的分配，并具有线程安全性，如果没有在四帧内对其执行Dispose,控制台会输出一条从本机代码生成的警告。大多数小作业都使用这种 NativeContainer 分配类型。</p>\n</li>\n<li><p>Allocator.Persistent 是最慢的分配，但可以在您所需的任意时间内持续存在，如果有必要，可以在整个应用程序的生命周期内存在。此分配器是直接调用 malloc 的封装器。持续时间较长的作业可以使用这种 NativeContainer 分配类型。在非常注重性能的情况下不应使用 Persistent。</p>\n</li>\n</ul>\n"},{"title":"Audio","date":"2021-06-14T04:00:00.000Z","toc":true,"_content":"\n导入前的声音格式选择\n\n     短声音：.aifff和.wav\n\n    长声音：.mp3和.ogg\n\n导入后的声音格式选择\n\n     Force ToMono：如果启用，该音频将向下混合到单声道\n\n    Load In Backgroud: 加载将在一个单独的线程上延迟的时间发生，而不会阻塞主线程\n\n    Ambisonic: 如果音频文件包含有双声编码的音频，那么启用这个选项 \n\n    LoadType: ①Decompress On Load:处理较小的声音（load就解压）\n\n                      ②Compressed In Memory：较大的声音（保持解压的状态）\n\n                      ③Streaming：使用最少的内存来缓冲压缩数据（很长的音乐）\n\n Compression Format：\n\n                     ①PCM  非常短的音效是最好的，质量高，文件大\n\n                     ②ADPCM大量噪音的声音，需要大量播放，比如脚步声，武器\n\n                     ③Vorbis/MP3 质量低，中等长度背景音乐\n\n                     ④HEVAG 类似于adpcm\n\nPreload Audio Data 预加载\n\n \n\n方案：大点的音频: Streaming,不预加载，Vorbis\n\n     小点的音频DecompressOnLoad 不预加载  ，Vorbis\n\n会优化比较适中的cpu和内存，具体还要根据项目实际确定\n\n# Unity性能优化-音频设置\n\n没想到Unity的音频会成为内存杀手，在实际的商业项目中，音频的优化必不可少。\n\n1. Unity支持许多不同的音频格式，但最终它将它们全部转换为首选格式。音频压缩格式有PCM、ADPCM、Vorbis，不是所有平台都支持这些所有的压缩格式，有些平台，例如WebGL只支持AAC格式。\n\n2. 所有音频导入时，默认两项设置，LoadType是\"Decompress On Load\"，压缩格式是“Vorbis”，例如下图原始文件大小计算为35.9 MB，导入的大小计算为10.7 MB。这意味着这个音频剪辑将使您的游戏（存档）大小增加10兆字节，但播放它需要近36兆字节的RAM。\n\nThese are default import settings.\n\n3. Load Type的各个选项\n\nCompressed In Memory – 音频剪辑将存储在RAM中，播放时将解压缩，播放时不需要额外的存储。\nStreaming –音频永久存在设备上(硬盘或闪存上) ，播放流媒体方式. 不需要RAM进行存储或播放。\nDecompress On Load – 未压缩的音频将存储在RAM中。这个选项需要的内存最多，但是播放它不会像其他选项那样需要太多的CPU电源。\n         怎么选？长音频播放消耗大量内存，如果播放时不想在内存中进行解压，有两个选择：\n\n         （1）Load Type选“Streaming”， Compression Format 选”Vorbis\"，使用最少的内存，但需要更多的CPU电量和硬盘I/O操作；\n\n         （2）Load Type选“Compressed In Memory”， Compression Format 选”Vorbis\"，磁盘I/O操作被替换成内存的消耗，请注意，要调整“Quaility”滑块以减小压缩剪辑的大小，以交换音质，一般推荐70%左右。\n\n             一般是看到底音乐占据多少内存以及你的目标机型是什么样子的，如果音乐占据的内存本身比较高，你的目标机型的内存又比较小，那么就选择第二种，这种方案会卡一点，否则选择第一种就更好\n\n4. 声音特效\n\n     （1）对于经常播放的和短的音频剪辑，使用“Decompress On Load”和“PCM或ADPCM\"压缩格式。当选择PCM时，不需要解压缩，如果音频剪辑很短，它将很快加载。你也可以使用ADPCM。它需要解压，但解压比Vorbis快得多。\n\n      （2）对于经常播放，中等大小的音频剪辑使用”Compressed In Memory“和”ADPCM“压缩格式，比原始PCM小3.5倍，解压算法的CPU消耗量不会像vorbis消耗那么多CPU。\n\n      （3）对于很少播放并且长度比较短的声音剪辑，使用”Compressed In Memory\", ADPCM 这种压缩格式,原因同（2）。\n\n     （4）对于很少播放中等大小的音频，使用”Compressed In Memory“ 和Vorbis压缩格式。这个音频可能太长，无法使用adpcm存储，播放太少，因此解压缩所需的额外CPU电量不会太多。\n","source":"_posts/U3D/资源管理/audio优化.md","raw":"---\ntitle: Audio\ncategories:  U3D\ntags: 资源\ndate: 2021-06-14 12:00:00\ntoc: true\n---\n\n导入前的声音格式选择\n\n     短声音：.aifff和.wav\n\n    长声音：.mp3和.ogg\n\n导入后的声音格式选择\n\n     Force ToMono：如果启用，该音频将向下混合到单声道\n\n    Load In Backgroud: 加载将在一个单独的线程上延迟的时间发生，而不会阻塞主线程\n\n    Ambisonic: 如果音频文件包含有双声编码的音频，那么启用这个选项 \n\n    LoadType: ①Decompress On Load:处理较小的声音（load就解压）\n\n                      ②Compressed In Memory：较大的声音（保持解压的状态）\n\n                      ③Streaming：使用最少的内存来缓冲压缩数据（很长的音乐）\n\n Compression Format：\n\n                     ①PCM  非常短的音效是最好的，质量高，文件大\n\n                     ②ADPCM大量噪音的声音，需要大量播放，比如脚步声，武器\n\n                     ③Vorbis/MP3 质量低，中等长度背景音乐\n\n                     ④HEVAG 类似于adpcm\n\nPreload Audio Data 预加载\n\n \n\n方案：大点的音频: Streaming,不预加载，Vorbis\n\n     小点的音频DecompressOnLoad 不预加载  ，Vorbis\n\n会优化比较适中的cpu和内存，具体还要根据项目实际确定\n\n# Unity性能优化-音频设置\n\n没想到Unity的音频会成为内存杀手，在实际的商业项目中，音频的优化必不可少。\n\n1. Unity支持许多不同的音频格式，但最终它将它们全部转换为首选格式。音频压缩格式有PCM、ADPCM、Vorbis，不是所有平台都支持这些所有的压缩格式，有些平台，例如WebGL只支持AAC格式。\n\n2. 所有音频导入时，默认两项设置，LoadType是\"Decompress On Load\"，压缩格式是“Vorbis”，例如下图原始文件大小计算为35.9 MB，导入的大小计算为10.7 MB。这意味着这个音频剪辑将使您的游戏（存档）大小增加10兆字节，但播放它需要近36兆字节的RAM。\n\nThese are default import settings.\n\n3. Load Type的各个选项\n\nCompressed In Memory – 音频剪辑将存储在RAM中，播放时将解压缩，播放时不需要额外的存储。\nStreaming –音频永久存在设备上(硬盘或闪存上) ，播放流媒体方式. 不需要RAM进行存储或播放。\nDecompress On Load – 未压缩的音频将存储在RAM中。这个选项需要的内存最多，但是播放它不会像其他选项那样需要太多的CPU电源。\n         怎么选？长音频播放消耗大量内存，如果播放时不想在内存中进行解压，有两个选择：\n\n         （1）Load Type选“Streaming”， Compression Format 选”Vorbis\"，使用最少的内存，但需要更多的CPU电量和硬盘I/O操作；\n\n         （2）Load Type选“Compressed In Memory”， Compression Format 选”Vorbis\"，磁盘I/O操作被替换成内存的消耗，请注意，要调整“Quaility”滑块以减小压缩剪辑的大小，以交换音质，一般推荐70%左右。\n\n             一般是看到底音乐占据多少内存以及你的目标机型是什么样子的，如果音乐占据的内存本身比较高，你的目标机型的内存又比较小，那么就选择第二种，这种方案会卡一点，否则选择第一种就更好\n\n4. 声音特效\n\n     （1）对于经常播放的和短的音频剪辑，使用“Decompress On Load”和“PCM或ADPCM\"压缩格式。当选择PCM时，不需要解压缩，如果音频剪辑很短，它将很快加载。你也可以使用ADPCM。它需要解压，但解压比Vorbis快得多。\n\n      （2）对于经常播放，中等大小的音频剪辑使用”Compressed In Memory“和”ADPCM“压缩格式，比原始PCM小3.5倍，解压算法的CPU消耗量不会像vorbis消耗那么多CPU。\n\n      （3）对于很少播放并且长度比较短的声音剪辑，使用”Compressed In Memory\", ADPCM 这种压缩格式,原因同（2）。\n\n     （4）对于很少播放中等大小的音频，使用”Compressed In Memory“ 和Vorbis压缩格式。这个音频可能太长，无法使用adpcm存储，播放太少，因此解压缩所需的额外CPU电量不会太多。\n","slug":"U3D/资源管理/audio优化","published":1,"updated":"2022-02-21T11:07:47.100Z","_id":"ckw4trgea000c84ho0tr23ms1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>导入前的声音格式选择</p>\n<pre><code> 短声音：.aifff和.wav\n\n长声音：.mp3和.ogg\n</code></pre>\n<p>导入后的声音格式选择</p>\n<pre><code> Force ToMono：如果启用，该音频将向下混合到单声道\n\nLoad In Backgroud: 加载将在一个单独的线程上延迟的时间发生，而不会阻塞主线程\n\nAmbisonic: 如果音频文件包含有双声编码的音频，那么启用这个选项 \n\nLoadType: ①Decompress On Load:处理较小的声音（load就解压）\n\n                  ②Compressed In Memory：较大的声音（保持解压的状态）\n\n                  ③Streaming：使用最少的内存来缓冲压缩数据（很长的音乐）\n</code></pre>\n<p> Compression Format：</p>\n<pre><code>                 ①PCM  非常短的音效是最好的，质量高，文件大\n\n                 ②ADPCM大量噪音的声音，需要大量播放，比如脚步声，武器\n\n                 ③Vorbis/MP3 质量低，中等长度背景音乐\n\n                 ④HEVAG 类似于adpcm\n</code></pre>\n<p>Preload Audio Data 预加载</p>\n<p>方案：大点的音频: Streaming,不预加载，Vorbis</p>\n<pre><code> 小点的音频DecompressOnLoad 不预加载  ，Vorbis\n</code></pre>\n<p>会优化比较适中的cpu和内存，具体还要根据项目实际确定</p>\n<h1 id=\"Unity性能优化-音频设置\"><a href=\"#Unity性能优化-音频设置\" class=\"headerlink\" title=\"Unity性能优化-音频设置\"></a>Unity性能优化-音频设置</h1><p>没想到Unity的音频会成为内存杀手，在实际的商业项目中，音频的优化必不可少。</p>\n<ol>\n<li><p>Unity支持许多不同的音频格式，但最终它将它们全部转换为首选格式。音频压缩格式有PCM、ADPCM、Vorbis，不是所有平台都支持这些所有的压缩格式，有些平台，例如WebGL只支持AAC格式。</p>\n</li>\n<li><p>所有音频导入时，默认两项设置，LoadType是”Decompress On Load”，压缩格式是“Vorbis”，例如下图原始文件大小计算为35.9 MB，导入的大小计算为10.7 MB。这意味着这个音频剪辑将使您的游戏（存档）大小增加10兆字节，但播放它需要近36兆字节的RAM。</p>\n</li>\n</ol>\n<p>These are default import settings.</p>\n<ol start=\"3\">\n<li>Load Type的各个选项</li>\n</ol>\n<p>Compressed In Memory – 音频剪辑将存储在RAM中，播放时将解压缩，播放时不需要额外的存储。<br>Streaming –音频永久存在设备上(硬盘或闪存上) ，播放流媒体方式. 不需要RAM进行存储或播放。<br>Decompress On Load – 未压缩的音频将存储在RAM中。这个选项需要的内存最多，但是播放它不会像其他选项那样需要太多的CPU电源。<br>         怎么选？长音频播放消耗大量内存，如果播放时不想在内存中进行解压，有两个选择：</p>\n<pre><code>     （1）Load Type选“Streaming”， Compression Format 选”Vorbis&quot;，使用最少的内存，但需要更多的CPU电量和硬盘I/O操作；\n\n     （2）Load Type选“Compressed In Memory”， Compression Format 选”Vorbis&quot;，磁盘I/O操作被替换成内存的消耗，请注意，要调整“Quaility”滑块以减小压缩剪辑的大小，以交换音质，一般推荐70%左右。\n\n         一般是看到底音乐占据多少内存以及你的目标机型是什么样子的，如果音乐占据的内存本身比较高，你的目标机型的内存又比较小，那么就选择第二种，这种方案会卡一点，否则选择第一种就更好\n</code></pre>\n<ol start=\"4\">\n<li><p>声音特效</p>\n<p>  （1）对于经常播放的和短的音频剪辑，使用“Decompress On Load”和“PCM或ADPCM”压缩格式。当选择PCM时，不需要解压缩，如果音频剪辑很短，它将很快加载。你也可以使用ADPCM。它需要解压，但解压比Vorbis快得多。</p>\n<p>   （2）对于经常播放，中等大小的音频剪辑使用”Compressed In Memory“和”ADPCM“压缩格式，比原始PCM小3.5倍，解压算法的CPU消耗量不会像vorbis消耗那么多CPU。</p>\n<p>   （3）对于很少播放并且长度比较短的声音剪辑，使用”Compressed In Memory”, ADPCM 这种压缩格式,原因同（2）。</p>\n<p>  （4）对于很少播放中等大小的音频，使用”Compressed In Memory“ 和Vorbis压缩格式。这个音频可能太长，无法使用adpcm存储，播放太少，因此解压缩所需的额外CPU电量不会太多。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>导入前的声音格式选择</p>\n<pre><code> 短声音：.aifff和.wav\n\n长声音：.mp3和.ogg\n</code></pre>\n<p>导入后的声音格式选择</p>\n<pre><code> Force ToMono：如果启用，该音频将向下混合到单声道\n\nLoad In Backgroud: 加载将在一个单独的线程上延迟的时间发生，而不会阻塞主线程\n\nAmbisonic: 如果音频文件包含有双声编码的音频，那么启用这个选项 \n\nLoadType: ①Decompress On Load:处理较小的声音（load就解压）\n\n                  ②Compressed In Memory：较大的声音（保持解压的状态）\n\n                  ③Streaming：使用最少的内存来缓冲压缩数据（很长的音乐）\n</code></pre>\n<p> Compression Format：</p>\n<pre><code>                 ①PCM  非常短的音效是最好的，质量高，文件大\n\n                 ②ADPCM大量噪音的声音，需要大量播放，比如脚步声，武器\n\n                 ③Vorbis/MP3 质量低，中等长度背景音乐\n\n                 ④HEVAG 类似于adpcm\n</code></pre>\n<p>Preload Audio Data 预加载</p>\n<p>方案：大点的音频: Streaming,不预加载，Vorbis</p>\n<pre><code> 小点的音频DecompressOnLoad 不预加载  ，Vorbis\n</code></pre>\n<p>会优化比较适中的cpu和内存，具体还要根据项目实际确定</p>\n<h1 id=\"Unity性能优化-音频设置\"><a href=\"#Unity性能优化-音频设置\" class=\"headerlink\" title=\"Unity性能优化-音频设置\"></a>Unity性能优化-音频设置</h1><p>没想到Unity的音频会成为内存杀手，在实际的商业项目中，音频的优化必不可少。</p>\n<ol>\n<li><p>Unity支持许多不同的音频格式，但最终它将它们全部转换为首选格式。音频压缩格式有PCM、ADPCM、Vorbis，不是所有平台都支持这些所有的压缩格式，有些平台，例如WebGL只支持AAC格式。</p>\n</li>\n<li><p>所有音频导入时，默认两项设置，LoadType是”Decompress On Load”，压缩格式是“Vorbis”，例如下图原始文件大小计算为35.9 MB，导入的大小计算为10.7 MB。这意味着这个音频剪辑将使您的游戏（存档）大小增加10兆字节，但播放它需要近36兆字节的RAM。</p>\n</li>\n</ol>\n<p>These are default import settings.</p>\n<ol start=\"3\">\n<li>Load Type的各个选项</li>\n</ol>\n<p>Compressed In Memory – 音频剪辑将存储在RAM中，播放时将解压缩，播放时不需要额外的存储。<br>Streaming –音频永久存在设备上(硬盘或闪存上) ，播放流媒体方式. 不需要RAM进行存储或播放。<br>Decompress On Load – 未压缩的音频将存储在RAM中。这个选项需要的内存最多，但是播放它不会像其他选项那样需要太多的CPU电源。<br>         怎么选？长音频播放消耗大量内存，如果播放时不想在内存中进行解压，有两个选择：</p>\n<pre><code>     （1）Load Type选“Streaming”， Compression Format 选”Vorbis&quot;，使用最少的内存，但需要更多的CPU电量和硬盘I/O操作；\n\n     （2）Load Type选“Compressed In Memory”， Compression Format 选”Vorbis&quot;，磁盘I/O操作被替换成内存的消耗，请注意，要调整“Quaility”滑块以减小压缩剪辑的大小，以交换音质，一般推荐70%左右。\n\n         一般是看到底音乐占据多少内存以及你的目标机型是什么样子的，如果音乐占据的内存本身比较高，你的目标机型的内存又比较小，那么就选择第二种，这种方案会卡一点，否则选择第一种就更好\n</code></pre>\n<ol start=\"4\">\n<li><p>声音特效</p>\n<p>  （1）对于经常播放的和短的音频剪辑，使用“Decompress On Load”和“PCM或ADPCM”压缩格式。当选择PCM时，不需要解压缩，如果音频剪辑很短，它将很快加载。你也可以使用ADPCM。它需要解压，但解压比Vorbis快得多。</p>\n<p>   （2）对于经常播放，中等大小的音频剪辑使用”Compressed In Memory“和”ADPCM“压缩格式，比原始PCM小3.5倍，解压算法的CPU消耗量不会像vorbis消耗那么多CPU。</p>\n<p>   （3）对于很少播放并且长度比较短的声音剪辑，使用”Compressed In Memory”, ADPCM 这种压缩格式,原因同（2）。</p>\n<p>  （4）对于很少播放中等大小的音频，使用”Compressed In Memory“ 和Vorbis压缩格式。这个音频可能太长，无法使用adpcm存储，播放太少，因此解压缩所需的额外CPU电量不会太多。</p>\n</li>\n</ol>\n"},{"title":"Lua 内存 和 GC","date":"2021-06-14T04:00:00.000Z","toc":true,"_content":"##\n1 byte (B 字节) = 8 bits (b 比特位，0或1)\n1 KB = 1024 (2^10) byte\n1MB = 1024 KB\n1GB = 1024 MB\n1TB = 1024 GB\n##\n\n## 基础数据类型\n\n1. number 实数，可以是整数，浮点数\n2. string 字符串，一旦赋值不能被修改，可以通过方法string.gsub()来修改\n3. nil 全局变量没被赋值默认为nil，删除变量酒赋值为nil\n4. boolean false 和 nil为假，其它都为真\n5. function函数\n6. table 数组，容器\n7. userdata (类，其它语言转换过来就变成userdata类)\n9. thread 线程\n\n## Lua GC\n> 在Lua5.1后，lua采用分布回收以及三色增量标记清除算法，基本原里：\n\n* 每个新创建的对象设置为白色\n* 遍历root节点中引用的对象，从白色置为灰色，并且放入到灰色节点链表中\n* 从灰色链表中取未扫描到的对象，将其置为黑色，遍历这个对象关联的其他所有对象：如果为白色，则标记为灰色并加入到灰色链表中\n* 遍历所有对象，如果是白色，执行灰色，否则塞入到对象链表中，等待下一轮GC\n\n\n","source":"_posts/Lua/lua内存.md","raw":"---\ntitle: Lua 内存 和 GC\ncategories: lua\ntags: lua\ndate: 2021-06-14 12:00:00\ntoc: true\n---\n##\n1 byte (B 字节) = 8 bits (b 比特位，0或1)\n1 KB = 1024 (2^10) byte\n1MB = 1024 KB\n1GB = 1024 MB\n1TB = 1024 GB\n##\n\n## 基础数据类型\n\n1. number 实数，可以是整数，浮点数\n2. string 字符串，一旦赋值不能被修改，可以通过方法string.gsub()来修改\n3. nil 全局变量没被赋值默认为nil，删除变量酒赋值为nil\n4. boolean false 和 nil为假，其它都为真\n5. function函数\n6. table 数组，容器\n7. userdata (类，其它语言转换过来就变成userdata类)\n9. thread 线程\n\n## Lua GC\n> 在Lua5.1后，lua采用分布回收以及三色增量标记清除算法，基本原里：\n\n* 每个新创建的对象设置为白色\n* 遍历root节点中引用的对象，从白色置为灰色，并且放入到灰色节点链表中\n* 从灰色链表中取未扫描到的对象，将其置为黑色，遍历这个对象关联的其他所有对象：如果为白色，则标记为灰色并加入到灰色链表中\n* 遍历所有对象，如果是白色，执行灰色，否则塞入到对象链表中，等待下一轮GC\n\n\n","slug":"Lua/lua内存","published":1,"updated":"2022-02-06T10:32:43.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzwld1sp0000dwho1p7b4123","content":"<h2 id><a href=\"#\" class=\"headerlink\" title></a></h2><p>1 byte (B 字节) = 8 bits (b 比特位，0或1)<br>1 KB = 1024 (2^10) byte<br>1MB = 1024 KB<br>1GB = 1024 MB<br>1TB = 1024 GB<br>##</p>\n<h2 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h2><ol>\n<li>number 实数，可以是整数，浮点数</li>\n<li>string 字符串，一旦赋值不能被修改，可以通过方法string.gsub()来修改</li>\n<li>nil 全局变量没被赋值默认为nil，删除变量酒赋值为nil</li>\n<li>boolean false 和 nil为假，其它都为真</li>\n<li>function函数</li>\n<li>table 数组，容器</li>\n<li>userdata (类，其它语言转换过来就变成userdata类)</li>\n<li>thread 线程</li>\n</ol>\n<h2 id=\"Lua-GC\"><a href=\"#Lua-GC\" class=\"headerlink\" title=\"Lua GC\"></a>Lua GC</h2><blockquote>\n<p>在Lua5.1后，lua采用分布回收以及三色增量标记清除算法，基本原里：</p>\n</blockquote>\n<ul>\n<li>每个新创建的对象设置为白色</li>\n<li>遍历root节点中引用的对象，从白色置为灰色，并且放入到灰色节点链表中</li>\n<li>从灰色链表中取未扫描到的对象，将其置为黑色，遍历这个对象关联的其他所有对象：如果为白色，则标记为灰色并加入到灰色链表中</li>\n<li>遍历所有对象，如果是白色，执行灰色，否则塞入到对象链表中，等待下一轮GC</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id><a href=\"#\" class=\"headerlink\" title></a></h2><p>1 byte (B 字节) = 8 bits (b 比特位，0或1)<br>1 KB = 1024 (2^10) byte<br>1MB = 1024 KB<br>1GB = 1024 MB<br>1TB = 1024 GB<br>##</p>\n<h2 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h2><ol>\n<li>number 实数，可以是整数，浮点数</li>\n<li>string 字符串，一旦赋值不能被修改，可以通过方法string.gsub()来修改</li>\n<li>nil 全局变量没被赋值默认为nil，删除变量酒赋值为nil</li>\n<li>boolean false 和 nil为假，其它都为真</li>\n<li>function函数</li>\n<li>table 数组，容器</li>\n<li>userdata (类，其它语言转换过来就变成userdata类)</li>\n<li>thread 线程</li>\n</ol>\n<h2 id=\"Lua-GC\"><a href=\"#Lua-GC\" class=\"headerlink\" title=\"Lua GC\"></a>Lua GC</h2><blockquote>\n<p>在Lua5.1后，lua采用分布回收以及三色增量标记清除算法，基本原里：</p>\n</blockquote>\n<ul>\n<li>每个新创建的对象设置为白色</li>\n<li>遍历root节点中引用的对象，从白色置为灰色，并且放入到灰色节点链表中</li>\n<li>从灰色链表中取未扫描到的对象，将其置为黑色，遍历这个对象关联的其他所有对象：如果为白色，则标记为灰色并加入到灰色链表中</li>\n<li>遍历所有对象，如果是白色，执行灰色，否则塞入到对象链表中，等待下一轮GC</li>\n</ul>\n"},{"title":"ADB调试","date":"2021-06-14T04:00:00.000Z","toc":true,"_content":"\n## adb 链接设备\nadb connect 127.0.0.1:62001\n## 查看设备链接\nadb devices\n\n## 查看内存\nadb shell top | grep app_name\nadb shell top | grep com.bilibili.hcshjxaz\n## 链接Unity\n\nadb forward tcp:34999 localabstract:包名\n","source":"_posts/U3D/ADB调试.md","raw":"---\ntitle: ADB调试\ncategories: U3D\ntags: 工具\ndate: 2021-06-14 12:00:00\ntoc: true\n---\n\n## adb 链接设备\nadb connect 127.0.0.1:62001\n## 查看设备链接\nadb devices\n\n## 查看内存\nadb shell top | grep app_name\nadb shell top | grep com.bilibili.hcshjxaz\n## 链接Unity\n\nadb forward tcp:34999 localabstract:包名\n","slug":"U3D/ADB调试","published":1,"updated":"2022-02-21T11:10:56.849Z","_id":"ckzwld1st0001dwhodkbv4i07","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"adb-链接设备\"><a href=\"#adb-链接设备\" class=\"headerlink\" title=\"adb 链接设备\"></a>adb 链接设备</h2><p>adb connect 127.0.0.1:62001</p>\n<h2 id=\"查看设备链接\"><a href=\"#查看设备链接\" class=\"headerlink\" title=\"查看设备链接\"></a>查看设备链接</h2><p>adb devices</p>\n<h2 id=\"查看内存\"><a href=\"#查看内存\" class=\"headerlink\" title=\"查看内存\"></a>查看内存</h2><p>adb shell top | grep app_name<br>adb shell top | grep com.bilibili.hcshjxaz</p>\n<h2 id=\"链接Unity\"><a href=\"#链接Unity\" class=\"headerlink\" title=\"链接Unity\"></a>链接Unity</h2><p>adb forward tcp:34999 localabstract:包名</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"adb-链接设备\"><a href=\"#adb-链接设备\" class=\"headerlink\" title=\"adb 链接设备\"></a>adb 链接设备</h2><p>adb connect 127.0.0.1:62001</p>\n<h2 id=\"查看设备链接\"><a href=\"#查看设备链接\" class=\"headerlink\" title=\"查看设备链接\"></a>查看设备链接</h2><p>adb devices</p>\n<h2 id=\"查看内存\"><a href=\"#查看内存\" class=\"headerlink\" title=\"查看内存\"></a>查看内存</h2><p>adb shell top | grep app_name<br>adb shell top | grep com.bilibili.hcshjxaz</p>\n<h2 id=\"链接Unity\"><a href=\"#链接Unity\" class=\"headerlink\" title=\"链接Unity\"></a>链接Unity</h2><p>adb forward tcp:34999 localabstract:包名</p>\n"},{"title":"局部性和缓存命中率","date":"2022-02-01T05:43:00.000Z","toc":true,"_content":"\n## 时间局部性\n## 空间局部性","source":"_posts/代码篇/局部性.md","raw":"---\ntitle: 局部性和缓存命中率\ncategories: Codes\ntags: Codes\ndate: 2022-02-01 13:43:00\ntoc: true\n---\n\n## 时间局部性\n## 空间局部性","slug":"代码篇/局部性","published":1,"updated":"2022-02-21T11:12:30.961Z","_id":"ckzwld1t30008dwhoajqs0npr","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"时间局部性\"><a href=\"#时间局部性\" class=\"headerlink\" title=\"时间局部性\"></a>时间局部性</h2><h2 id=\"空间局部性\"><a href=\"#空间局部性\" class=\"headerlink\" title=\"空间局部性\"></a>空间局部性</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"时间局部性\"><a href=\"#时间局部性\" class=\"headerlink\" title=\"时间局部性\"></a>时间局部性</h2><h2 id=\"空间局部性\"><a href=\"#空间局部性\" class=\"headerlink\" title=\"空间局部性\"></a>空间局部性</h2>"},{"title":"AssetBundle优化","date":"2021-06-14T04:00:00.000Z","toc":true,"_content":"\n## \n\n1.一.BuildAssetBundleOption.DisableWriteTypeTree 关闭\n","source":"_posts/U3D/资源管理/Assetbundle优化.md","raw":"---\ntitle: AssetBundle优化\ncategories:  U3D\ntags: 资源\ndate: 2021-06-14 12:00:00\ntoc: true\n---\n\n## \n\n1.一.BuildAssetBundleOption.DisableWriteTypeTree 关闭\n","slug":"U3D/资源管理/Assetbundle优化","published":1,"updated":"2022-02-21T11:08:03.545Z","_id":"ckzwld1t40009dwhohu8e5tf2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id><a href=\"#\" class=\"headerlink\" title></a></h2><p>1.一.BuildAssetBundleOption.DisableWriteTypeTree 关闭</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id><a href=\"#\" class=\"headerlink\" title></a></h2><p>1.一.BuildAssetBundleOption.DisableWriteTypeTree 关闭</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckpsg8e5t0001zchoac9e6eh1","category_id":"ckpsg8e5x0004zcho937hdd8d","_id":"ckpsg8e65000gzchogz5yf3zh"},{"post_id":"ckpsg8e63000fzchodhae6kjw","category_id":"ckpsg8e63000czchoaymo2smj","_id":"ckpsg8e66000lzchoamb28lrm"},{"post_id":"ckpsg8e5w0003zchohc5xa78g","category_id":"ckpsg8e63000czchoaymo2smj","_id":"ckpsg8e67000ozchoe3z012uo"},{"post_id":"ckpsg8e5z0007zchoejhcb6su","category_id":"ckpsg8e5x0004zcho937hdd8d","_id":"ckpsg8e67000rzchodhz3hgp1"},{"post_id":"ckpsg8e610009zcho3b527omj","category_id":"ckpsg8e63000czchoaymo2smj","_id":"ckpsg8e68000uzcho7mz387be"},{"post_id":"ckpsg8e62000bzchoa4q2bomj","category_id":"ckpsg8e63000czchoaymo2smj","_id":"ckpsg8e68000wzchoe2f3dbcd"},{"post_id":"ckpw6qo4r000014ho3klsg32y","category_id":"ckpw6qo4v000114ho8wdn5efd","_id":"ckpw6qo4y000414hogykhf3x5"},{"post_id":"ckq0iwwgy0000nwhoghky6wcs","category_id":"ckq0iwwh30002nwho2s6ubcz6","_id":"ckq0iwwh80007nwho9rj75xs8"},{"post_id":"ckq0iwwh10001nwho0hey9jic","category_id":"ckq0iwwh30002nwho2s6ubcz6","_id":"ckq0iwwh80009nwho94in5tt9"},{"post_id":"cks7ax3mw0000a0ho415bhbt0","category_id":"cks7ax3n00001a0ho2x9n42s7","_id":"cks7ax3n50004a0ho9m859afz"},{"post_id":"cks7bah9l0000vohoaro8a1b4","category_id":"cks7bah9p0001vohog2by4p75","_id":"cks7bah9t0004voho7ddnfxh8"},{"post_id":"ckzwld1sp0000dwho1p7b4123","category_id":"ckzwld1su0002dwho1jv50k2v","_id":"ckzwld1t20007dwhofv1l9yka"},{"post_id":"ckqrp6q0w0000asho4fjx2dl9","category_id":"ckzwli4ui00008gho97ewd8zn","_id":"ckzwli4ur00038gho9fff8wrt"},{"post_id":"ckw4trge2000284hogbhobpp2","category_id":"ckzwli4ui00008gho97ewd8zn","_id":"ckzwli4us00058ghocz727gc9"},{"post_id":"ckzwld1t40009dwhohu8e5tf2","category_id":"ckzwli4ui00008gho97ewd8zn","_id":"ckzwli4us00068ghociw16yvw"},{"post_id":"ckzwld1st0001dwhodkbv4i07","category_id":"ckzwli4ui00008gho97ewd8zn","_id":"ckzwli4us00078gho4kh4016b"},{"post_id":"ckw4trge0000184hoex456f9e","category_id":"ckzwli4ui00008gho97ewd8zn","_id":"ckzwli4us00088gho85old5be"},{"post_id":"ckw4trge9000b84hocn699zxm","category_id":"ckzwli4ui00008gho97ewd8zn","_id":"ckzwli4vk00098gho0cpobnuv"},{"post_id":"ckw4trgea000c84ho0tr23ms1","category_id":"ckzwli4ui00008gho97ewd8zn","_id":"ckzwli4vk000a8ghofl1tgltd"},{"post_id":"cks8p0dbi0000y8hoey95cpd4","category_id":"ckzwlm41o0000w8hobdtmdbvn","_id":"ckzwlm41x0001w8ho0mnl8gs4"},{"post_id":"ckzwld1t30008dwhoajqs0npr","category_id":"ckzwlnmkp000018ho82kzhfir","_id":"ckzwlnmkw000318ho4pcwh4dj"}],"PostTag":[{"post_id":"ckpsg8e5t0001zchoac9e6eh1","tag_id":"ckpsg8e5z0005zcho3uy37qmu","_id":"ckpsg8e63000ezcho2xng6h2k"},{"post_id":"ckpsg8e63000fzchodhae6kjw","tag_id":"ckpsg8e63000dzchoa17k9183","_id":"ckpsg8e66000jzcho7a62df47"},{"post_id":"ckpsg8e5w0003zchohc5xa78g","tag_id":"ckpsg8e63000dzchoa17k9183","_id":"ckpsg8e66000kzchoc8d07i3u"},{"post_id":"ckpsg8e5z0007zchoejhcb6su","tag_id":"ckpsg8e65000izchoanmp0tsn","_id":"ckpsg8e67000pzcho2yse87z6"},{"post_id":"ckpsg8e610009zcho3b527omj","tag_id":"ckpsg8e63000dzchoa17k9183","_id":"ckpsg8e68000tzcho5814as8q"},{"post_id":"ckpsg8e62000bzchoa4q2bomj","tag_id":"ckpsg8e63000dzchoa17k9183","_id":"ckpsg8e68000vzcho9vpgaiv8"},{"post_id":"ckpw6qo4r000014ho3klsg32y","tag_id":"ckpw6qo4y000214ho8b2a795h","_id":"ckpw6qo4y000314ho2fnz4hay"},{"post_id":"ckq0iwwgy0000nwhoghky6wcs","tag_id":"ckq0iwwh50003nwho6b0m5gs3","_id":"ckq0iwwh70006nwhogz1o5429"},{"post_id":"ckq0iwwh10001nwho0hey9jic","tag_id":"ckq0iwwh60005nwhogjklamqq","_id":"ckq0iwwh80008nwhodadd4cgo"},{"post_id":"ckqrp6q0w0000asho4fjx2dl9","tag_id":"ckqrp6q130002asho66jug8x2","_id":"ckqrp6q140003ashoez797gpf"},{"post_id":"cks7ax3mw0000a0ho415bhbt0","tag_id":"cks7ax3n40002a0ho6g9581i2","_id":"cks7ax3n50003a0ho5mkf10nd"},{"post_id":"cks7bah9l0000vohoaro8a1b4","tag_id":"cks7bah9s0002voho13njg8iz","_id":"cks7bah9t0003vohoe3qw1tbh"},{"post_id":"cks8p0dbi0000y8hoey95cpd4","tag_id":"cks8p0dbq0002y8ho24q58dap","_id":"cks8p0dbr0003y8ho5t2f64y3"},{"post_id":"ckw4trge0000184hoex456f9e","tag_id":"ckw4trge6000484ho72xog7a5","_id":"ckw4trge8000784hohvf8g2wa"},{"post_id":"ckw4trge2000284hogbhobpp2","tag_id":"ckw4trge7000684ho0w1ha30e","_id":"ckw4trge8000984ho78qtblne"},{"post_id":"ckw4trge9000b84hocn699zxm","tag_id":"ckqrp6q130002asho66jug8x2","_id":"ckw4trgeb000e84ho15p15r5o"},{"post_id":"ckw4trgea000c84ho0tr23ms1","tag_id":"ckw4trgeb000g84ho0v8qdkk4","_id":"ckw4trged000k84ho3di4eluj"},{"post_id":"ckzwld1st0001dwhodkbv4i07","tag_id":"ckw4trged000j84hoefjcgual","_id":"ckzwld1t10004dwhobfsq708v"},{"post_id":"ckzwld1sp0000dwho1p7b4123","tag_id":"ckzwld1t00003dwhoek9x7lib","_id":"ckzwld1t20006dwho24vz4n53"},{"post_id":"ckzwld1t40009dwhohu8e5tf2","tag_id":"ckw4trgeb000g84ho0v8qdkk4","_id":"ckzwli4ur00028gho14wn9tdn"},{"post_id":"ckzwld1t30008dwhoajqs0npr","tag_id":"ckzwlnmkv000118ho55e18lyz","_id":"ckzwlnmkv000218hoffh9cyio"}],"Tag":[{"name":"pure","_id":"ckpsg8e5z0005zcho3uy37qmu"},{"name":"UE4","_id":"ckpsg8e63000dzchoa17k9183"},{"name":"hexo","_id":"ckpsg8e65000izchoanmp0tsn"},{"name":"算法","_id":"ckpw6qo4y000214ho8b2a795h"},{"name":"Charp Lua","_id":"ckq0iwwh50003nwho6b0m5gs3"},{"name":"GoogleProtobuffer","_id":"ckq0iwwh60005nwhogjklamqq"},{"name":"框架","_id":"ckqrp6q130002asho66jug8x2"},{"name":"开发流程","_id":"cks7ax3n40002a0ho6g9581i2"},{"name":"shell","_id":"cks7bah9s0002voho13njg8iz"},{"name":"builtin_shaders","_id":"cks8p0dbq0002y8ho24q58dap"},{"name":"AAB","_id":"ckw4trge6000484ho72xog7a5"},{"name":"优化","_id":"ckw4trge7000684ho0w1ha30e"},{"name":"资源","_id":"ckw4trgeb000g84ho0v8qdkk4"},{"name":"工具","_id":"ckw4trged000j84hoefjcgual"},{"name":"lua","_id":"ckzwld1t00003dwhoek9x7lib"},{"name":"Codes","_id":"ckzwlnmkv000118ho55e18lyz"}]}}